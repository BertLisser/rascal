Name: Prettyprinter

Synopsis: Transform an [AbstractSyntaxTree] into a formatted string.

Syntax:

Types:

Function:
       
Usage:

Details:

Description:
A [pretty printer](http://en.wikipedia.org/wiki/Prettyprint)
formats the source code of programs. Alternative names are _formatter_ or _beautifier_.
Pretty printers differ in the inputs they accept:
* The source text itself.
* A [ParseTree] that corresponds to the source text. This variant is also called _unparser_.
* An [AbstractSyntaxTree] that corresponds to the source text.


Pretty printers also differ in flexibility. They differ in:
* The source language(s) they can accept.
* The adaptability of the formatting rules.

Examples:
The program fragment
<listing>
if(x > 10) { System.err.println("x > 10"); } else { System.err.println("x <= 10"); }
</listing>
can be pretty printed in many different ways. Here are two variants examples:
<listing>
if(x > 10) { 
   System.err.println("x > 10"); 
} else { 
   System.err.println("x <= 10"); 
}
</listing>

<listing>
if( x > 10 )
{ 
  System.err.println("x > 10"); 
} else 
{ 
   System.err.println("x <= 10"); 
}
</listing>
Benefits:

Pitfalls:

Questions:

       
