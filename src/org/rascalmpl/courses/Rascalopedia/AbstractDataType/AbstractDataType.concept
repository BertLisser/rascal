Name: AbstractDataType

Synopsis: A definition of a data type.

Syntax:

Types:

Function:
       
Usage:

Details:

Description:
An [Abstract Data Type](http://en.wikipedia.org/wiki/Abstract_data_type) is a mathematical description of a structure
that can be implemented in various ways. For instance, a stack data type can be characterized by `empty` (the empty stack),
two functions `push` and `pop` and axioms that define them. At the implementation level, a stack
can be implemented using a list, array or something else.

In functional languages, and also in Rascal, abstract datatypes (or ADTs for short)
are used to define new data types. Well-known examples are [stack](http://en.wikipedia.org/wiki/Stack_(data_structure)) and [tree](http://en.wikipedia.org/wiki/Tree_(data_structure)).

See [Rascal:AlgebraicDataType] and [Rascal:Values/Constructor].

Examples:

===Abstract Data Types in daily life===
* A stack of trays in the local cafetaria.
* A tree.
* Coral.


![dispenser](dispenser.png|200px)
[credit](http://www.thermo-box.co.uk/fimi-food-transport-and-handling-products/self-levelling-heated-and-unheated-plate-and-tray-systems.html)
![tree](tree.png|300px)
[credit](http://free-extras.com/images/tree-569.htm)
![coral](coral.png|320px)[credit](http://blog.enn.com/?p=476)


===Abstract Data Types in computer science===
* The run-time stack of a programming language interpreter.
* A search tree.
* An ontology.


===Abstract Data Types in Rascal===
* A tree data type:
<listing>
data MyTree = leaf(int n) | tree(str name, MyTree left, MyTree right);
</listing>

Benefits:

Pitfalls:

Questions:

       
