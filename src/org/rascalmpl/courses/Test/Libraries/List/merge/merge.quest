[tvQuestion("Test/Libraries/List/merge","1",typeOfExpr(),details(" ",["import List;"],"","","merge(\<L1\>, \<M1\>)","",false,false,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>,<"M",same("L")>],[<"L1","sort(\<L\>)">,<"M1","sort(\<M\>)">],void(),"")),tvQuestion("Test/Libraries/List/merge","2",valueOfExpr(),details(" ",["import List;"],"","","merge(\<L1\>, \<M1\>)","",false,false,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>,<"M",same("L")>],[<"L1","sort(\<L\>)">,<"M1","sort(\<M\>)">,<"H","merge(\<L1\>, \<M1\>)">],void(),"\<H\>")),tvQuestion("Test/Libraries/List/merge","3",valueOfExpr(),details(" ",["import List;","import String;"],"","","merge(\<L1\>, \<M1\>, ",") == \<H\>",false,true,[<"L",list(str(),1,5)>,<"M",same("L")>],[<"L1","sort(\<L\>,bool(str x, str y){return size(x) \> size(y);})">,<"M1","sort(\<M\>,bool(str x, str y){return size(x) \> size(y);})">,<"H","merge(\<L1\>, \<M1\>, bool(str x, str y){return size(x) \> size(y);})">],void(),"\<H\>"))]