[tvQuestion("Test","1",typeOfExpr(),details(" ",["import List;"],"","","permutations(\<L\>)","",false,false,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>],[],void(),"")),tvQuestion("Test","2",valueOfExpr(),details(" ",["import List;","import Set;"],"","","size(permutations(\<L\>)) == ","",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>],[<"H","size(permutations(\<L\>))">],void(),"\<H\>")),tvQuestion("Test","3",valueOfExpr(),details(" ",["import List;"],"","","permutations(\<L\>) == ","",false,true,[<"L",list(arb(0,[int(-20,20),str()]),0,3)>],[<"H","permutations(\<L\>)">],void(),"\<H\>")),tvQuestion("Test","4",valueOfExpr(),details(" Fill in the missing operator.\n",[],"","","\<A\> "," \<B\> == \<C\>",false,true,[<"B",arb(0,[int(0,100),str()])>,<"A",list(same("B"),1,5)>],[<"C","\<A\> + \<B\>">],void(),"Use +.")),tvQuestion("Test","5",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> \> \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]),1,5)>,<"B",same("A")>],[],void(),"")),tvQuestion("Test","6",valueOfExpr(),details(" ",[],"","","2 * \<A:int\>","",false,false,[<"A",int(-20,20)>],[],void(),"")),tvQuestion("Test","7",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,str,real]]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),real(-20,20)]),1,5)>],[],void(),""))]