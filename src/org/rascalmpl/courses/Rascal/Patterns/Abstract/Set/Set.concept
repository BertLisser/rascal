Name: Set

Synopsis: Set in abstract pattern.

Syntax: `{ $Pat_1$, $Pat_2$, ..., $Pat_n$ }`

Types:

Function:

Details:

Description:

A set pattern matches a set value, provided that $Pat_1$, $Pat_2$, ..., $Pat_n$ match the elements of that set in __any__ order
(recall that the elements of a set are unordered and do not contain duplicates).
Completely analogous to list patterns, there are two special cases when one of the patterns $Pat_i$ is

* a variable declaration pattern with a set type that is identical to the type of the set that is being matched.

* a variable pattern, where the variable has been declared, but not initialized, outside the pattern with a set type that is identical to the type of the set that is being matched.


In both cases set matching is applied and the variable can match an arbitrary number (in arbitrary order!) of elements of the subject set.

Examples:

<screen>
import IO;
if({10, set[int] S, 50} := {50, 40, 30, 20, 10})
   println("Match succeeded, S = <S>");
// Using a [MultiVariable] this can be abbreviated to:
if({10, S*, 50} := {50, 40, 30, 20, 10})
   println("Match succeeded, S = <S>");
// Here we see an example, where all possible splits of a set in two subsets are printed:
for({S1*, S2*} :={30, 20, 10})
    println("<S1> and <S2>");
</screen>

Benefits:

Pitfalls:

Questions:

       
