Name: Node

Synopsis: Node in abstract pattern.

Syntax:`$Name$ ( $Pat_1$, $Pat_2$, ..., $Pat_n$ )`<br>

Types:

Function:

Details:

Description:

A node pattern matches a node value or a datatype value, provided that $Name$ matches with the constructor symbol of that value 
and $Pat_1$, $Pat_2$, ..., $Pat_n$  match the children of that value in order.

Examples:
<screen>
// Match on node values (recall that the function symbol of a node has to be quoted, see [Values/Node]):
import IO;
if("f"(A,13,B) := "f"("abc", 13, false))
   println("A = <A>, B = <B>");
// Define a data type and use it to match:
data Color = red(int N) | black(int N);
if(red(K) := red(13))
   println("K = <K>");
</screen>

Benefits:

Pitfalls:

Questions:

       
