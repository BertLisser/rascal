Name: JavaADT

Synopsis: Describes a flat representation of the Java abstract syntax trees (ASTs).

Syntax: `lang::java::jdt::JavaADT;`

Types:
<listing>

anno Entity AstNode@javaType; 
anno map[str, Entity] AstNode@bindings;
anno loc AstNode@location;

data AstNode = compilationUnit(Option[AstNode] package, list[AstNode] imports, list[AstNode] typeDeclarations)
				
	// Declarations
	| anonymousClassDeclaration(list[AstNode] bodyDeclarations)
	| annotationTypeDeclaration(list[Modifier] modifiers, list[AstNode] annotations, str name, list[AstNode] bodyDeclarations)
	| annotationTypeMemberDeclaration(list[Modifier] modifiers, list[AstNode] annotations, AstNode typeArgument, str name, Option[AstNode] defaultBlock)
	| enumDeclaration(list[Modifier] modifiers, list[AstNode] annotations, str name, list[AstNode] implements, list[AstNode] enumConstants, list[AstNode] bodyDeclarations)
	| enumConstantDeclaration(list[Modifier] modifiers, list[AstNode] annotations, str name, list[AstNode] arguments, Option[AstNode] anonymousClassDeclaration)
	| typeDeclaration(list[Modifier] modifiers, list[AstNode] annotations, str objectType, str name, list[AstNode] genericTypes, Option[AstNode] extends, list[AstNode] implements, list[AstNode] bodyDeclarations)
	| fieldDeclaration(list[Modifier] modifiers, list[AstNode] annotations, AstNode \type, list[AstNode] fragments)
	| initializer(list[Modifier] modifiers, list[AstNode] annotations, AstNode body)
	| methodDeclaration(list[Modifier] modifiers, list[AstNode] annotations, list[AstNode] genericTypes, Option[AstNode] returnType, str name, list[AstNode] parameters, list[AstNode] possibleExceptions, Option[AstNode] implementation)
	| importDeclaration(str name, bool staticImport, bool onDemand)
	| packageDeclaration(str name, list[AstNode] annotations)
	| singleVariableDeclaration(str name, list[Modifier] modifiers, list[AstNode] annotations, AstNode \type, Option[AstNode] initializer, bool isVarargs)
	| variableDeclarationFragment(str name, Option[AstNode] initializer)
	| typeParameter(str name, list[AstNode] extendsList)

	// Expressions
	| markerAnnotation(str typeName)
	| normalAnnotation(str typeName, list[AstNode] memberValuePairs)
	| memberValuePair(str name, AstNode \value)				
	| singleMemberAnnotation(str typeName, AstNode \value)
	| arrayAccess(AstNode array, AstNode index)
	| arrayCreation(AstNode \type, list[AstNode] dimensions, Option[AstNode] initializer)
	| arrayInitializer(list[AstNode] expressions)
	| assignment(AstNode leftSide, AstNode rightSide)
	| booleanLiteral(bool boolValue)
	| castExpression(AstNode \type, AstNode expression)
	| characterLiteral(str charValue)
	| classInstanceCreation(Option[AstNode] optionalExpression, AstNode \type, list[AstNode] genericTypes, list[AstNode] typedArguments, Option[AstNode] anonymousClassDeclaration)
	| conditionalExpression(AstNode expression, AstNode thenBranch, AstNode elseBranch)
	| fieldAccess(AstNode expression, str name)
	| infixExpression(str operator, AstNode leftSide, AstNode rightSide, list[AstNode] extendedOperands)
	| instanceofExpression(AstNode leftSide, AstNode rightSide)
	| methodInvocation(Option[AstNode] optionalExpression, list[AstNode] genericTypes, str name, list[AstNode] typedArguments)
	| superMethodInvocation(Option[AstNode] optionalQualifier, list[AstNode] genericTypes, str name, list[AstNode] typedArguments)
	| qualifiedName(AstNode qualifier, str name)
	| simpleName(str simpleName)
	| nullLiteral()
	| numberLiteral(str number)
	| parenthesizedExpression(AstNode expression)
	| postfixExpression(AstNode operand, str operator)
	| prefixExpression(AstNode operand, str operator)
	| stringLiteral(str stringValue)
	| superFieldAccess(Option[AstNode] optionalQualifier, str name)
	| thisExpression(Option[AstNode] optionalQualifier)
	| typeLiteral(AstNode \type)
	| variableDeclarationExpression(list[Modifier] modifiers, list[AstNode] annotations, AstNode \type, list[AstNode] fragments)
						
	// Statements
	| assertStatement(AstNode expression, Option[AstNode] message)
	| block(list[AstNode] statements)
	| breakStatement(Option[str] label)
	| constructorInvocation(list[AstNode] genericTypes, list[AstNode] typedArguments)
	| superConstructorInvocation(Option[AstNode] optionalExpression, list[AstNode] genericTypes, list[AstNode] typedArguments)
	| continueStatement(Option[str] label)
	| doStatement(AstNode body, AstNode whileExpression)
	| emptyStatement()
	| enhancedForStatement(AstNode parameter, AstNode collectionExpression, AstNode body)
	| expressionStatement(AstNode expression)
	| forStatement(list[AstNode] initializers, Option[AstNode] optionalBooleanExpression, list[AstNode] updaters, AstNode body)
	| ifStatement(AstNode booleanExpression, AstNode thenStatement, Option[AstNode] elseStatement)
	| labeledStatement(str name, AstNode body)
	| returnStatement(Option[AstNode] optionalExpression)
	| switchStatement(AstNode expression, list[AstNode] statements)
	| switchCase(bool isDefault, Option[AstNode] optionalExpression)
	| synchronizedStatement(AstNode expression, AstNode body)
	| throwStatement(AstNode expression)
	| tryStatement(AstNode body, list[AstNode] catchClauses, Option[AstNode] \finally)										
	| catchClause(AstNode exception, AstNode body)
	| typeDeclarationStatement(AstNode typeDeclaration)
	| variableDeclarationStatement(list[Modifier] modifiers, list[AstNode] annotations, AstNode \type, list[AstNode] fragments)
	| whileStatement(AstNode expression, AstNode body)
							
	// Types
	| arrayType(AstNode \typeOfArray)
	| parameterizedType(AstNode \typeOfParam, list[AstNode] genericTypes)
	| qualifiedType(AstNode qualifier, str name)
	| primitiveType(PrimitiveType primitive)
	| simpleType(str name)
	| unionType(list[AstNode] types)
	| wildcardType(Option[AstNode] bound, Option[str] lowerOrUpper)
																			
	// Comments 
	| blockComment()
	| lineComment()

	// Javadoc
	| javadoc()
	| tagElement()
	| textElement()
	| memberRef()
	| memberRefParameter()
	;
				
data Option[&T] = some(&T opt)
	| none()
	;
	
</listing>

Function:

Details:

Description:

This module provides a data model for representing Java sources as abstract syntax trees (ASTs). 
Java declarations, expressions, statements, types, comments, Javadocs that may occur in the Java compilation units are represented by the data type `AstNode`.

The `javaType` and `bindings` annotations are defined on the `AstNode`. While the `javaType` annotation provides the Java type if it can be resolved for a node, e.g., the type of a Java expression, the `bindings` annotation allows accessing all the node bindings resolved, e.g., the type binding `bindings["typeBinding"]` and method binding `bindings["methodBinding"]` of a method invocation expression. The bindings are symbolic values of the Rascal `Entity` type (see [$lang/java/jdt/Java]) uniquely representing Java types and declarations, e.g., a method declaration.

The `location` annotation links a node to the location in the source.

The data type `Option` models the optional occurrence of a value of some type, for example, the second argument of the `variableDeclarationFragment(str name, Option[AstNode] initializer)` constructor is of the `Option[AstNode]` type
indicating that Java does not require a variable to be initialized when being declared. 

Examples:
<screen>
import lang::java::jdt::JavaADT;
</screen>
Benefits:
* it provides a structural representation of Java sources: tree(s) generated by [$lang/java/jdt/JDT/createAstFromFile] and [$lang/java/jdt/JDT/createAstsFromProject], and list of the nodes produced by the `methodBodies` annotation generated by the [$lang/java/jdt] library.

Pitfalls:
* it is a flat representation, so it is not easy to see which nodes can be nested under which other nodes
* it can not be used to generate Java code

Questions:

       
