Name: Java

Synopsis: An Entity datatype for representing facts about Java programs.

Syntax:

Types:
<listing>
data Entity = entity(list[Id] id);

data Id = 
       package(str name)
     | class(str name)
     | class(str name, list[Entity] params)
     | interface(str name)
     | interface(str name, list[Entity] params)
     | anonymousClass(int nr)
     | enum(str name)
        
     | method(str name, list[Entity] params, Entity returnType)
     | constr(list[Entity] params)
     | initializer()
     | initializer(int nr)

     | field(str name)
     | parameter(str name)
     | variable(str name, int id)
     | enumConstant(str name)
     
     | primitive(PrimitiveType primType)
     | array(Entity elementType)
     
     | typeParameter(str name)
     | wildcard()
     | wildcard(Bound bound)
     | captureof(Entity wildCard)
     ;


public Entity Object = entity([package("java"), package("lang"), class("Object")]);


data PrimitiveType = 
       byte()
     | short()
     | \int()        /*1*/
     | long()
     | float()
     | double()
     | char()
     | boolean()
     | \void()       /*1*/
     | null()
     ;

data Bound = 
       extends(Entity extended)
     | super(Entity super)
     ;

data Modifier = 
       \public()     /*1*/
     | protected()
     | \private()    /*1*/
     | static()
     | abstract()
     | final()
     | native()
     | synchronized()
     | transient()
     | volatile()
     | strictfp()
     | deprecated() 
     ;
</listing>

Note (/*1*/) how various Rascal keywords like `int` and `public` have to be escaped.


Function:

Details:

Description:
This module provides a data model for facts that are extracted from Java source code.
The Java constructs that may occur in extracted facts are represented by the datatype `Entity`. 
An `Entity` represents a fully qualified identifier (represented by a list of `Id`s) pointing to a 
very specific part of a Java source code file. 
Entity is therefore a nested data-type.

`Id`s are parts of java source code that have a name. They are used to construct unique entity names.

The Entity `Object` is the root of Java's type hierarchy.

`PrimitiveType` represents the primitive types of Java.

`Bound` represents the relations between Java classes and interfaces.

`Modifier` represents possible modifiers of Java entities.

Examples:

Benefits:

Pitfalls:
This module is only available in the Eclipse version of Rascal.

Questions:

