<AUTOINSERTED>
Name: DOM
Usage: `import lang::xml::DOM;`
</AUTOINSERTED>

Synopsis: Functions for reading and writing XML files using DOM.

Details: Node
Description:

The Document Object Model [DOM](http://en.wikipedia.org/wiki/Document_Object_Model) is a cross-platform and language-independent
way of representing and manipulating HTML, XHTML and XML documents.
We use a version of DOM called [JDOM](http://jdom.org/).

The typical processing of an XML document will contain (depending on the application) a combination of the following steps:
* Read the XML file as a string using [readFile].
* Parse and convert that string to a DOM instance using one of [parseXMLDOM] or [parseXMLDOMTrim].
  The result is a value of type [xml/DOM/Node].
* Extract information from the DOM instance (typically using pattern matching or visits).
* Transform the DOM instance to another, non-XML, representation.
* Transform the DOM instance or create a new one.
* Write a DOM instance to a file using [xmlRaw], [xmlCompact], or [xmlPretty].


The following functions are provided:
<toc Rascal/Libraries/lang/xml/DOM 1>

Examples:
We will use the following example XML file that represents simple notes:
<listing>
<note>
<to>Jurgen</to>
<to>Tijs</to>
<from>Paul</from>
<date>2012-04-01</date>
<heading font="bold">Reminder</heading>
<body>Don't forget to run the Rascal tests!</body>
</note>
</listing>

We can, for instance, read this XML file and extract all `<to> ... </to>` elements from it:
<screen>
import IO;
import lang::xml::DOM;
D = parseXMLDOM(readFile(|tutor:///Rascal/Libraries/lang/xml/note.xml|));
//With the DOM instance `D` available we can extract the strings from all `to` elements:
for(/element(_,"to",/str N) := D) 
    println(N);
</screen>
This can be read as follows:
* Create the DOM instance `D` for the note file.
* Match the D for elements that have `"to"` as second field. Such an element looks like: `element(none(),"to",[charData("Jurgen")])`.
  We use a [Descendant] pattern `/` to achieve this: first to find the nested `element` with a `"to"` field, and then to find the embedded string in that element.
* From the matching elements, extract the name string `N` that is embedded in the third field.
* Print the name `N`.