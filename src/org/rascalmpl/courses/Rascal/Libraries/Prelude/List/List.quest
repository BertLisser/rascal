[tvQuestion("Rascal/Libraries/Prelude/List","1",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>, \<E\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),4,6)>,<"I",int(0,3)>],[<"E","\<L\>[\<I\>]">,<"H","indexOf(\<L\>, \<E\>)">],void(),"indexOf")),tvQuestion("Rascal/Libraries/Prelude/List","2",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>, \<I\>, \<E\>) == \<H\>",false,true,[<"E",arb(0,[int(-20,20),str()])>,<"L",list(same("E"),4,6)>,<"I",int(0,3)>],[<"H","insertAt(\<L\>, \<I\>, \<E\>)">],void(),"insertAt")),tvQuestion("Rascal/Libraries/Prelude/List","3",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\";\", \<L\>) == \<H\>",false,true,[<"L",list(int(-20,20),0,5)>],[<"H","intercalate(\";\", \<L\>) ">],void(),"intercalate")),tvQuestion("Rascal/Libraries/Prelude/List","4",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),0,5)>],[<"H","index(\<L\>)">],void(),"index")),tvQuestion("Rascal/Libraries/Prelude/List","5",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,6)>],[<"H","head(\<L\>)">],void(),"head")),tvQuestion("Rascal/Libraries/Prelude/List","6",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,6)>],[<"H","last(\<L\>)">],void(),"last")),tvQuestion("Rascal/Libraries/Prelude/List","7",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>],[<"H","toSet(\<L\>)">],void(),"toSet")),tvQuestion("Rascal/Libraries/Prelude/List","8",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<N\>, \<L\>) == \<H\>",false,true,[<"L",list(arb(0,[bool(),int(-20,20),str()]),4,6)>,<"N",int(0,3)>],[<"H","take(\<N\>, \<L\>)">],void(),"take")),tvQuestion("Rascal/Libraries/Prelude/List","9",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>,\<N\>) == \<H\>",false,true,[<"L",list(arb(0,[bool(),int(-20,20),str()]),4,6)>,<"N",int(0,3)>],[<"H","tail(\<L\>,\<N\>)">],void(),"tail")),tvQuestion("Rascal/Libraries/Prelude/List","10",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>],[<"H","headTail(\<L\>)">],void(),"Use headTail.")),tvQuestion("Rascal/Libraries/Prelude/List","11",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L1\>) == \<H\>",false,true,[<"L",list(arb(0,[bool(),int(-20,20),str()]),4,6)>,<"I",int(0,3)>,<"J",int(0,3)>],[<"L1","[\<L\>[\<I\>], \<L\>[\<J\>], *\<L\>, \<L\>[\<J\>], \<L\>[\<I\>]]">,<"H","dup(\<L1\>)">],void(),"dup")),tvQuestion("Rascal/Libraries/Prelude/List","12",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[bool(),int(-20,20),str()]),2,5)>],[<"H","getOneFrom(\<L\>)">],void(),"getOneFrom")),tvQuestion("Rascal/Libraries/Prelude/List","13",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<N\>, \<L\>) == \<H\>",false,true,[<"L",list(arb(0,[bool(),int(-20,20),str()]),3,4)>,<"N",int(0,2)>],[<"H","drop(\<N\>, \<L\>)">],void(),"drop")),tvQuestion("Rascal/Libraries/Prelude/List","14",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),0,5)>],[<"H","reverse(\<L\>) ">],void(),"reverse")),tvQuestion("Rascal/Libraries/Prelude/List","15",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L1\>, \<E\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),3,4)>,<"I",int(0,2)>],[<"E","\<L\>[\<I\>]">,<"L1","reverse(\<L\>) + \<L\>">,<"H","lastIndexOf(\<L1\>, \<E\>)">],void(),"lastIndexOf")),tvQuestion("Rascal/Libraries/Prelude/List","16",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),0,5)>],[<"H","domain(\<L\>)">],void(),"domain")),tvQuestion("Rascal/Libraries/Prelude/List","17",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>],[<"H","pop(\<L\>)">],void(),"pop")),tvQuestion("Rascal/Libraries/Prelude/List","18",valueOfExpr(),details(" ",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,6)>],[<"H","max(\<L\>)">],void(),"max")),tvQuestion("Rascal/Libraries/Prelude/List","19",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>, bool(int x){ return x \> 0;}) == \<H\>",false,true,[<"L",list(int(-20,20),1,5)>],[<"H","takeWhile(\<L\>, bool(int x){ return x \> 0;})">],void(),"takeWhile")),tvQuestion("Rascal/Libraries/Prelude/List","20",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>, \<I\>) == \<C\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),3,4)>,<"I",int(0,2)>],[<"C","delete(\<L\>, \<I\>)">],void(),"delete")),tvQuestion("Rascal/Libraries/Prelude/List","21",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(int(-20,20),2,7)>],[<"H","sum(\<L\>)">],void(),"sum")),tvQuestion("Rascal/Libraries/Prelude/List","22",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>, \<M\>) == \<Z\>",false,true,[<"L",list(int(-20,20),4,4)>,<"M",list(int(-20,20),4,4)>],[<"Z","zip(\<L\>,\<M\>)">],void(),"zip")),tvQuestion("Rascal/Libraries/Prelude/List","23",valueOfExpr(),details(" Fill in the missing function name.\n",["import List;"],"","","","(\<L\>) == \<H\>",false,true,[<"L",list(arb(0,[int(-20,20),str()]),1,5)>],[<"H","sort(\<L\>)">],void(),"sort")),tvQuestion("Rascal/Libraries/Prelude/List","24",valueOfExpr(),details(" ",["import List;"],"int incr(int x) { return x + 1; }\n","","","(\<L\>, incr) == \<H\>",false,true,[<"L",list(int(-20,20),1,5)>],[<"H","mapper(\<L\>, int(int n){ return n + 1; })">],void(),"mapper")),tvQuestion("Rascal/Libraries/Prelude/List","25",valueOfExpr(),details(" Complete this function that tests that a list of words forms a palindrome. A palindrome is a word that is symmetrical \n",[],"import List;\npublic bool isPalindrome(list[str] words){\n  return words == ",";\n}\n","isPalindrome([\"a\", \"b\", \"b\", \"a\"]) == true;","",true,false,[],[],void(),""))]