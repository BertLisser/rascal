Name: List

Synopsis: Library functions for lists.

Description:

For operators on lists see [Values/List].

The following functions are available for lists:
<toc Rascal/Libraries/Prelude/List 1>

Questions:

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],4,6]
make: I = int[0,3]
expr: E = <L>[<I>]
expr: H = indexOf(<L>, <E>)
hint: indexOf
test: <?>(<L>, <E>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: E = arb[int,str]
make: L = list[same[E],4,6]
make: I = int[0,3]
expr: H = insertAt(<L>, <I>, <E>)
hint: insertAt
test: <?>(<L>, <I>, <E>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[int,0,5]
expr: H = intercalate(";", <L>) 
hint: intercalate
test: <?>(";", <L>) == <H>


QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],0,5]
expr: H = index(<L>)
hint: index
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],1,6]
expr: H = head(<L>)
hint: head
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str], 1, 6]
expr: H =  last(<L>)
hint: last
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str]]
expr: H = toSet(<L>)
hint: toSet
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[bool,int,str],4,6]
make: N = int[0,3]
expr: H = take(<N>, <L>)
hint: take
test: <?>(<N>, <L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[bool,int,str],4,6]
make: N = int[0,3]
expr: H = tail(<L>,<N>)
hint: tail
test: <?>(<L>,<N>) == <H>


QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],1,5]
expr: H = headTail(<L>)
hint: Use headTail.
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[bool,int,str],4,6]
make: I = int[0,3]
make: J = int[0,3]
expr: L1 = [<L>[<I>], <L>[<J>], *<L>, <L>[<J>], <L>[<I>]]
expr: H = dup(<L1>)
hint: dup
test: <?>(<L1>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[bool,int,str],2,5]
expr: H = getOneFrom(<L>)
hint: getOneFrom
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[bool,int,str],3,4]
make: N = int[0,2]
expr: H = drop(<N>, <L>)
hint: drop
test: <?>(<N>, <L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],0,5]
expr: H =  reverse(<L>) 
hint: reverse
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],3,4]
make: I = int[0,2]
expr: E = <L>[<I>]
expr: L1 = reverse(<L>) + <L>
expr: H = lastIndexOf(<L1>, <E>)
hint: lastIndexOf
test: <?>(<L1>, <E>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],0,5]
expr: H = domain(<L>)
hint: domain
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],1,5]
expr: H = pop(<L>)
hint: pop
test: <?>(<L>) == <H>


QValue:
prep: import List;
make: L = list[arb[int,str], 1, 6]
expr: H = max(<L>)
hint: max
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[int[-20,20]]
expr: H = takeWhile(<L>, bool(int x){ return x > 0;})
hint: takeWhile
test: <?>(<L>, bool(int x){ return x > 0;}) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],3,4]
make: I = int[0,2]
expr: C = delete(<L>, <I>)
hint: delete
test: <?>(<L>, <I>) == <C>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[int,2,7]
expr: H = sum(<L>)
hint: sum
test: <?>(<L>) == <H>

QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[int, 4, 4]
make: M = list[int, 4, 4]
expr: Z = zip(<L>,<M>)
hint: zip
test: <?>(<L>, <M>) == <Z>


QValue:
desc: Fill in the missing function name.
prep: import List;
make: L = list[arb[int,str],1,5]
expr: H = sort(<L>)
hint: sort
test: <?>(<L>) == <H>


QValue:
prep: import List;
make: L = list[int, 1,5]
expr: H = mapper(<L>, int(int n){ return n + 1; })
hint: mapper
list:
int incr(int x) { return x + 1; }
test: <?>(<L>, incr) == <H>

QValue:
desc: Complete this function that tests that a list of words forms a palindrome. A palindrome is a word that is symmetrical 
and can be read
from left to right and from right to left.
list:
import List;
public bool isPalindrome(list[str] words){
  return words == <?>;
}
test: isPalindrome(["a", "b", "b", "a"]) == true;

