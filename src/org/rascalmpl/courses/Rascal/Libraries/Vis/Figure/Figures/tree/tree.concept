Name: tree

Synopsis: Tree layout.

Syntax:

Types:

Function:
`Figure tree(Figure root, Figures children, FProperty props...)`

Details:

Description:
`tree` takes a list of nodes and a list of edges and draws a tree.

The [orientation] property can be used to set the drawing direction, [hgap] and [vgap] can be used to set the gaps.

Examples:
<figure t1.png>
t1 = tree(box(fillColor("green")),
          [ box(fillColor("red")),
     	    box(fillColor("blue"))
     	  ],
          std(size(50)), std(gap(20))
    	);
render(t1);
</figure>
![tree 1](t1.png)

The standard way of drawing trees is in _manhattan_-style: all connection between
tree nodes are horizontal or vertical. This style is controlled by the [manhattan] property:

<figure t2.png>
t2 = tree(box(fillColor("green")),
          [ box(fillColor("red")),
     	    box(fillColor("blue"))
     	  ],
          std(size(50)), std(gap(20)), manhattan(false)
    	);
render(t2);
</figure>
![tree 2](t2.png)

<figure t3.png>
t3 = tree(ellipse(size(30), fillColor("green")),
          [ tree(ellipse(size(45), fillColor("red")),
     	         [ ellipse(size(60), fillColor("blue")),
     	           ellipse(size(75), fillColor("purple"))
                 ]),
            tree(ellipse(size(90), fillColor("lightblue")),
                 [ box(size(30), fillColor("orange")),
     	           box(size(30), fillColor("brown")),
     	           box(size(30), fillColor("grey")),
     	           ellipse(size(30), fillColor("white"))
                 ]),
            box(size(30), fillColor("black"))
     	  ],
          std(gap(30)));
render(t3);
</figure>

![tree 3](t3.png)

Benefits:

Pitfalls:

Questions:

