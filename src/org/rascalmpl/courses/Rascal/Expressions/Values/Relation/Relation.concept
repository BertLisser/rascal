Name: Relation

Synopsis: Relation values.

Syntax:
`{ <$Exp_11$, $Exp_12$, ... > , <$Exp_21$, $Exp_22$, ... > , ... }`

Types:
| `$Exp_11$` |  `$Exp_12$` |  ...  | `{ <$Exp_11$, $Exp_12$, ... > , ... }`  |
|:-----------|:------------|:------|:----------------------------------------|
| `$T_1$`    |    `$T_2$`  |  ...  |  `rel[$T_1$, $T_2$, ... ]`              |

Usage: `import Relation;` (included in [Prelude])

Function:

Details:

Description:
A relation is a set of elements with the following property:

* All elements have the same static tuple type.


Relations are thus nothing more than sets of tuples, but since they are used so often we provide a shorthand notation for them.
Relations are represented by the type `rel[$T_1$ $L_1$, $T_2$ $L_2$, ... ]`, where $T_1$, $T_2$, ... are arbitrary types and
$L_1$, $L_2$, ... are optional labels. It is a shorthand for `set[tuple[$T_1$ $L_1$, $T_2$ $L_2$, ... ]]`.

An n-ary relations with m tuples is denoted by
 `{<$E_11$, $E_12$, ..., $E_1n$>,<$E_21$, $E_22$, ..., $E_2n$>, ..., <$E_m1$, $E_m2$, ..., $E_mn$>}`, 
where the $E_ij$ are expressions that yield the desired element type $T_i$.

Since relations are a form of set all operations (see [$Values/Set]) and functions
(see [Prelude/Set]) are also applicable to relations.

The following additional operators are provided for relations:
<toc Rascal/Expressions/Values/Relation 1>

The following additional functions are provided on relations:
<toc Rascal/Libraries/Prelude/Relation 1>


Examples:
<screen>
{<1,10>, <2,20>, <3,30>}
// instead of rel[int,int] we can also give `set[tuple[int,int]]` as type of the above expression
// remember that these types are interchangeable.
{<"a",10>, <"b",20>, <"c",30>}
{<"a", 1, "b">, <"c", 2, "d">}
</screen>

Benefits:

Pitfalls:

Questions:

QChoice: A relation:
g: Is a set of tuples.
b: Is a list of tuples.
b: Is a tuple of tuples.
b: Has ordered elements.
b: Can contain duplicates.
b: Has a fixed length.

