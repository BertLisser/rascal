Name: TransitiveClosure

Synopsis: Transitive closure on binary relation values.

Syntax:
`$Exp$ +`

Types:
|`$Exp$`              | `$Exp$ +`           |
|:--------------------|:--------------------|
| `rel[$T_1$, $T_2$]` | `rel[$T_1$, $T_2$]` |

Function:

Details:

Description:
Returns the transitive closure of a binary relation.
Transitive closure is defined by repeated composition of a relation.
If we define for a given relation R:
* R$^1$ = R
* R$^2$ = R o R
* R$^3$ = R o R$^2$
* ...


then the transitive closure R+ can be defined as
* R+ = R$^1$ + R$^2$ + R$^3$ + ...


Examples:
<screen>
{<1,2>, <2,3>, <3,4>}+;
// We can also simply (but not necessarily efficiently) define transitive closure ourselves:
rel[int,int] tclosure(rel[int,int] R) {
   tc = R;
   while(true){
      tc1 = tc;
      tc += tc o R;
      if(tc1 == tc)
         return tc;
   }
}
tclosure({<1,2>, <2,3>, <3,4>});
</screen>

Benefits:

Pitfalls:

Questions:

QType:
prep: S = {<1,2>, <2,3>};
make: A = set[tuple[int[0,5],int[0,5]],1,2]
expr: B = <A> + S
test: <B>+

QValue:
prep: S = {<1,2>, <2,3>, <3,4>};
make: A = set[tuple[int[0,5],int[0,5]],1,2]
expr: B = <A> + S
expr: H =  <B>+
hint: <H>
test: <B>+

