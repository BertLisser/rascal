Name: Comprehension

Synopsis: A map comprehension generates a map value.

Syntax:
`( $Exp_1$ : $Exp_2$ | $Gen_1$, $Gen_2$, ... )`

Types:
| `$Exp_1$` | `$Exp_2$` | `( $Exp_1$ : $Exp_2$ | $Gen_1$, $Gen_2$, ... )` |
|:----------|:----------|:-------------------------------------------------|
| `$T_1$`   | `$T_2$`   | `map[$T_1$, $T_2$]`                              |

Function:

Details:

Description:
A map comprehension consists of a number of two contributing expressions $Exp_1$ (for key values), 
and $Exp_2$ (the values associated with those key values) and a number of
generators $Gen_1$, $Gen_2$, $Gen_3$, ... that are evaluated as described in [Expressions/Comprehensions].

Examples:
<screen>
// Introduce a map of `fruits`:
fruits = ("pear" : 1, "apple" : 3, "banana" : 0, "berry" : 25, "orange": 35);
import String;
// Use a map comprehension to filter fruits with a name of at most 5 characters:
(fruit : fruits[fruit] | fruit <- fruits, size(fruit) <= 5);
// Use a map comprehension to filter fruits with an associated value larger than 10:
(fruit : fruits[fruit] | fruit <- fruits, fruits[fruit] > 10);

Benefits:

Pitfalls:

Questions:

