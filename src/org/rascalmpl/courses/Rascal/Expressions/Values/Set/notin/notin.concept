Name: notin

Synopsis: Negated membership test on set values.

Syntax:
`$Exp_1$ notin $Exp_2$`

Types:
| `$Exp_1$`           |  `$Exp_2$`    | `$Exp_1$ notin $Exp_2$` |
|:--------------------|:--------------|:------------------------|
| `$T_1$`  <: `$T_2$` |  `set[$T_2$]` | `bool`                  |

Function:

Details:

Description:
Yields `true` if the value of $Exp_1$ does not occur as element in the value of $Exp_2$ and `false` otherwise. The type of $Exp_1$ should be compatible with the element type of $Exp_2$.

Examples:
<screen>
4 notin {1, 2, 3};
4 notin {1, 2, 3, 4};
</screen>

Benefits:

Pitfalls:

Questions:

QType: <A:arb[int,str,bool]> notin <B:set[same[A]]>


QValue:
make: ELM = int[0,100]
make: A = set[same[ELM]]
expr: A1 = {<ELM>, *<A>}
expr: C =  <ELM> notin <A1>
hint: <C>
test: <ELM> notin <A1> == <?>

QValue:
make: ELM = int[0,10]
make: A = set[same[ELM]]
expr: C =  <ELM> notin <A>
hint: <C>
test: <ELM> notin <A> == <?>
