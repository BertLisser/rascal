Name: Comprehension

Synopsis: A list comprehension generates a list value.

Syntax:
`[ $Exp_1$, $Exp_2$, ... | $Gen_1$, $Gen_2$, ... ]`

Types:
| `$Exp_1$` | `$Exp_2$` | ... | `[ $Exp_1$, $Exp_2$, ... | $Gen_1$, $Gen_2$, ... ]` |
|:----------|:----------|:----|:----------------------------------------------------|
| `$T_1$`   | `$T_2$`   | ... | `list[ lub( $T_1$, $T_2$, ... ) ]`                  |

Function:

Details:

Description:
A list comprehension consists of a number of contributing expressions $Exp_1$, $Exp_2$, ... and a number of
generators $Gen_1$, $Gen_2$, $Gen_3$, ... that are evaluated as described in [Expressions/Comprehensions].

Examples:
Computing a list of squares of the numbers from 0 to 10 that are divisible by 3:
<screen>
[n * n | int n <- [0 .. 10], n % 3 == 0];
</screen>
But we can also include the relevant `n` in the resulting list:
<screen>
[n, n * n | int n <- [0 .. 10], n % 3 == 0];
</screen>

Benefits:

Pitfalls:

Questions:

QValue:
desc: Return the strings that contain a given substring.
list:
text = ["An", "honest", "man", "is", "always", "a", "child"]; 
public list[str] find(list[str] text, str contains) = [ s | s <- text, <?> ];
test: find(text, "n") == ["An", "honest", "man"];