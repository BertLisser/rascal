Name: Concatenation

Synopsis: Concatenate two lists.

Syntax:
`$Exp_1$ + $Exp_2$`

Types:
| `$Exp_1$`     |  `$Exp_2$`     | `$Exp_1$ + $Exp_2$`      |
|:--------------|:---------------|:-------------------------|
| `list[$T_1$]` |  `list[$T_2$]` | `list[lub($T_1$,$T_2$)]` |


Function:

Details:

Description:

The `+` operator concatenates the elements of the two lists in order of appearance. 

Note that the same operator is overloaded for [List/Insert] and [List/Append].

Examples:

<screen>
[1, 2, 3] + [4, 5, 6];
[] + [1]
[1] + []
[1] + [2] + [3]
</screen>

And overloaded usage for insert and append looks like:
<screen>
1 + []
[] + 1
</screen>

Benefits:

Pitfalls:

Questions:

QChoice: When you compute the concatenation of two lists, the number of elements in the result is always:
b: Greater than the sum of the number of elements in both lists.
g: Greater than or equal to the sum of the number of elements in both lists.
b: Smaller than the sum of the number of elements in both lists.
g: Equal to the sum of the number of elements in both lists.

QType: <A:list[arb[int,str]]> + <B:same[A]>

QValue: <A:list[arb[int,str]]> + <B:same[A]>

QValue:
make: A = list[arb[int,str]]
make: B = same[A]
expr: C = <A> + <B>
hint: <B>
test: <A> + <?> == <C>

