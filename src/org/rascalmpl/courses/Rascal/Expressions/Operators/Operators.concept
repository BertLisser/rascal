Name: Operators

Synopsis: The Rascal operators.

Syntax:

Types:

Function:

Details:

Description:
An _operator expression_ consists of an operator and one or more operands. The evaluation order of the operands depends on the operator. 
The operator is applied to the operands and the resulting value (or values in some cases) is the result of the operator expression. 

All operators are summarized in the following table. They are listed from highest precedence
 to lowest precedence. In other words, operators listed earlier in the table bind stronger.
<table width="100%">
<caption>__Rascal Operators (from highest to lowest precedence)__</caption>
<col align=left width="30%">
<col align=left width="30%">
<col align=left width="40%">
<tr><th align="left">Operator</th>	               <th align="left">See</th>	         <th align="left">Short Description</th></tr>
<tr><td>`$Exp$ . $Name$`</td>	                   <td>[Location/FieldSelection],
                                                       [DateTime/FieldSelection],
                                                       [Tuple/FieldSelection],
                                                       [Relation/FieldSelection]</td>    <td>Select named field from structured value</td></tr>
<tr><td>`$Exp_1$ [ $Name$ = $Exp_2$ ]`</td>        <td>[FieldAssignment]</td>            <td>Change value of named field of structured value</tr>
<tr><td>`$Exp$ < $field_1$, ... >`</td>            <td>[FieldProjection]</td>            <td>Select fields from relation or structured value</td></tr>
<tr><td>`$Exp$ is $Name$` </td> <td>[ParseTree], [ConcreteSyntax], [AlgebraicDataType]</td><td> Returns true if and only if the constructor name of the value produced by $Exp$ is equal to $Name</td></tr>
<tr><td>`$Exp$ has $Name$` </td> <td>[ParseTree], [ConcreteSyntax], [AlgebraicDataType]</td><td> Returns true if and only if the constructor (node or parse tree) of the value produced by $Exp$ has any field labeled $Name</td></tr>
<tr><td>`$Exp_1$ [ $Exp_2$ , $Exp_3$, .... ]`</td> <td>[List/Subscription],
                                                       [Map/Subscription], 
                                                       [Tuple/Subscription],
                                                       [Relation/Subscription]</td>      <td>Retrieve values for given index/key from list, map, tuple or relation.</td></tr>
<tr><td> `$Exp$?`</td>                             <td>[Boolean/IsDefined]</td>          <td>Test whether an expression has a defined value</td></tr>
<tr><td> `!$Exp$`</td>                             <td>[Boolean/Negation]</td>           <td>Negate a Boolean value</td></tr>
<tr><td>`- $Exp$`</td>                             <td> [Number/Negation]</td>	         <td>Negation of numbers</td></tr>
<tr><td>`$Exp$ +`</td>	                           <td>[TransitiveClosure]</td>	         <td>Transitive closure on relation</td></tr>
<tr><td>`$Exp$ *`</td>                             <td>[ReflexiveTransitiveClosure]</td>                                                                                                                                         <td>Reflexive transitive closure on relation</td></tr>
<tr><td>`$Exp$ @ $Name$`</td>	                   <td>[Expressions/Selection]</td>	     <td>Value of annotation $Name$ of $Exp$'s value</td></tr>
<tr><td>`$Exp_1$ [@ $Name$ = $Exp_2$]`</td>	       <td>[Expressions/Replacement]</td>     <td>Assign value of $Exp_2$ to annotation $Name$ of $Exp_1$'s value</td></tr>
<tr><td>`$Exp_1$ o $Exp_2$`</td>	               <td>[Composition]</td>	             <td>$Exp_1$ and $Exp_2$ should evaluate to a relation; return their composition. Note: the letter "o" is thus a keyword!</td></tr>
<tr><td>`$Exp_1$ / $Exp_2$`</td>	               <td>[Number/Division]</td>	         <td>Divide two numbers</td></tr>
<tr><td>`$Exp_1$ % $Exp_2$`</td>	               <td>[Number/Remainder]</td>	         <td>Remainder on numbers</td></tr>
<tr><td>`$Exp_1$ * $Exp_2$`</td>	               <td>[Number/Multiplication],
                                                       [List/Product],
                                                       [Set/Product],
                                                       [Relation/CartesianProduct]</td> <td>Multiply numbers; product of list, set, or relation</td></tr>
<tr><td>`$Exp_1$ & $Exp_2$`</td>                   <td>[List/Intersection],
                                                       [Set/Intersection],
                                                       [Map/Intersection]</td>           <td>Intersection of list, set (including relation), or map</td></tr>

<tr><td>`$Exp_1$ + $Exp_2$`</td>	               <td>[Number/Addition],
                                                       [String/Concatenation],
                                                       [List/Concatenation],
                                                       [List/Insert],[List/Append],
                                                       [Tuple/Concatenation],
                                                       [Set/Union],
                                                       [Map/Union],
                                                       [Location/AddSegment] </td>                 <td>Add numbers; concatenate string, list or tuple; 
                                                                                             union on set (including relation), or map;
concatenate location and string</td></tr>

<tr><td>`$Exp_1$ - $Exp_2$`</td>                   <td>[Number/Subtraction],
                                                       [List/Difference],
                                                       [Set/Difference],
                                                       [Map/Difference] </td>	         <td>Subtract numbers; difference of list, set (including relation), or map</td></tr>
<tr><td>`$Exp_1$ join $Exp_2$`</td>	               <td>[Relation/Join]</td>              <td>Join on relation</td></tr>

<tr><td>`$Exp_1$ in $Exp_2$`</td>	               <td>[List/in], [Set/in], 
                                                       [Map/in] </td>                    <td>Membership test for element in list, map, set (including relation)</td></tr>

<tr><td>`$Exp_1$ notin $Exp_2$`</td>	           <td>[List/notin], [Set/notin], 
                                                       [Map/notin] </td>                 <td>Negated membership test for element in  list, map, set (including relation)</td></tr>

<tr><td>`$Exp_1$ <= $Exp_2$`</td>	               <td>[Number/LessThanOrEqual],
                                                       [String/LessThanOrEqual], 
                                                       [Location/LessThanOrEqual], 
                                                       [DateTime/LessThanOrEqual],
                                                       [List/SubList], 
                                                       [Set/SubSet], 
                                                       [Map/SubMap]</td>                 <td>Less than or equal on all values</td></tr>
<tr><td>`$Exp_1$ < $Exp_2$`</td>	               <td>[Number/LessThan],
                                                       [String/LessThan], 
                                                       [Location/LessThan], 
                                                       [DateTime/LessThan],
                                                       [List/StrictSubList],
                                                       [Set/StrictSubSet],
                                                       [Map/StrictSubMap]</td>           <td>Less than on all values</td></tr>
<tr><td>`$Exp_1$ >= $Exp_2$`</td>	               <td>[Number/GreaterThanOrEqual],
                                                       [String/GreaterThanOrEqual],
                                                       [Location/GreaterThanOrEqual], 
                                                       [DateTime/GreaterThanOrEqual],
                                                       [List/SuperList],
                                                       [Set/SuperSet],
                                                       [Map/SuperMap]</td>               <td>Greater than or equal on all values</td></tr>
<tr><td>`$Exp_1$ > $Exp_2$`</td>	               <td>[Number/GreaterThan],
                                                       [String/GreaterThan], 
                                                       [Location/GreaterThan], 
                                                       [DateTime/GreaterThan],
                                                       [List/StrictSuperList], 
                                                       [Set/StrictSuperSet], 
                                                       [Map/StrictSuperMap] </td>        <td>Greater than on all values.</td></tr>
<tr><td> `$Pat$ := $Exp$`</td>                     <td>[Boolean/Match]</td>              <td>Pattern matches value of expression</td></tr>
<tr><td> `$Pat$ !:= $Exp$`</td>                    <td>[Boolean/NoMatch]</td>            <td>Pattern does not match value of expression</td></tr>
<tr><td>`$Exp_1$ == $Exp_2$`</td>	               <td>[Number/Equal],
                                                       [String/Equal], 
                                                       [Location/Equal], 
                                                       [DateTime/Equal],
                                                       [List/Equal], 
                                                       [Set/Equal], 
                                                       [Map/Equal]</td>                  <td>Equality on all values</td></tr>
<tr><td>`$Exp_1$ != $Exp_2$`</td>	               <td>[Number/NotEqual],
                                                       [String/NotEqual], 
                                                       [Location/NotEqual], 
                                                       [DateTime/NotEqual],
                                                       [List/NotEqual], 
                                                       [Set/NotEqual], 
                                                       [Map/NotEqual]</td>               <td>Inequality on all values</td></tr>
<tr><td>`$Exp_1$ ? $Exp_2$`</td>                   <td>[Boolean/IfDefinedElse]</td>      <td>Value of expression when it is defined, 
                                                                                             otherwise alternative value</td></tr>
<tr><td>`$Exp_1$ ? $Exp_2$ : $Exp_3$`</td>         <td>[Value/Conditional]</td>          <td>Conditional expression for all types</td></tr>
<tr><td> `$Exp_1$ ==> $Exp_2$`</td>                <td>[Boolean/Implication]</td>        <td>Implication on Boolean values</td></tr>
<tr><td> `$Exp_1$ <==> $Exp_2$`</td>               <td>[Boolean/Equivalence]</td>        <td>Equivalence on Boolean values</td></tr>
<tr><td> `$Exp_1$ && $Exp_2$`</td>                 <td>[Boolean/And]</td>                <td>And on Boolean values</td></tr>
<tr><td> `$Exp_1$ || $Exp_2$`</td>                 <td>[Boolean/Or]</td>                 <td>Or on Boolean values</td></tr>
</table>

Examples:

Benefits:

Pitfalls:

Questions:

