Name: Reducer

Synopsis: Reduce generated values to a single value.

Syntax:
`( $Exp$ | $RedExp$ | $Gen_1$, $Gen_1$, ... )`

Types:

Function:

Details:

Description:
A reducer resembles the [fold](http://en.wikipedia.org/wiki/Fold_(higher-order_function)) function
found in most functional languages.

A reducer is equivalent to the following code:
<listing>
it = $Exp$; /*1*/
for($Gen_1$, $Gen_1$, ... ) /*2*/
    it = $RedExp$; /*3*/
it; /*4*/
</listing>
and is executed as follows:
* A fresh variable `it` is initialized with $Exp$ (/*1*/). 
  We call the variable `it` since we use `it` to initialize the reducer, to make changes to `i`t, and to return `it` as result.
* A for loop iterates over all values produced by the generators `$Gen_1$`, `$Gen_1$`, ... (/*2*/).
* In the body of the loop, variable `it` is updated to reflect a new reduced value (/*3*/).
  Note that `it` itself and variables introduced in $Gen_1$, $Gen_1$, ... may occur in $RedExp$.
* The value of `it` is the result of the reducer.

Examples:
<screen>
L = [1, 3, 5, 7];
(0 | it + e | int e <- L);
(1 | it * e | int e <- L);
</screen>

Benefits:

Pitfalls:

Questions:

QValue:
desc: Return the set of largest words.
list:
import Number;
import String;
text = ["Quote", "from", "Steve", "Jobs", ":", "And", "one", "more", "thing"];
public list[str] largest(list[str] text){
  mx = ( 0 | max(it, size(s)) | s <- text );
  return
    for(s <- text)
        if(<?>)
           append s;
}
test: largest(text) == ["Quote", "Steve", "thing"];
       
