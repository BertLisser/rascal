Name: ADT

Synopsis: Visualize an Algebraic Datatype as a tree.

Syntax:

Types:

Function:

Details:

Description:
In [ColoredTrees] we have discussed the Algebraic Data Type `ColoredTree`.
Here we show how to create a visualization for them. The global approach is:
* Define a function `visColoredTree` that has a ColoredTree as argument and 
  creates a `Figure` for it.
* Display the resulting figure using [$Rascal:Render/render].

Examples:
Here is our solution:
<listing demo/vis/VisADT.rsc>
* A `leaf` is represented as its number converted to text, surrounded by a lightyellow box (/*1*/).
* The figure for non-leaf nodes of a ColoredTree is generated by the auxiliary function `visNode` (/*2*/).
* `visNode` represents the node itself as a [$Rascal:Figures/tree] that has a colored ellipse as root and the visualization of
  two ColoredTrees as children (/*3*/).


For the example `ColoredTree` `rb` we can set a standard (see [Rascal:std]) [$Rascal:Properties/size] and standard [$Rascal:Properties/gap]:
<figure a1.png>
import demo::vis::VisADT;
render(space(visColoredTree(rb), std(size(30)), std(gap(30))));
</figure>
and the result is:

![a1](a1.png)

Note that:
* We place the Figure that is produced by `viscoloredTree` in a `space` for the sole purpose that add extra proerties to it.
* We use `std(size(30))` and ` std(gap(30))` to achieve that these properties are set for all subfigures.


Some further custumizations are possible. By default, the tree visualization uses [Rascal:manhattan] style. If we turn it off
<figure a2.png>
import demo::vis::VisADT;
render(space(visColoredTree(rb), std(size(30)), std(gap(30)), std(manhattan(false))));
</figure>
the result is:

![a2](a2.png)

It is also possible to change the [Rascal:orientation] of the tree and draw it, for example, from left to right:
<figure a3.png>
import demo::vis::VisADT;
render(space(visColoredTree(rb), std(size(30)), std(gap(30)), std(orientation(leftRight()))));
</figure>
the result is:

![a3](a3.png)

Benefits:

Pitfalls:

Questions:

       
