Name: Runtime

Synopsis: The runtime representation of Lisp programs and data.

Syntax:

Types:

Function:
       
Usage:

Details:

Description:
There are several aspects of the runtime representation of Lisp programs and Lisp data
that have to be described:
* The representation of values (see `Lval` below).
* The handling of the _scope_ of variables (see `Scope`, `Env`, `makeEnv` and `find` below).
* The way the interpreter returns its results (see `Result` below).


<listing demo/lang/Lisra/Runtime.rsc>

The data type `Lval` (/*1*/) takes care of the representation of Lisp values.
It covers integers, atoms, lists and closures (the representation of a functions and
the context in which it will be executed).

A `Scope` (/*2*/) describes the binding of several related variables to their value.
Since scopes may be nested, an environment (`Env`) consisted of a list of scope.
The most inner scope is at the start of the list and the most global one at the end.

Creating a new scope is done by `makeEnv` (/*3*/) which takes a list of variables
(represented by `Lval`s, in most cases this will be an atom like `Atom("X")`),
a list of values and creates a new scope in front of the current environment.

The function `find` (/*4*/) tries to locate the scope in which a name was previously defined.
It searches the nested scopes inside-out and returns the _index_ in the given environment
of the scope in which the name is defined, or `-1` if it is not found.

We define (/*5*/) useful constants for true and false (the atoms `#t` and `#f`, respectively).

Finally, we define `Result` (/*6*/) as a tuple of an `Lval` and an `Env`.
Each step during interpretation will thus return the value it computed and
a possibly modified environment.

Examples:

Benefits:

Pitfalls:

Questions:

       
