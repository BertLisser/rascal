Name: Lisra

Synopsis: A lisp interpreter in Rascal.

Syntax:

Types:

Function:
       
Usage:

Details: Runtime Eval Syntax Parse Pretty Console

Description:

Writing a Lisp interpreter is a classical challenge. 
Popular word has that all large applications evolve until they include a Lisp interpreter.
(A variant says the same about including an email client in every large application).

We will closely follow and __reuse parts of__ Peter Norvig's excellent page
on [Lispy](http://norvig.com/lispy.html), a Lisp interpreter written in Python.
The Lisp variant to be implemented is the following subset of the [Scheme](http://en.wikipedia.org/wiki/Scheme_(programming_language))
 language:
<table border=1 cellspacing=0 cellpadding=3>
<tr style="background-color:#EEEEEE"><th>Form</th><th width="23%">Syntax</th><th>Semantics and Example</th></tr>
  <tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.1">variable reference</a></td>
  <td><i>var</i><td>A symbol is interpreted as a variable name;
  its value is the variable's
  value. <br>Example: <tt>x</tt></td>
</tr>
<tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.2">constant literal</a></td>
  <td><i>number</i></td><td>A number 
  evaluates to itself. <br>Example: <tt>12</tt></td>
</tr>
          
<tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.2">quotation</a></td>
  <td><tt>(quote </tt><i>exp</i><tt>)</td>
  <td>Return the <i>exp</i> literally; do not evaluate it. Example:
	<tt>(quote (a b c)) &rArr; (a b c)</tt> </td>
</tr>
<tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.5">conditional</a></td>
  <td><tt>(if</tt> <i>test conseq alt</i><tt>) </tt></td>
  <td>Evaluate <i>test</i>; if true,
  evaluate and return <i>conseq</i>; otherwise evaluate and return 
  <i>alt</i>. <br>Example: <tt>(if (&lt; 10 20) (+ 1 1) (+ 3 3)) &rArr; 2</tt></td>
</tr>
<tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.6">assignment</a></td>
  <td><tt>(set!</tt> <i>var exp</i><tt>)</tt></td>
  <td>Evaluate <i>exp</i> and assign that value to
  <i>var</i>, which must have been previously defined (with a
  <tt>define</tt> or as a parameter to an enclosing procedure).
    <br>Example: <tt>(set! x2 (* x x))</tt></td>
</tr>
<tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-8.html#%_sec_5.2">definition</a></td>
  <td><tt>(define</tt> <i>var</i> <i>exp</i><tt>)</tt></td>
  <td>Define a new variable in the innermost environment and give it
  the value of evaluating the expression <i>exp</i>. 
      <br>Examples: <tt>(define r 3)</tt> <i>or</i> <tt>(define square (lambda (x) (* x x)))</tt>.</td>
</tr>
<tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.4">procedure</a></td>
  <td><tt>(lambda (</tt><i>var...</i><tt>)</tt>
  <i>exp</i><tt>)</tt><td>Create a procedure
  with parameter(s) named <i>var...</i> and the expression as the body. <br>Example: <tt>(lambda (r)
   (* r r))</tt></td>
</tr>
<tr><td align=center><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.2.3">sequencing</a></td>
  <td><tt>(begin </tt><i>exp...</i><tt>)</tt></td>
  <td>
      Evaluate each of the expressions in left-to-right order, and
      return the final value.
      <br>Example: <tt>(begin (set! x 1) (set! x (+ x 1)) (* x 2))
      &rArr; 4</tt></td>
</tr>
<tr><td align=center>
   <a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.3">procedure call</a></td>
  <td><tt>(</tt><i>proc exp...</i><tt>)</tt></td>
  <td>If <i>proc</i> is
   anything other than one of the symbols <tt>if, set!, define,
   lambda, begin,</tt> or <tt>quote</tt> then it is treated as a procedure.  It is
   evaluated using the same rules defined here. All the expressions
   are evaluated as well, and then the procedure is called with the list
   of expressions as arguments. Example: <tt>(square 12) &rArr; 144</tt></td>
</tr>
</table>

In this table, _var_ must be a symbol--an identifier such as x or square--and number must be an integer number, 
while the other italicized words can be any expression. The notation _exp_... means zero or more repetitions of _exp_.

A Lisp interpreter consists of the following parts:
* A _parser_ that reads a Lisp program in text form and converts it to a runtime representation that is suitable for the interpreter.
* The _interpreter_ itself that executes the program in runtime representation and computes its outcome.
* A _pretty printer_ that converts the outcome in internal representation back to text.
* Finally, an interactive  _console_ is needed that interact with the user.


We discuss all these aspects:

<toc Recipes/Languages/Lisra 1>

Examples:

Benefits:

Pitfalls:

Questions: