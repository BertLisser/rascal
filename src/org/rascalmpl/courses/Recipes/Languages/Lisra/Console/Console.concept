Name: Console

Synopsis: An interactive Lisp console.

Syntax:

Types:

Function:
       
Usage:

Details:

Description:
The final step is to tie everything together and to create an interactive Lisp console.

<listing demo/lang/Lisra/Console.rsc>

At /*1*/ we define an `eval` function connects parsing and evaluation:
* First the input text is parsed (see [$Lisra/Parse]) result is an `Lval`.
* Next, this `Lval` is evaluated by the `eval` function defined in [$Lisra/Eval].

At /*2*/ the actual `console` function is defined. It contains the following elements:
* A local variable `env` is initialized with the empty environment (see [Runtime]). It is
  used to save the changed environment between the execution of two expressions entered
  interactively.
* `createConsole` (/*3*/) does as it says: it creates an actual console. It has three arguments:
  ** A console name (`"Lisra Console"`).
  ** A welcome message (`"Welcome to the Awesome Lisra Interpreter\nLisra\> "`).
  ** A call back functions that is called each time the user enters a line of text. That text is passed
     as argument (`inp`) to the call back. Inside the call back the entered text is evaluated and
     the pretty printed value and a prompt are returned.

Examples:

Typing `console()` in a Rascal shell window, will create a dedicated Lisra console, that may look as follows
after some expressions have been entered:

![Lisra Console](LisraConsole.png)

Benefits:

Pitfalls:

Questions:

       
