Name: Func

Synopsis: Func is a tiny functional language; we present several interpreters for it.

Syntax:

Types:

Function:

Details: ConcreteSyntax Parse AbstractSyntax LoadAST Eval0 Eval1 Eval2 Eval3

Description:
Func is a functional language with the following features:
* A program consists of a number of function declarations.
* A function declaration consists of a name, zero or more formal parameter names and an expression.
* An expression can be one of:
  ** an integer constant.
  ** a variable.
  ** arithmetic operators `+`, `-`, `*` and `/`.
  ** comparison operators `<`, `<=`, `>` and `>=`.
  ** a call of a function.
  ** an `if` expression.
  ** a sequence of expressions (`;`).
  ** an assignment (`:=`).
  ** a `let` expression to introduce new bindings for local variables.
  ** an address of a variables (denoted by `&`).
  ** derefence of a variable (denoted by `*`).


Some features add more complexity to an interpreter, therefore
we present four interpreters [Eval0], [Eval1], [Eval2] and [Eval2]
that implement increasingly complex features:


| Feature              | Eval0 | Eval1 | Eval2 | Eval3 |
|:---------------------|-------|-------|-------|-------|
| function declaration | y     | y     | y     | y     |
| integer constant     | y     | y     | y     | y     |
| variable             | y     | y     | y     | y     |
| arithmetic operators | y     | y     | y     | y     |
| comparison operators | y     | y     | y     | y     |
| call                 | y     | y     | y     | y     |
| if                   | y     | y     | y     | y     |
| let                  |       | y     | y     | y     |
| sequence             |       |       | y     | y     |
| assignment           |       |       | y     | y     |
| address operator     |       |       |       | y     |
| dereference operator |       |       |       | y     |

Examples:
Here are several versions of the factorial function
that use more and more features of the Func language:
`F0.func`:
<listing demo/lang/Func/programs/F0.func>
`F1.func`:
<listing demo/lang/Func/programs/F1.func>
`F2.func`:
<listing demo/lang/Func/programs/F2.func>
`F3.func`:
<listing demo/lang/Func/programs/F3.func>

For convenience, we use two versions of these examples for each $F_i$:
* A file $F_i$`.func` that contains the code as shown above.
* A file $F_i$`.rsc` a Rascal file that declares a string variable $F_i$ with the same content.


For instance, `F0.rsc` looks like this (note the escaped `<` character).
<listing  demo/lang/Func/programs/F0.rsc>

Benefits:

Pitfalls:

Questions:

       
