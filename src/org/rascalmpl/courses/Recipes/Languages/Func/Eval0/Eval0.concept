Name: Eval0

Synopsis: A Func interpreter that does not support let-expressions and pointers.

Syntax:

Types:

Function:

Details:

Description:

Interpreter Eval0 supports the following features of Func:


| Feature              | Eval0 |
|:---------------------|-------|
| function declaration | y     |
| integer constant     | y     |
| variable             | y     |
| arithmetic operators | y     |
| comparison operators | y     |
| call                 | y     |
| if                   | y     |
| let                  |       |
| sequence             |       |
| assignment           |       |
| address operator     |       |
| dereference operator |       |

Examples:

Here is the code for Eval0:
<listing demo/lang/Func/Eval0.rsc>
Some points to note:
* `PEnv` is used as an alias for a map from names to functions (/*1*/). Such maps are used to represent the function definitions in the program.
* The top level interpreter is `eval0` defined at /*2*/. It takes the name of the main function, a list of actual parameters, and the complete Func program. Binding of variables is done by substitution.
* The substitution function is defined at /*3*/. It takes an expression, a list of variables, and a list of integer values to be substituted for them. Note how a [Rascal:Visit] is used to find all the variables in the expression and to replace them.
* Starting at /*4*/ the versions of `eval0` for each implemented construct. They all have a `PEnv` argument that is needed
  to resolve calls.
* At /*5*/ the if expression is defined: the then-branch is taken when the test evaluates to a non-zero integer.
* Finally, at /*6*/ the call expression is interpreted. It contains the following steps:
  ** The actual parameters are evaluated.
  ** A substitution is made in the body of the called function, replacing formal parameters by actual values.
  ** The result of this substitution is evaluated.


Let's try this on example `F0`:
<listing demo/lang/Func/programs/F0.func>

<screen>
import demo::lang::Func::Load;
import demo::lang::Func::Eval0;
import demo::lang::Func::programs::F0;
eval0("fact", [10], load(F0));
</screen>

Benefits:

Pitfalls:

Questions:

       
