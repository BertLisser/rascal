Name: Compile

Synopsis: Compile a Pico program to assembly language.

Syntax:

Types:

Function:
       
Usage:

Details:

Description:

Examples:

The Pico compiler translates Pico programs to [Pico/Assembly] language programs.

<listing demo/lang/Pico/Compile.rsc>

Notes:

* We introduce `Instrs` as an alias for a list of assembly language instructions (/*1*/).
* The compiler consists of the functions `compileExp`, `compileStat`, `compileStats`, `compileDecls` and `compileProgram`.
  They all have a program fragment as argument and return the corresponding list of instructions.
* When compiling expressions (/*3*/), note how _list splicing_ (see [Rascal:Values/List]) is used to insert the instructions that are generated for the operands of an operator into the list of instructions for the whole expression.
* In order to conveniently write code generators for statements, we introduce a unique label generator (/*4*/). The global variable `nLabel` contains
the index of the last generated label and `nextLabel` uses this to generate a new, unique label.
* Consider code generation for an if-the-else statement (/*5*/):
  ** Two fresh labels mark the start of the code for the else part (`elseLab`) and the end of the whole statement (`endLab`).
  ** The code that is generated consists of the following:
     *** Code for the test.
     *** A gofalse to the code for the else-part.
     *** Code for the then-part and a jump to the end of the statement.
     *** Code for the else-part that starts with the label `elsePart`.
     *** The label `endLab` that marks the end of the code for the if-then-else statement.
* Compiling a list of statements (/*6*/) conveniently uses a list comprehension and list splicing.

* Compiling declarations (/*7*/) allocates memory locations of the appropriate type for each declared variable.

* `compileProgram` compiles a gives Pico program to assembly language.


Here is an example:
<screen>
import demo::lang::Pico::Compile;
compileProgram("begin declare x : natural; x := 47 end");
// Here is the compilation of the factorial program:
compileProgram("begin declare input : natural,  
               '              output : natural,           
               '             repnr : natural,
               '              rep : natural;
               '      input := 14;
               '      output := 1;
               '      while input - 1 do        
               '          rep := output;
               '          repnr := input;
               '          while repnr - 1 do
               '             output := output + rep;
               '             repnr := repnr - 1
               '          od;
               '          input := input - 1
               '      od
               'end");
</screen>

Benefits:

Pitfalls:

Questions:

       
