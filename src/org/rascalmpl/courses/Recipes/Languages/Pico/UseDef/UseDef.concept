Name: UseDef

Synopsis: Compute use-def information for the variables in a Pico program.

Syntax:

Types:

Function:
       
Usage:

Details:

Description:

Examples:
The _definitions_ of a variable are the source code locations where a variable gets a value.
The _uses_ of a variable are the location where the value of that variable is used.
Both concepts are relevant for program analysis and are defined here.
<listing demo/lang/Pico/UseDef.rsc>

Recall that `Occurrence` was introduced in [Pico/Abstract]; it is a parameterized container to associate
program entities with their location.

The function `uses` (/*1*/) has a Pico program as argument and returns a set of occurrences (uses) of Pico identifiers:
* First, the local variable `r` is declared; it will contain the set of occurrences.
* Next, all statements in the program (`P.stats`) are visited (/*3*/) using a [Rascal:Expressions/Visit] statement.
* There is one case of interest, the occurrence of an identifier in an expression (/*4*/).
  Note that we use a labeled pattern `u:id(PicoId Id)` , so that we can access the whole expression that was matched and retrieve its location information (`u@location`) when we are adding a <location, identifier> pair to the set of occurrences.
* When the whole program has been visited, we return `r` (/*5*/).


The function `defs` (/*6*/)  has a Pico program as argument and returns a set of occurrences (definitions) of Pico identifiers.
The definition consists of a single set comprehension that consists of the following parts:
* ` ... <- P. stats` enumerates all statements in the program.
* `/asgStat(PicoId Id, EXP Exp) <- P.stats` uses a descendant (deep) match (`/`, see [Rascal:Descendant]) to find all assignment statements.
* For each assignment statement a (location, identifier) pair is added to the result.



Benefits:

Pitfalls:

Questions:

       
