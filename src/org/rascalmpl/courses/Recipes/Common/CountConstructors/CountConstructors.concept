Name: CountConstructors

Synopsis: Generic function that can count constructors in a value of any algebraic data type.

Syntax:

Types:

Function:

Details:

Description:
In [ColoredTrees], we have seen a function that can count the number of red nodes in a `ColoredTree`.
Is it possible to define a function that can count constructors in a value of any algerbaic data type?

We exploit the subtype relation (see [$Rascal:Concepts/StaticTyping]) between [Rascal:AlgebraicDataType]s and the type [$Rascal:Values/Node] to achieve this.

In real applications this becomes relevant when counting, for instance, statement types in programs.

Examples:

<listing demo/common/CountConstructors.rsc>

Two data types are introduced `ColoredTree` and `Hand` together
with an example value of each (`CT`, respectively, `H`).

The function `count` is defined at /*1*/:
* /*2*/ introduces an empty map to maintain the frequencies.
* /*3*/ defines a visit of argument `N`; it traverses the complete value of `N`.
* /*4*/ defines the case that we encounter a node and we update its frequency count.
  First the name of the constructor is retrieved (using [Rascal:getName]) and then the
  frequency is updated. The [Rascal:IsDefined] operator is used to provide a default value of 0 when
  the name was not yet in the map.
* /*5*/ the map `freq` is returned as result.


A variant `countRelevant` is defined at /*6*/; it gets is an extra argument of relevant constructors
names that is used to filter the map that is returned by `count` using [$Rascal:Map/domainR].
<screen>
import demo::common::CountConstructors;
count(CT);
count(H);
countRelevant(H, {"hearts", "spades"});
</screen>

Benefits:

Pitfalls:

Questions:

       
