Name: Derivative

Synopsis: Symbolic differentiation.

Syntax:

Types:

Function:

Details:

Description:
Computing the [derivative](http://en.wikipedia.org/wiki/Differentiation_(mathematics)) of an expression with respect to some variable is a classical calculus problem. Loosely speaking, a derivative can be thought of as how much one quantity is changing in response to changes in some other quantity; for example, the derivative of the position of a moving object with respect to time is the object's instantaneous velocity.

We present here rules for determining the derivative `dE/dX` of simple expressions `E` for a given variable `X`. Recall that for number `N`, variables `X` and `Y`, and expressions `E1` and `E2` the following rules apply:
* `dN / dX = 0`.
* `dX / dX = 1`.
* `dX / dY = 0`, when `X != Y`.
* `d(E1 + E2) /dX = dE1 / dX + d E2 /dX`.
* `d(E1 * E2) / dX =  (d E1 / dX  * E2) + (E1 * d E2 /dX)`.


Examples:

Our solution consists of the following parts:
* Define a data type `Exp` to represent expressions (/*1*/).
* Introduce an example expression `E` for later use (/*2*/).
* Define the actual differentiation function `dd` (/*3*/). Observe that this definition depends on the use of patterns in function declarations, see [Rascal:Function].
* Define simplification rules (/*4*/). Observe that a default rule is give for the case that no simplification applies (/*5*/).
* Define the actual simplication function `simplify` that performs a bottom up traversal of the expression, application simplification
rules on the the up.


<listing demo/common/Derivative.rsc>

Let's differentiate the example expression `E`:
<screen>
import demo::common::Derivative;
dd(E, var("x"));
// As you can see, we managed to compute a derivative, but the result is far more complex than we would like.
// This is where simplification comes in. First try a simple case:
simplify(mul(var("x"), add(con(3), con(5))));
// Now apply simplification to the result of differentiation:
simplify(dd(E, var("x")));
</screen>

Benefits:

Pitfalls:

Questions:

       
