Name: Quine

Synopsis: A self-reproducing program.

Syntax:

Types:

Function:

Details:

Description:
A [quine](http://en.wikipedia.org/wiki/Quine_(computing))
is a computer program that takes no input and produces a copy of its own source code.
A quine is also called a _self-replicating_ or _self-reproducing_ program.

At [The Quine Page](http://www.nyx.net/~gthompso/quine.htm) you can find hundreds of
quines in many different programming languages.

Learning about quines, is about learning how to quote and escape symbols in strings.


Examples:

<listing demo/basic/Quine.rsc>

If you look at the source code, /*1*/ is a remarkable point: the string variable `program` has as value
the text of the module `Quine` upto /*1*/. Note that the definition of `program` ends at /*2*/.
Also observe that this string has a mesmerizing amount of escapes to which we will come back in a moment.

The function `quine` prints the string program twice:
* At /*3*/ as is, and this produces the program upto /*1*/.
* At /*4*/ as a string (surrounded with string quotes) in order to reproduce the string value of `program` followed by a semi-colon (`;`).
  

Now here is the catch: we have to be very carefull in handling special characters like quote (`"`) and backslash (`\`) in strings.

Let's do a simple experiment:
<screen>
import IO;
str greeting = "\"Good Morning, Dr. Watson\", said Holmes";
println("\"" + greeting + "\"");
// As you see the quotes inside the string are not escaped and the result is not a legal string.
// So what can we do? We escape all dangerous characters in the string before printing it using the [Rascal:escape] function.
// It takes a string and a map of characters to be escaped and returns a result in which all escaping has been carried out.
// Be aware that in the map, also escaping is needed!
// We want to say: escape `"` and replace it by `\"`, but since both `"` and `\` have to be escaped themselves
// we have to say: escape `"\""` and replace it by `"\\\""`. The effect is as follows:
import String;
println("\"" + escape(greeting, ("\"": "\\\"")) + "\"");
// And indeed, the two quotes are now properly escaped.
</screen>
This is exactly what happens at /*4*/ in the definition of `quine`:
<listing>
println("\"" + escape(program, ("\"" : "\\\"", "\\" : "\\\\")) + "\";");
</listing>
We escape `program` and replace `"` by `\"`, and `\` by `\\`.
The mesmerizing amount of `\` characters can be explained due to escaping `"` and `\`.

Now let's put `quine` to the test.
<screen>
import demo::basic::Quine;
quine();
</screen>
If you follow this output line-by-line you will see that it
is identical to the original source code of module `Quine`.

Benefits:

Pitfalls:

Questions:

       
