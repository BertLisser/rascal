Name:StaticTyping

Categories: Language Beginner

Synopsis:

Description:
Rascal is based on static typing, this means that as many errors and inconsistencies as possible are spotted before 
the program is executed. 

===The Type Lattice===

The types are ordered in a so-called _type lattice_ shown in the following figure.
![Type Lattice](../../Concepts/IntroStaticTyping/type-lattice.png|right|400px)

The arrows describe a _subtype-of_ relation between types. The type `void` is the _smallest_ type and 
is included in all other types and the type `value` is the _largest_ type that includes all other types. 
We also see that `rel` is a subtype of `set` and that each ADT is a subtype of `node`. 
A special role is played by the datatype <tt>Tree</tt> that is the generic type of syntax trees. 
Syntax trees for specific languages are all subtypes of `Tree`. As a result, syntax trees can be addressed at two levels: 
* in a generic fashion as `Tree` and,
* in a specific fashion as a more precisely typed syntax tree. 
Finally, each `alias` is structurally equivalent to one or more specific other types.


The fact that the types are ordered in a lattice makes it possible to define a __Least Upper Bound__ (lub) on types.
Given two types $T_1$ and $T_2$, `lub($T_1$, $T_2$)` is defined as the nearest common super type of $T_1$ and $T_2$
in the type lattice.

===Advanced Features===
The Rascal type system has various advanced features that are described separately:
* Types may be be _parameterized_ resulting in very general and reusable types, see [TypeParameters].
* Declarations of [Function]s and [AlgebraicDataType]s may be parameterized and [TypeConstraints] can be used to define
   constraints on the acual type to be used.
* The formal arguments of functions are bound to _values_ but in exceptional cases
  a function may need a type as argument value, [ReifiedTypes] make this possible.

Examples:

Benefits:

Pittfalls:

Questions:

