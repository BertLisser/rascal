Name:Union

Categories: Language

Syntax: `$Exp_1$ + $Exp_2$`

Types:


| `$Exp_1$`    |  `$Exp_2$`    | `$Exp_1$ + $Exp_2$`      |
|:-------------|:--------------|:-------------------------|
| `set[$T_1$]` |  `set[$T_2$]` | `set[lub($T_1$,$T_2$)]`  |
| `set[$T_1$]` |  `$T_2$`      | `set[lub($T_1$,$T_2$)]`  |
| `$T_1$`      |  `set[$T_2$]` | `set[lub($T_1$,$T_2$)]`  |

Description:
If both $Exp_1$ and $Exp_2$ have a set as value, the result is the union of these two set values. If one of $Exp_1$ or $Exp_2$ does not have a set as value, it is first converted to a set before the union is computed.

Examples:
<screen>
{1, 2, 3} + {4, 5, 6};
{1, 2, 3} + 4;
1 + { 2, 3, 4};
</screen>

Benefits:

Pittfalls:

Questions:

QChoice: When you compute the union of two sets, the number of elements in the result is always:
b: Greater than the number of elements in both sets.
g: Greater than or equal the number of elements in both sets.
b: Smaller than the number of elements in both sets.
b: Smaller than or equal the number of elements in both sets.


QType: <A:set[arb[int,str,real]]> + <B:same[A]>

QValue: <A:set[arb[int,str,real]]> + <B:same[A]>

QValue:
make: A = set[arb[int,str]]
make: B = same[A]
expr: C = <A> + <B>
hint: <B>
test: <A> + <?> == <C>

QValue: <A:set[arb[0,int,str,num,real]]> + <B:same[A]>

