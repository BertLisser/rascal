Name:Set

Categories: Language

Syntax: `{ $Exp_1$, $Exp_2$, ... }`

Types:

|  `$Exp_1$` |  `$Exp_2$` |  ...  |  `{ $Exp_1$, $Exp_2$, ... }`   |
|:-----------|:-----------|:------|:-------------------------------|
| `$T_1$`    | `$T_2$`    |  ...  |  `set[ lub($T_1$, $T_2$, ... ) ]` |

Description: A set is an unordered sequence of values and has the following properties:

* All elements have the same static type.
* The order of the elements does not matter.
* A set contains an element only once. In other words, duplicate elements are eliminated and no 
  matter how many times an element is added to a set, it will occur in it only once.


The type of a set has the form `set[$T$]`,
where `$T$` is an arbitrary type.

When variables of type set occur inside a set, their elements are automatically _spliced_ into the surrounding set. This can be prevented by surrounding them with extra `{` and `}` brackets. Note that this approach is atypical: in Rascal splicing is implicit while in other languages it has to be indicated explicitly by the programmer.

Examples:
== Set types ==
<screen>
{1, 2, 3};
{<1,10>, <2,20>, <3,30>};
{1, "b", 3};
{<"a", 10>, <"b", 20>, <"c", 30>}
{{"a", "b"}, {"c", "d", "e"}}
</screen>
Note that
* `{1, 2, 3}` and `{3, 2, 1}` are identical sets (since order is not relevant).
* ` {1, 2, 3}` and `{1, 2, 3, 1}` are also identical sets (since duplication is not relevant).



== Set splicing ==

<screen>
//Introduce a set variable <tt>S</tt>
S = {1, 2, 3};
// and observe how `S` is spliced in another set
{10, S, 20};
//or becomes a subset when it is surrounded with extra braces
{10, {S}, 20};
</screen>
Benefits:

Pittfalls:

Questions:

QChoice: Sets can be used to represent a sequence of values when
b: The values have duplicates.
g: The values have no duplicates and no order.
b: The values are unordered.

QChoice: The type of a set is determined by:
b: The type of the first element that was first added to the set.
b: The upperbound of the type of two arbitrary elements.
g: The upperbound of the type of all elements.


QType: {1, <?> }
type: set[int]
hint: one or more integer values separated by commas

QType: <A:set[arb]>

QType: {<A:int>, <B:str>, <C:int>}

