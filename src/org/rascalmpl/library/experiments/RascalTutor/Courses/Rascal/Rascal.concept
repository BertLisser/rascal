Name: Rascal

Details: EASY Concepts Examples Declarations Expressions Statements Libraries

Categories: Beginner Language Library Example

Synopsis:

Description: 

_Meta-programs_ are programs that analyze, transform or generate other programs. Ordinary programs work on data; meta-programs work on programs. The range of programs to which meta-programming can be applied is large: from programs in standard languages like C and Java to domain-specific languages for describing high-level system models or applications in specialized areas like gaming or finance. In some cases, even test results or performance data are used as input for meta-programs.

Rascal is a new language for _meta-programming_, this is the activity of writing meta-programs.
It is intended for reading, analyzing, and transforming other programs. 

Examples:
Typical applications of Rascal are:
* Refactoring of Java source code.
* Searching for buffer overflows in C code.
* Analyzing the version history of a large software project.
* Implementing a _domain-specific language_ (DSL) for describing business processes.


All these cases involve a form of meta-programming: software programs (in a wide sense) are the objects-of-interest that are being analyzed, transformed or generated. The Rascal language is designed for meta-programming following the [EASY] paradigm. It can be applied in domains ranging from compiler construction and implementing domain-specific languages to constraint solving and software renovation.

Since representation of information is central to the approach, Rascal provides a rich set of built-in data types. To support extraction and analysis, parsing and advanced pattern matching are provided. High-level control structures make analysis and synthesis of complex datastructures simple.

Benefits:

* __Familiar syntax__ in a _what-you-see is-what-you-get_ style is used even for sophisticated concepts 
   and this makes the language easy to learn and easy to use.
* __Sophisticated built-in data types__ provide standard solutions for many meta-programming problems.
* __Safety__ is achieved by finding most errors before the program is executed and by making common errors
   like missing initializations or invalid pointers impossible. 
* __Local type inference__ makes local variable declarations redundant.
* __Pattern matching__ can be used to analyze all complex datastructures.
* __Syntax definitions__ make it possible to define new and existing languages and to write tools for them.
* __Visiting__ makes it easy to traverse datastructures and to extract information from them or to synthesize results.
* __Templates__ enable easy code generation.
* __Functions as values__ permit programming styles with high re-use.
* __Generic types__ allow writing functions that are applicable for many different types.
* __Eclipse integration__ makes Rascal programming a breeze. All familiar tools are at your fingertips.

Pittfalls:
* Rascal programs are not yet highly optimized so execution maybe slow for some programs.
* At the time of writing, this checking is done during execution, but we are working on this.

Questions:


