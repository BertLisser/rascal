Name:IntroDatatypes

Categories: Beginner

Synopsis:

Description:

Rascal provides a rich set of datatypes:
* [Boolean] (`bool`).
* Infinite precision [Integer] (`int`), [Real] (`real`), and [Number] (`num`).
* [String]s (`str`) that can act as templates with embedded expressions and statements. 
* Source code [Location]s (`loc`) based on an extension of Universal Resource Identifiers (URI) that allow precise description of text areas in local and remote files.
* Date and time values ([DateTime], `datetime`).
* [List] (`list`).
* [Tuple] (`tuple`).
* [Set] (`set`).
* [Map] (`map`) 
* [Relation] (`rel`). 
* Untyped tree structures ([Node], `node`).  
* User-defined algebraic datatypes ([Declarations/AlgebraicDataType], `data`) allow the introduction of problem-specific types and are a subtype of node. 
  This makes it possible to have typed
  and untyped views on the same data. 
  A special case are syntax trees that are the result of parsing source files are represented 
  as datatypes (`Tree`).


There is a wealth of built-in operators and library functions available on the standard datatypes. 

These builtin datatypes are closely related to each other:

* In a list all elements have the same static type and the order of elements matters. A list may contain the same value more than once.
* In a set all elements have the same static type and the order of elements does not matter.
  A set contains an element only once. In other words, duplicate elements are eliminated 
  and no matter how many times an element is added to a set, it will occur in it only once.
* In a tuple alle elements (may) have a different static type. Each element of a tuple may have a label that can be used to select that  
  element of the tuple.
* A relation is a set of tuples which all have the same static tuple type.
* A map is an associative table of (key, value) pairs. Key and value (may) have different static 
  type and a key can only be associated with a value once.

Examples:

Here are some examples of the built-in data types:
<table>
<colgroup>
<col align="left" span="2">
<thead>
<tr><th>_Type_</th> <th>_Examples_</th></tr>
<tbody>
<tr><td>`bool`</td>	                   <td>`true`, `false`</td></tr>
<tr><td>`int`</td>	                   <td>`11, 101, 1-11, 1123456789`</td></tr>
<tr><td>`real`</td>	                   <td>`1.01, 11.0232e201, 1-25.5`</td></tr>
<tr><td>`str`</td>	                   <td>`"abc"`, `"first\nnext"`, `"result: <X>"`</td></tr>
<tr><td>`loc`</td>	                    <td>`|file:///etc/passwd|`</td></tr>
<tr><td>`dateTime`</td>               	<td>`$2101-09-05T07:16:19.714+0200`</td></tr>
<tr><td>`tuple[$T1$,...,$Tn$]`			</td><td>`<1,2>`, `<"john", 43, true>`</td></tr>
<tr><td>`list[$T$]`</td>	            <td>`[]`, `[1]`, `[1,2,3]`, `[true, 2, "abc"]`</td></tr>
<tr><td>`set[$T$]`</td>	            	<td>`{}`, `{1,2,3,5,7}`, `{"john", 4.0}`</td></tr>
<tr><td>`rel[$T1$,...,$Tn$]`</td>    	<td>`{<1,2>,<2,3>,<1,3>}`, `{<1,10,100>, <2,20,200>}`</td></tr>
<tr><td>`map[$T$, $U$]`</td>	    	<td>`()`, `(1:true, 2:false)`, `("a":1, "b":2)`</td></tr>
<tr><td>`node`</td>	                    <td>`f()`, `add(x,y)`, `g("abc", [2,3,4])`</td></tr>
</table>
<br>
A fragment of the datatype that defines the abstract syntax for statements (assignment, if, while) in a programming language would look as follows:

<listing>
data STAT = asgStat(Id name, EXP exp)
          | ifStat(EXP exp,list[STAT] thenpart,
                           list[STAT] elsepart) 
          | whileStat(EXP exp, list[STAT] body)
          ;
</listing>

Benefits:
Pittfalls:
Questions:

