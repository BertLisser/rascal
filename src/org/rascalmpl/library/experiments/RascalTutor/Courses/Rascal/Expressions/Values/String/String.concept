Name:String

Categories:Language

Syntax: `"$StringChar_1$$StringChar_2$..."`
where $StringChar$ may be one of the following:
* __Ordinary character__: Any character except `<`, `>`, `"`, `'` or `\`.
* __Escaped character__: Backslash `\` followed by any of  `<`, `>`, `"`, `'` or `\` represents the escaped character itself.
  Other escape sequences that are supported are:
** `\n`: newline
** `\t`: tab
** `\r`: carriage return
** `\b`: backspace
** <warning>make list complete</warning>

* __String Interpolation__: `<$Exp$>`

Types: `str`

Description:
<warning>Library functions replaceAll, replaceFirst, replaceLast not yet included (reconsider) </warning>
The string values are represented by the type `str` and consist of character 
sequences surrounded by double quotes, e.g., `"a"` or `"a\nlong\nstring"`.
Strings may span more than one line.

String literals support so-called _string interpolation_: 
inside string constants text between angle brackets (`<` and `>`) is first executed and then replaced by
 its string value.
Various statements (if, for, while, do) also return a value and can be used in this way.
In the interpolation variant of these statements the block or blocks that are part of the statement become arbitrary text 
(that may itself contain interpolations). 

Their forms are:

* `<if($Exp$){> ... $Text$ ... <}>`
* `<if($Exp$){> ... $Text$ ... <} else {>  ... $Text$ ... <}>`
* `<for($Exp$){>... $Text$ ... <}>`
* `<while($Exp$){> ... $Text$ ... <}>`
* `<do {>... $Text$ ... <} while ($Exp$)>`


Here `$Text$` is arbitrary text that may itself contain again contain interpolations.

Examples:
<screen>
N = 13;
"The value of N is <N>";
"The value of N*N is <N*N>";
"The value is <(N < 10) ? 10 : N*N>";
//As you can see the string value of variables and expressions is interpolated in the result as expected. 
//<br>
//Some examples of more advances string interpolation 
"N is <if(N < 10){> small <} else {> large <}>";
"N is <if(N < 10){> small <} else {> large (<N>)<}>";
"before <for(x<-[1..5]){>a <x> b <}>after";
</screen>

Benefits:
String interpolation enables very flexible template-based text generation as used in generators for
source code, markup and the like.

Pittfalls:

Questions:

