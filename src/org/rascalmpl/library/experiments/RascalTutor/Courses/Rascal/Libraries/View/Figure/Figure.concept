Name: Figure

Details:

Categories:

Syntax:

Types:

Function:

Synopsis:

Description: The Figure library provides visualization functionality that
can be used to synthesize information. 
This plays, for example, a role in the synthesis part of the [EASY] paradigm.
It is based on the following principles:
* __Coordinate free__: only intrinsic properties of figures such as their height, width or color have to be specified. 
  Their placement and actual coordinates are computed automatically.
* __Compositional__: figures can be composed in many ways.
* __Declarative__: the definition of a figure does not has any side-effects like, for example, 
  changing the current drawing location or current drawing color.


More precisely, figures:
* ... are ordinary values that can be computed and manipulated, e.g., by functions.
* ... only describe their own properties like dimensions and color.
* ... are unaware of their actual coordinate position.
* ... can be composed with other figures. Examples are horizontal and vertical composition, 
  placement on a grid, graph or tree.
* ... can be reused in different contexts.


The Figure library provides two data types:
* `FProperty` describes a property of a figure such as:
  ** _Positioning_: size, width, height, anchor, hanchor, vanchor, alignment, gap, hgap, vgap, textAngle
  ** _Visual appearance_: color, lineWidth, lineColor, fillColor, font, fontSize, textColor, connectedShape,
closedShape, curvedShape.
  ** _Interaction_: mouseOver, contentsHidden, contentsVisible, pinnend
  ** _Other_: id

* `Figure` describes an actual visual element such as:
  ** _Primitive_: text
  ** _(Nested) containers_: box, ellipse, wedge, space
  ** _Composition_: hcat, vcat, hvcat, pack, grid, tree, treemap, graph


Examples:

Benefits:

Pittfalls:

Questions:

