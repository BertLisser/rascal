concept("IntroEnumerators",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Concepts/IntroEnumerators/IntroEnumerators.concept|,[],[],{"Beginner"},{"Enumerator"},"","","","",{}," Enumerators enumerate the values in a given (finite) domain, be it the elements in a list, the substrings of a string, \n or all the nodes in a tree. \n Each value that is enumerated is first matched against a pattern before it can possibly contribute to the result of \n the enumerator.\n \<br/\>\n\<br/\>\n\n See \<a href=\"/show?concept=Enumerator\"\>Enumerator\</a\> for details.\n"," \<pre class=\"listing\"\>int x &lt;- { 1, 3, 5, 7, 11 }\nint x &lt;- [ 1 .. 10 ]\n/asgStat(Id name, _) &lt;- P\n\</pre\> The first two produce the integer elements of a set of integers, respectively, a range of integers. \n Observe that the left-hand side of an enumerator is a pattern, of which \<code\>int x\</code\> is a specific instance. \n The use of more general patterns is illustrated by the third enumerator that does a deep traversal \n (as denoted by the descendant operator \<code\>/\</code\>) of the complete program \<code\>P\</code\> (that is assumed to have a \n \<code\>PROGRAM\</code\> as value) and only yields statements that match the assignment pattern (\<code\>asgStat\</code\>).\n Note the use of an anonymous variable at the \<code\>EXP\</code\> position in the pattern.\n","","",[])