concept("Hello",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Examples/Hello/Hello.concept|,[],[],{"Example","Beginner"},{"IO"},"","","","",{}," Variations on the ubiquitous \<i\>Hello World\</i\> example.\n"," \<h1\> First version: hello on the command line \</h1\>\n We demonstrate hello via an interactive session with the Rascal system. First we get the prompt \<code\>rascal\>\</code\> that shows that Rascal is ready for our input. Next, we import the library module \<a href=\"/show?concept=IO\"\>IO\</a\> since hello world requires printing. Rascal responds with the feedback \<code\>ok\</code\> so we know that all went well. Finally, we call \<code\>println\</code\> and proudly observe our first Rascal output!\n \<pre class=\"screen\"\>\<b\>rascal\>\</b\>import IO;\nok\n\<b\>rascal\>\</b\>println(&quot;Hello world, this is my first Rascal program&quot;);\nHello world, this is my first Rascal program\nok\n\</pre\> \<h1\> Second version: hello in a function \</h1\>\n A slightly more audacious approach is to wrap the print statement in a function and call it:\n \<pre class=\"screen\"\>\<b\>rascal\>\</b\>import IO;\nok\n\<b\>rascal\>\</b\>void hello() {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;   println(&quot;Hello world, this is my first Rascal program&quot;);\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;}\nvoid (): void hello();\n\</pre\>\n When you type in a command and continue it on a new line \n the Rascal systems prompts you with \<code\>\>\>\>\>\>\>\>\</code\> to \n indicate that more input is needed. Don\'\\t get scared by \n the \<code\>void (): void hello();\</code\> that you get back \n when typing in the hello function. The first \n  \<code\>void ()\</code\> part says the result is a function that \n  returns nothing, and the second part \n  \<code\>void hello()\</code\> summarizes its value \n  (or would you prefer a hex dump?).\n  Finally, we call the \<tt\>hello\</tt\> function and enjoy its output.\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>hello();\nHello world, this is my first Rascal program\nok\n\</pre\> \<h1\> Third version: hello in a module \</h1\>\n The summit of hello-engineering can be reached by placing all the above in a separate module:\n  \<pre class=\"listing\"\>module demo::Hello\n\nimport IO;\n\npublic void hello() {\n   println(\"Hello world, this is my first Rascal program\");\n}\n\n\</pre\> Note that we added a public modifier to the definition of hello, since we want it to be visible outside the Hello module. Using this Hello module is now simple:\n  \<pre class=\"screen\"\>\<b\>rascal\>\</b\>import demo::Hello;\nok\n\<b\>rascal\>\</b\>hello();\nHello world, this is my first Rascal program\nok\n\</pre\>","","",[])