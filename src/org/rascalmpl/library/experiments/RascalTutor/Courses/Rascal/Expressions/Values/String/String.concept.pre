concept("String",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Expressions/Values/String/String.concept|,["Library functions replaceAll, replaceFirst, replaceLast not yet included (reconsider) "],[],{"Language"},{},""," \<code\>\"\<i\>StringChar\</i\>\<sub\>1\</sub\>\<i\>StringChar\</i\>\<sub\>2\</sub\>...\"\</code\>\n where \<code\>\<i\>StringChar\</i\>\</code\> may be one of the following:\n \<ul\>\<li\> \<b\>Ordinary character\</b\>: Any character except \<code\>&lt;\</code\>, \<code\>\>\</code\>, \<code\>\"\</code\>, \<code\>\'\\\</code\> or \<code\>\\\</code\>.\</li\>\n\<li\> \<b\>Escaped character\</b\>: Backslash \<code\>\\\</code\> followed by any of  \<code\>&lt;\</code\>, \<code\>\>\</code\>, \<code\>\"\</code\>, \<code\>\'\\\</code\> or \<code\>\\\</code\> represents the escaped character itself.   Other escape sequences that are supported are:\n \<ul\>\<li\> \<code\>\\n\</code\>: newline\</li\>\n\<li\> \<code\>\\t\</code\>: tab\</li\>\n\<li\> \<code\>\\r\</code\>: carriage return\</li\>\n\<li\> \<code\>\\b\</code\>: backspace\</li\>\n\<li\> \<warning\>make list complete\</warning\>\</li\>\n\</ul\>\</li\>\n\<li\> \<b\>String Interpolation\</b\>: \<code\>&lt;\<i\>Exp\</i\>\>\</code\>\</li\>\n\</ul\>"," \<code\>str\</code\>\n","",{"n","\>","\\","\<","\'\\","t","...\"","b","r","\"","str"}," \<warning\>Library functions replaceAll, replaceFirst, replaceLast not yet included (reconsider) \</warning\> The string values are represented by the type \<code\>str\</code\> and consist of character \n sequences surrounded by double quotes, e.g., \<code\>\"a\"\</code\> or \<code\>\"a\\nlong\\nstring\"\</code\>.\n Strings may span more than one line.\n \<br/\>\n\<br/\>\n\n String literals support so-called \<i\>string interpolation\</i\>: \n inside string constants text between angle brackets (\<code\>&lt;\</code\> and \<code\>\>\</code\>) is first executed and then replaced by\n  its string value.\n Various statements (if, for, while, do) also return a value and can be used in this way.\n In the interpolation variant of these statements the block or blocks that are part of the statement become arbitrary text \n (that may itself contain interpolations). \n \<br/\>\n\<br/\>\n\n Their forms are:\n  \<ul\>\<li\> \<code\>&lt;if(\<i\>Exp\</i\>){\> ... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;if(\<i\>Exp\</i\>){\> ... \<i\>Text\</i\> ... &lt;} else {\>  ... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;for(\<i\>Exp\</i\>){\>... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;while(\<i\>Exp\</i\>){\> ... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;do {\>... \<i\>Text\</i\> ... &lt;} while (\<i\>Exp\</i\>)\>\</code\>\</li\>\n\</ul\> Here \<code\>\<i\>Text\</i\>\</code\> is arbitrary text that may itself contain again contain interpolations.\n"," \<pre class=\"screen\"\>\<b\>rascal\>\</b\>N = 13;\nint: 13\n\<b\>rascal\>\</b\>&quot;The value of N is &lt;N&gt;&quot;;\nstr: &quot;The value of N is 13&quot;\n\<b\>rascal\>\</b\>&quot;The value of N*N is &lt;N*N&gt;&quot;;\nstr: &quot;The value of N*N is 169&quot;\n\<b\>rascal\>\</b\>&quot;The value is &lt;(N &lt; 10) ? 10 : N*N&gt;&quot;;\nstr: &quot;The value is 169&quot;\n\</pre\>\n As you can see the string value of variables and expressions is interpolated in the result as expected. \n \<br\>\n Some examples of more advances string interpolation \n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>&quot;N is &lt;if(N &lt; 10){&gt; small &lt;} else {&gt; large &lt;}&gt;&quot;;\nstr: &quot;N is  large &quot;\n\<b\>rascal\>\</b\>&quot;N is &lt;if(N &lt; 10){&gt; small &lt;} else {&gt; large (&lt;N&gt;)&lt;}&gt;&quot;;\nstr: &quot;N is  large (13)&quot;\n\<b\>rascal\>\</b\>&quot;before &lt;for(x&lt;-[1..5]){&gt;a &lt;x&gt; b &lt;}&gt;after&quot;;\nstr: &quot;before a 1 b a 2 b a 3 b a 4 b a 5 b after&quot;\n\</pre\>"," String interpolation enables very flexible template-based text generation as used in generators for\n source code, markup and the like.\n","",[])