concept("LessThanOrEqual",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Expressions/Values/Value/LessThanOrEqual/LessThanOrEqual.concept|,["Rascal implementation: broken"],[],{"Language"},{},""," \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\> &lt;= \<i\>Exp\</i\>\<sub\>2\</sub\>\</code\>\n"," \<table\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> \</th\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> \</th\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\> &lt;= \<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> \</th\>\</tr\>\<tr\>\<td align=\"left\"\> \<code\>value\</code\>   \</td\>\<td align=\"left\"\>  \<code\>value\</code\>  \</td\>\<td align=\"left\"\> \<code\>bool\</code\>               \</td\>\</tr\>\</table\>","",{"bool","value","\<="}," By brute force, a total less than operator between two values \<code\>\<i\>V\</i\>\<sub\>1\</sub\>\</code\> and \<code\>\<i\>V\</i\>\<sub\>2\</sub\>\</code\> of arbitrary types \<code\>\<i\>T\</i\>\<sub\>1\</sub\>\</code\> and \<code\>\<i\>T\</i\>\<sub\>2\</sub\>\</code\> is defined:\n  \<ul\>\<li\> If the types \<code\>\<i\>T\</i\>\<sub\>1\</sub\>\</code\> and \<code\>\<i\>T\</i\>\<sub\>2\</sub\>\</code\> can be compared then \<code\>\<i\>V\</i\>\<sub\>1\</sub\>\</code\> less than \<code\>\<i\>V\</i\>\<sub\>2\</sub\>\</code\> is used.\</li\>\n\<li\> Otherwise values are ordered according their type name, for instance, \<code\>int\</code\> is smaller than \<code\>list\</code\>, and \<code\>map\</code\> is smaller than \<code\>rel\</code\>.\</li\>\n\</ul\> Less than or equal yields \<code\>true\</code\> if the value of \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> is strictly less\n than (according to the ordering defined above) the value of \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> or if both values are equal, and \<code\>false\</code\> otherwise.\n"," \<warning\>Rascal implementation: broken\</warning\> \<pre class=\"screen\"\>\</pre\>\n  Introduce two variables \<code\>X\</code\>, \<code\>Y\</code\> and \<code\>Z\</code\> and force them to be of type \<code\>value\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>value X = &quot;abc&quot;;\nvalue: &quot;abc&quot;\n\<b\>rascal\>\</b\>value Y = &quot;def&quot;;\nvalue: &quot;def&quot;\n\<b\>rascal\>\</b\>value Z = 3.14;\nvalue: 3.14\n\</pre\>\n  Now compare \<code\>X\</code\> and \<code\>Y\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>X &lt;= Y;\nStatic Error: prompt:///:1,0: &lt;= not supported on value and value\n\</pre\>\n  and \<code\>X\</code\> and \<code\>Z\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>X &lt;= Z;\nStatic Error: prompt:///:1,0: &lt;= not supported on value and value\n\</pre\>","","",[])