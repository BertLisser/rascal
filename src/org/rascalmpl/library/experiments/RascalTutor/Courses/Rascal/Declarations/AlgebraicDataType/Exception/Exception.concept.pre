concept("Exception",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Declarations/AlgebraicDataType/Exception/Exception.concept|,[],[],{"Library"},{"Throw","AlgebraicDataType","TryCatch"},"","",""," \<pre class=\"listing\"\>module Exception\n\n/*\n * This data type declares all exceptions that are thrown by the\n * Rascal run-time environment which can be caught by a Rascal program.\n */\n\ndata RuntimeException = \n      EmptyList()\n    | EmptyMap() \n    | EmptySet()\n    | IndexOutOfBounds(int index)\n    | AssertionFailed() \n    | AssertionFailed(str label)\n    | NoSuchElement(value v)\n    | IllegalArgument(value v)\n    | IllegalArgument()\n    | IO(str message)\n    | PathNotFound(loc l)\n    | FileNotFound(str file)\n    | SchemeNotSupported(loc l)\n    | HostNotFound(loc l)\n    | AccessDenied(loc l)\n    | PermissionDenied()\n    | PermissionDenied(str message)\n    | ModuleNotFound(str name)\n    | NoSuchKey(value key)\n    | NoSuchAnnotation(str label)\n    | Java(str message)\n    | ParseError(loc location)\n    | IllegalIdentifier(str name)\n    | MissingCase(value x)\n    | Subversion(str message)\n    | Timeout()\n\t;\n\</pre\>",{}," \<code\>RuntimeException\</code\> is an \<a href=\"/show?concept=AlgebraicDataType\"\>AlgebraicDataType\</a\> that describes the \<i\>soft\</i\> exceptions that can be caught by a Rascal program.\n Since declarations for ADTs are extensible, the user can add new exceptions when needed.\n \<br/\>\n\<br/\>\n\n Exception are generated by \<a href=\"/show?concept=Throw\"\>Throw\</a\> and can be caught by \<a href=\"/show?concept=TryCatch\"\>TryCatch\</a\>.\n"," \<pre class=\"screen\"\>\</pre\>\n  Import relevant libraries:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Exception;\nok\n\<b\>rascal\>\</b\>import IO;\nok\n\</pre\>\n  Define the map \<code\>weekend\</code\> and do a subscription with a non-existing key:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>weekend = (&quot;saturday&quot;: 1, &quot;sunday&quot;: 2);\nmap[str, int]: (&quot;saturday&quot;:1,&quot;sunday&quot;:2)\n\<b\>rascal\>\</b\>weekend[&quot;monday&quot;];\nUncaught Rascal Exception: prompt:///:1,0: NoSuchKey(&quot;monday&quot;)\n    somewhere in: ***shell***\n\</pre\>\n  Repeat this, but catch the exception. We use variable \<code\>N\</code\> to track what happened:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>N = 1;\nint: 1\n\<b\>rascal\>\</b\>try {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;   N = weekend[&quot;monday&quot;];\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;} catch NoSuchKey(v):\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  N = 100;\nok\n\<b\>rascal\>\</b\>println(N);\n100\nok\n\</pre\>","","",[])