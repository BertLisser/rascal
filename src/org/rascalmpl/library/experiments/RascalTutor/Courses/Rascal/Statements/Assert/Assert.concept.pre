concept("Assert",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Statements/Assert/Assert.concept|,[],[],{"Language"},{},""," \<ol\>\<li\> \<code\>assert \<i\>Exp\</i\>\<sub\>1\</sub\>\</code\>\</li\>\n\<li\> \<code\>assert \<i\>Exp\</i\>\<sub\>1\</sub\> : \<i\>Exp\</i\>\<sub\>2\</sub\>\</code\>\</li\>\n\</ol\>"," \<table\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> \</th\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> \</th\>\</tr\>\<tr\>\<td align=\"left\"\> \<code\>bool\</code\>    \</td\>\<td align=\"left\"\> \<code\>str\</code\>     \</td\>\</tr\>\</table\>","",{":","bool","assert","str"}," An assert statement may occur everywhere where a declaration is allowed. It has two forms:\n \<br/\>\n\<br/\>\n\n An assert statement consists of a Boolean expression \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> and an optional string expression \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\>\n that serves as a identifying message for this assertion. \n \<br/\>\n\<br/\>\n\n When \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> evaluates to \<code\>false\</code\>, an \<code\>AssertionFailed\</code\> exception is thrown.\n"," \<pre class=\"screen\"\>\<b\>rascal\>\</b\>assert 1==2 : &quot;is never true&quot;;\nUncaught Rascal Exception: prompt:///:1,0: AssertionFailed(&quot;is never true&quot;)\n    somewhere in: ***shell***\n\<b\>rascal\>\</b\>int div(int x, int y) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  assert y != 0 : &quot;y must be non-zero&quot;;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  return x / y;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;}\nint (int, int): int div(int, int);\n\<b\>rascal\>\</b\>div(4,0);\nUncaught Rascal Exception: prompt:///:2,2: AssertionFailed(&quot;y must be non-zero&quot;)&raquo;\n\n    somewhere in: div\n    somewhere in: ***shell***\n\</pre\>","","",[])