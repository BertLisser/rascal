concept("ColoredTrees",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Examples/ColoredTrees/ColoredTrees.concept|,[],[],{"Example","Beginner"},{},"","","","",{}," We consider binary trees---trees with exactly two children---that have integers as their leaves. \n Our trees can have red and black nodes and we want to perform the following operations on them:\n \<ul\>\<li\> Count the number of red nodes.\</li\>\n\<li\> Compute the sum of all the integers that occur in the leaves.\</li\>\n\<li\> Extend the tree data type with green nodes.\</li\>\n\<li\> Replace all red nodes by green ones.\</li\>\n\</ul\>"," The definition of ColoredTrees is as follows:\n \<pre class=\"listing\"\>module demo::ColoredTrees\n\n// Define ColoredTrees with red and black nodes and integer leaves\n\ndata ColoredTree = leaf(int N)      \<img src=\"images/1.png\"\>\n                 | red(ColoredTree left, ColoredTree right) \n                 | black(ColoredTree left, ColoredTree right);\n          \n// Count the number of red nodes\n          \npublic int cntRed(ColoredTree t){\n   int c = 0;\n   visit(t) {\n     case red(_,_): c = c + 1;      \<img src=\"images/2.png\"\>\n   };\n   return c;\n}\n\n// Compute the sum of all integer leaves\n\npublic int addLeaves(ColoredTree t){\n   int c = 0;\n   visit(t) {\n     case leaf(int N): c = c + N;   \<img src=\"images/3.png\"\>\n   };\n   return c;\n}\n\n// Add green nodes to ColoredTree\n\ndata ColoredTree = green(ColoredTree left, ColoredTree right); \<img src=\"images/4.png\"\>\n\n// Transform red nodes into green nodes\n\npublic ColoredTree makeGreen(ColoredTree t){\n   return visit(t) {\n     case red(l, r) =\> green(l, r)   \<img src=\"images/5.png\"\>\n   };\n}\n\</pre\> First (\<img src=\"images/1.png\"\>) we define the data type of \<code\>ColoredTrees\</code\> with constructors\n \<code\>leaf\</code\>, \<code\>red\</code\> and \<code\>black\</code\>.\n \<code\>cntRed\</code\> (\<img src=\"images/2.png\"\>) counts all red nodes by visiting all nodes and incrementing\n the counter \<code\>c\</code\> for each red one.\n \<code\>addLeaves\</code\> (\<img src=\"images/3.png\"\>) visits all nodes and adds the integers in each leaf node.\n In \<img src=\"images/4.png\"\> \<code\>coloredTrees\</code\> are extended with a new constructor \<code\>green\</code\>.\n \<code\>makeGreen\</code\> (\<img src=\"images/5.png\"\>) visits all nodes and turns red nodes in green ones.\n \<br/\>\n\<br/\>\n\n We can now explore ColoredTrees:\n \<pre class=\"screen\"\>\<b\>rascal\>\</b\>import demo::ColoredTrees;\nok\n\<b\>rascal\>\</b\>rb = red(black(leaf(1), red(leaf(2),leaf(3))), black(leaf(3), leaf(4)));\nColoredTree: red(black(leaf(1),red(leaf(2),leaf(3))),black(leaf(3),leaf(4)))\n\</pre\>\n  Count the red nodes in \<code\>rb\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>cntRed(rb);\nint: 2\n\</pre\>\n  and compute the sum of all leaves:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>addLeaves(rb);\nint: 13\n\</pre\>\n  Finally, we convert all red nodes:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>makeGreen(rb);\nColoredTree: green(black(leaf(1),green(leaf(2),leaf(3))),black(leaf(3),leaf(4)))&raquo;\n\n\</pre\>"," This example illustrates the fully automatic visiting of the elements of a structured data type.\n Compare this with the traditional programming style in which a switch statement is used to determine\n the constructor and recursion is used to visit substructures. This style becomes particularly cumbersome\n for data types with large numbers of constructors such as, for instance, abstract syntax trees for real\n programming languages.\n"," The visit statement is based on a new paradigm one has to learn.\n",[])