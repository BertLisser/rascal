concept("Variable",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Declarations/Variable/Variable.concept|,[],[],{"Language","Beginner"},{},""," \<ol\>\<li\> \<code\>\<i\>Type\</i\> \<i\>Name\</i\> = \<i\>Exp\</i\>;\</code\>\</li\>\n\<li\> \<code\>\<i\>Type\</i\> \<i\>Name\</i\>;\</code\>\</li\>\n\</ol\>"," \<table\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<th align=\"left\"\>\<code\>\<i\>Type\</i\>\</code\>  \</th\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\</code\>     \</th\>\</tr\>\<tr\>\<td align=\"left\"\> \<code\>\<i\>Type\</i\>\</code\> \</td\>\<td align=\"left\"\> \<code\>&lt;: \<i\>Type\</i\>\</code\> \</td\>\</tr\>\</table\>","",{"\<:","=",";"}," The effect of a variable declaration is to introduce a new variable \<code\>\<i\>Name\</i\>\</code\> and\n to assign the value of expression \<code\>\<i\>Exp\</i\>\</code\> to \<code\>\<i\>Name\</i\>\</code\>. A mention of \<code\>\<i\>Name\</i\>\</code\> later on in the same scope\n will be replaced by this value, provided that \<code\>\<i\>Name\</i\>\</code\>s value has not been changed by an intermediate assignment. \n \<br/\>\n\<br/\>\n\n When a variable is declared, it has as scope the nearest enclosing block, or the module when declared at the module level.\n \<br/\>\n\<br/\>\n\n The following rules apply:\n  \<ul\>\<li\> Double declarations in the same scope are not allowed.\</li\>\n\<li\> The type of \<code\>\<i\>Exp\</i\>\</code\> should be compatible with \<code\>\<i\>Type\</i\>\</code\>, i.e., it should be a subtype of \<code\>\<i\>Type\</i\>\</code\>.\</li\>\n\</ul\> As a convenience, also declarations without an initialization expression are permitted inside functions (but not at the module level)\n  and have the form\n \<pre class=\"listing\"\>\<i\>Type\</i\> \<i\>Name\</i\>; \n\</pre\> and only introduce the variable \<code\>\<i\>Name\</i\>\</code\>.\n \<br/\>\n\<br/\>\n\n Rascal provides local type inference, which allows the implicit declaration of variables that are used locally in functions. The following rules apply:\n  \<ul\>\<li\> An implicitly declared variable is declared at the level of the current scope, this may the whole function body or a block nested in it.\</li\>\n\<li\> An implicitly declared variable gets as type the type of the first value that is assignment to it.\</li\>\n\<li\> If a variable is implicitly declared in different execution path of a function, all these implicit declarations should result in the same type.\</li\>\n\<li\> All uses of an implicitly declared variable must be compatible with its implicit type.\</li\>\n\</ul\>"," \<pre class=\"screen\"\>\</pre\>\n  Two explicit variable declarations:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>int max = 100;\nint: 100\n\<b\>rascal\>\</b\>min = 0;\nint: 0\n\</pre\>\n  An implicit variable declaration\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>day = {&lt;&quot;mon&quot;, 1&gt;, &lt;&quot;tue&quot;, 2&gt;, &lt;&quot;wed&quot;,3&gt;, \n&gt;&gt;&gt;&gt;&gt;&gt;&gt;       &lt;&quot;thu&quot;, 4&gt;, &lt;&quot;fri&quot;, 5&gt;, &lt;&quot;sat&quot;,6&gt;, &lt;&quot;sun&quot;,7&gt;};\nrel[str, int]: {&lt;&quot;thu&quot;,4&gt;,&lt;&quot;mon&quot;,1&gt;,&lt;&quot;sat&quot;,6&gt;,&lt;&quot;wed&quot;,3&gt;,&lt;&quot;tue&quot;,2&gt;,&lt;&quot;fri&quot;,5&gt;,&lt;&quot;su&raquo;\nn&quot;,7&gt;}\n\</pre\>\n  Variable declaration and assignment leading to type error\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>int month = 12;\nint: 12\n\<b\>rascal\>\</b\>month =&quot;December&quot;;\nStatic Error: prompt:///:1,0: Expected int, but got str\n\</pre\>","","",[])