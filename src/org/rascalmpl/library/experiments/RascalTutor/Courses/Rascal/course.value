course("Rascal",["\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Concepts/Concepts.html\"\>Concepts\</a\>/\<a href=\"/Courses/Rascal/Concepts/Visiting/Visiting.html\"\>Visiting\</a\>: Ambiguous reference to concept: Rascal:Insert; \nResolve with one of {Rascal/Expressions/Values/List/Insert, Rascal/Expressions/Values/Set/Insert, Rascal/Statements/Insert}","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Patterns/Patterns.html\"\>Patterns\</a\>/\<a href=\"/Courses/Rascal/Patterns/Abstract/Abstract.html\"\>Abstract\</a\>/\<a href=\"/Courses/Rascal/Patterns/Abstract/TypeConstrained/TypeConstrained.html\"\>TypeConstrained\</a\>:  add example","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Patterns/Patterns.html\"\>Patterns\</a\>/\<a href=\"/Courses/Rascal/Patterns/Abstract/Abstract.html\"\>Abstract\</a\>/\<a href=\"/Courses/Rascal/Patterns/Abstract/Descendant/Descendant.html\"\>Descendant\</a\>: Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Relation/Relation.html\"\>Relation\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Relation/range/range.html\"\>range\</a\>: Unknown or ambiguous concept Rascal/Expressions/Values/Relation/domain","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Patterns/Patterns.html\"\>Patterns\</a\>/\<a href=\"/Courses/Rascal/Patterns/PatternWithAction/PatternWithAction.html\"\>PatternWithAction\</a\>: Ambiguous reference to concept: Rascal:Insert; \nResolve with one of {Rascal/Expressions/Values/List/Insert, Rascal/Expressions/Values/Set/Insert, Rascal/Statements/Insert}","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/GreaterThan/GreaterThan.html\"\>GreaterThan\</a\>: Rascal implementation: broken","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/GreaterThan/GreaterThan.html\"\>GreaterThan\</a\>: Static Error: prompt:///:1,0: \> not supported on value and valueStatic Error: prompt:///:1,0: \> not supported on value and value","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Patterns/Patterns.html\"\>Patterns\</a\>/\<a href=\"/Courses/Rascal/Patterns/Abstract/Abstract.html\"\>Abstract\</a\>/\<a href=\"/Courses/Rascal/Patterns/Abstract/TypedLabelled/TypedLabelled.html\"\>TypedLabelled\</a\>:  add example","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Statements/Statements.html\"\>Statements\</a\>/\<a href=\"/Courses/Rascal/Statements/Do/Do.html\"\>Do\</a\>: Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Visit/Visit.html\"\>Visit\</a\>: Ambiguous reference to concept: Rascal:Insert; \nResolve with one of {Rascal/Expressions/Values/List/Insert, Rascal/Expressions/Values/Set/Insert, Rascal/Statements/Insert}","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Libraries/Libraries.html\"\>Libraries\</a\>/\<a href=\"/Courses/Rascal/Libraries/Vis/Vis.html\"\>Vis\</a\>/\<a href=\"/Courses/Rascal/Libraries/Vis/Figure/Figure.html\"\>Figure\</a\>/\<a href=\"/Courses/Rascal/Libraries/Vis/Figure/Properties/Properties.html\"\>Properties\</a\>: Reference to unknown course or concept: Rascal:fontBaseLine","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/GreaterThanOrEqual/GreaterThanOrEqual.html\"\>GreaterThanOrEqual\</a\>: Rascal implementation: broken","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/GreaterThanOrEqual/GreaterThanOrEqual.html\"\>GreaterThanOrEqual\</a\>: Static Error: prompt:///:1,0: \>= not supported on value and valueStatic Error: prompt:///:1,0: \>= not supported on value and value","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Libraries/Libraries.html\"\>Libraries\</a\>/\<a href=\"/Courses/Rascal/Libraries/Vis/Vis.html\"\>Vis\</a\>/\<a href=\"/Courses/Rascal/Libraries/Vis/Figure/Figure.html\"\>Figure\</a\>/\<a href=\"/Courses/Rascal/Libraries/Vis/Figure/Properties/Properties.html\"\>Properties\</a\>/\<a href=\"/Courses/Rascal/Libraries/Vis/Figure/Properties/fontNames/fontNames.html\"\>fontNames\</a\>: Uncaught Rascal Exception: prompt:///:1,0: Java(\"Invalid thread access\")    org.eclipse.swt.SWT.error(SWT.java:4282)    org.eclipse.swt.SWT.error(SWT.java:4197)    org.eclipse.swt.SWT.error(SWT.java:4168)    org.eclipse.swt.widgets.Display.error(Display.java:1065)","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Declarations/Declarations.html\"\>Declarations\</a\>/\<a href=\"/Courses/Rascal/Declarations/Tag/Tag.html\"\>Tag\</a\>: To be provided","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/LessThanOrEqual/LessThanOrEqual.html\"\>LessThanOrEqual\</a\>: Rascal implementation: broken","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/LessThanOrEqual/LessThanOrEqual.html\"\>LessThanOrEqual\</a\>: Static Error: prompt:///:1,0: \<= not supported on value and valueStatic Error: prompt:///:1,0: \<= not supported on value and value","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/LessThan/LessThan.html\"\>LessThan\</a\>: Rascal implementation: broken","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Expressions/Expressions.html\"\>Expressions\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Values.html\"\>Values\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/Value.html\"\>Value\</a\>/\<a href=\"/Courses/Rascal/Expressions/Values/Value/LessThan/LessThan.html\"\>LessThan\</a\>: Static Error: prompt:///:1,0: \< not supported on value and valueStatic Error: prompt:///:1,0: \< not supported on value and value","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Statements/Statements.html\"\>Statements\</a\>/\<a href=\"/Courses/Rascal/Statements/For/For.html\"\>For\</a\>: Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Libraries/Libraries.html\"\>Libraries\</a\>/\<a href=\"/Courses/Rascal/Libraries/Benchmark/Benchmark.html\"\>Benchmark\</a\>/\<a href=\"/Courses/Rascal/Libraries/Benchmark/realTime/realTime.html\"\>realTime\</a\>: Reference to unknown course or concept: Rascal:now","\<a href=\"/Courses/Rascal/Rascal.html\"\>Rascal\</a\>/\<a href=\"/Courses/Rascal/Statements/Statements.html\"\>Statements\</a\>/\<a href=\"/Courses/Rascal/Statements/While/While.html\"\>While\</a\>: Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}"],("Rascal/Expressions/Values/String/findLast":concept("Rascal/Expressions/Values/String/findLast",[],[],{},[]),"Rascal/Declarations/Import":concept("Rascal/Declarations/Import",[],[],{";","import"},[]),"Rascal/Libraries/Vis/Figure/Properties/id":concept("Rascal/Libraries/Vis/Figure/Properties/id",[],[],{},[]),"Rascal/Expressions/Values/Boolean":concept("Rascal/Expressions/Values/Boolean",[],[],{"true",";","bool","Boolean","import","false"},[]),"Rascal/Libraries":concept("Rascal/Libraries",[],[],{},[]),"Rascal/Expressions/Values/Set/Equal":concept("Rascal/Expressions/Values/Set/Equal",[],[],{"]","[","bool","set","=="},[tvQuestion("Rascal/Expressions/Values/Set/Equal","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> == \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Libraries/Vis/Figure/Properties/shapeClosed":concept("Rascal/Libraries/Vis/Figure/Properties/shapeClosed",[],[],{},[]),"Rascal/Concepts/Enumerators/EquationSolving":concept("Rascal/Concepts/Enumerators/EquationSolving",[],[],{},[]),"Rascal/Expressions/Values/List/tail":concept("Rascal/Expressions/Values/List/tail",[],[],{},[]),"Rascal/Expressions/Values/List/toSet":concept("Rascal/Expressions/Values/List/toSet",[],[],{},[]),"Rascal/Libraries/Scripting/evalType":concept("Rascal/Libraries/Scripting/evalType",[],[],{},[]),"Rascal/Declarations/Function":concept("Rascal/Declarations/Function",[],[],{"}","=","|","...)","{",";","(\"","\")?","test","throws",",",")","public","(","private","\"","java","default"},[]),"Rascal/Expressions/Values/String/endsWith":concept("Rascal/Expressions/Values/String/endsWith",[],[],{},[]),"Rascal/Expressions/Values/Map/SubMap":concept("Rascal/Expressions/Values/Map/SubMap",[],[],{"]",",","map","[","bool","\<="},[]),"Rascal/Declarations/Alias":concept("Rascal/Declarations/Alias",[],[],{"=",";","alias"},[]),"Rascal/Expressions/Values/Relation/carrierX":concept("Rascal/Expressions/Values/Relation/carrierX",[],[],{},[]),"Rascal/Expressions/Values/Set/Difference":concept("Rascal/Expressions/Values/Set/Difference",[],[],{"]","-",",","[","lub","(",")]","set"},[choiceQuestion("Rascal/Expressions/Values/Set/Difference","1","  When you compute the difference of two sets, the number of elements in the result is always:\n",[good("Smaller than or equal the number of elements in the first set."),bad("Greater than the number of elements in both sets."),bad("Greater than or equal the number of elements in the first set."),bad("Smaller than the number of elements in both sets.")]),tvQuestion("Rascal/Expressions/Values/Set/Difference","2",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,str]]\> + \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str()]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Difference","3",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> - \<A:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"A",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Difference","4",valueOfExpr(),details(" ",[],"","","\<A:set[arb[0,int,str,num,real]]\> - \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),num(-20,20),real(-20,20)]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/String/findAll":concept("Rascal/Expressions/Values/String/findAll",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/mouseOver":concept("Rascal/Libraries/Vis/Figure/Properties/mouseOver",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/vscrollable":concept("Rascal/Libraries/Vis/Figure/Figures/vscrollable",[],[],{},[]),"Rascal/Expressions/Values/DateTime/GreaterThan":concept("Rascal/Expressions/Values/DateTime/GreaterThan",[],[],{"\>","datetime","bool"},[]),"Rascal/Libraries/Vis/Figure/Properties/shapeCurved":concept("Rascal/Libraries/Vis/Figure/Properties/shapeCurved",[],[],{},[]),"Rascal/Expressions/Values/List/Subscription":concept("Rascal/Expressions/Values/List/Subscription",[],[],{"int","list","]","["},[]),"Rascal/Libraries/ParseTree/parse":concept("Rascal/Libraries/ParseTree/parse",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/fswitch":concept("Rascal/Libraries/Vis/Figure/Figures/fswitch",[],[],{},[]),"Rascal/Expressions/Values/Tuple/Equal":concept("Rascal/Expressions/Values/Tuple/Equal",[],[],{"]",",","[","bool","tuple","=="},[]),"Rascal/Expressions/Values/Relation/carrierR":concept("Rascal/Expressions/Values/Relation/carrierR",[],[],{},[]),"Rascal/Expressions/Values/Location/AddSegment":concept("Rascal/Expressions/Values/Location/AddSegment",[],[],{"+","str","loc"},[]),"Rascal/Expressions/Values/String/replaceAll":concept("Rascal/Expressions/Values/String/replaceAll",[],[],{},[]),"Rascal/Libraries/Exception":concept("Rascal/Libraries/Exception",[],[],{},[]),"Rascal/Concepts/Enumerators":concept("Rascal/Concepts/Enumerators",[],[],{},[]),"Rascal/Expressions/Values/Boolean/Match":concept("Rascal/Expressions/Values/Boolean/Match",[],[],{"bool",":=","value"},[tvQuestion("Rascal/Expressions/Values/Boolean/Match","1",valueOfExpr(),details(" Determine the number of strings that contain \"a\".\n",[],"text = [\"andra\", \"moi\", \"ennepe\", \"Mousa\", \"polutropon\"];\npublic int count(list[str] text){\n  n = 0;\n  for(s \<- text)\n    if("," := s)\n      n +=1;\n  return n;\n}\n","count(text) == 2;","",true,false,[],[],void(),""))]),"Rascal/Libraries/Vis/Figure/Properties/onMouseExit":concept("Rascal/Libraries/Vis/Figure/Properties/onMouseExit",[],[],{},[]),"Rascal/Libraries/JDT/extractClass":concept("Rascal/Libraries/JDT/extractClass",[],[],{},[]),"Rascal/Libraries/Graph/predecessors":concept("Rascal/Libraries/Graph/predecessors",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hgrow":concept("Rascal/Libraries/Vis/Figure/Properties/hgrow",[],[],{},[]),"Rascal/Expressions/Values/Number/nroot":concept("Rascal/Expressions/Values/Number/nroot",[],[],{},[]),"Rascal/Expressions/Values/DateTime/LessThan":concept("Rascal/Expressions/Values/DateTime/LessThan",[],[],{"\<","datetime","bool"},[]),"Rascal/Libraries/Graph/reach":concept("Rascal/Libraries/Graph/reach",[],[],{},[]),"Rascal/Concepts/Visiting":concept("Rascal/Concepts/Visiting",["Ambiguous reference to concept: Rascal:Insert; \nResolve with one of {Rascal/Expressions/Values/List/Insert, Rascal/Expressions/Values/Set/Insert, Rascal/Statements/Insert}"],[],{},[]),"Rascal/Expressions/Values/Map/StrictSuperMap":concept("Rascal/Expressions/Values/Map/StrictSuperMap",[],[],{"\>","]",",","map","[","bool"},[]),"Rascal/Expressions/Values/Relation":concept("Rascal/Expressions/Values/Relation",[],[],{"\>","]","}",",","\<","[","{","rel"},[choiceQuestion("Rascal/Expressions/Values/Relation","1","  A relation:\n",[good("Is a set of tuples."),good("Has unordered elements."),good("Can not contain duplicates."),bad("Is a list of tuples."),bad("Is a tuple of tuples."),bad("Has ordered elements."),bad("Can contain duplicates."),bad("Has a fixed length.")])]),"Rascal/Libraries/Benchmark/benchmark":concept("Rascal/Libraries/Benchmark/benchmark",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hsize":concept("Rascal/Libraries/Vis/Figure/Properties/hsize",[],[],{},[]),"Rascal/Expressions/Values/String/toInt":concept("Rascal/Expressions/Values/String/toInt",[],[],{},[]),"Rascal/Expressions/Values/Node/getName":concept("Rascal/Expressions/Values/Node/getName",[],[],{},[]),"Rascal/Libraries/ValueIO/readBinaryValueFile":concept("Rascal/Libraries/ValueIO/readBinaryValueFile",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition/Disambiguation/Preceed":concept("Rascal/Declarations/SyntaxDefinition/Disambiguation/Preceed",[],[],{"!\<\<","\<\<"},[]),"Rascal/Libraries/Vis/Render":concept("Rascal/Libraries/Vis/Render",[],[],{";","Render","import","vis","::"},[]),"Rascal/Expressions/Values/List/size":concept("Rascal/Expressions/Values/List/size",[],[],{},[tvQuestion("Rascal/Expressions/Values/List/size","1",valueOfExpr(),details(" Create a list of the right size.\n",[],"import List;\nlist[str] text = ",";\n","size(text) == 3;","",true,false,[],[],void(),"")),tvQuestion("Rascal/Expressions/Values/List/size","2",valueOfExpr(),details(" Determine the number of elements in a list\n",[],"import List;\ntext = [\"abc\", \"def\", \"ghi\"];\n","","","(text) == 3;",false,true,[],[],void(),""))]),"Rascal/Expressions/Values/Relation/carrier":concept("Rascal/Expressions/Values/Relation/carrier",[],[],{},[]),"Rascal/Expressions/Values/Relation/TransitiveClosure":concept("Rascal/Expressions/Values/Relation/TransitiveClosure",[],[],{"]",",","+","[","rel"},[]),"Rascal/Expressions/Values/List/Append":concept("Rascal/Expressions/Values/List/Append",[],[],{"list","]",",","+","[","lub","(",")]"},[]),"Rascal/Expressions/Values/Map/range":concept("Rascal/Expressions/Values/Map/range",[],[],{},[]),"Rascal/Expressions/Values/Value/Conditional":concept("Rascal/Expressions/Values/Value/Conditional",[],[],{"?",",",":","bool",")","lub","("},[]),"Rascal/Libraries/Vis/Figure/Figures/hscreen":concept("Rascal/Libraries/Vis/Figure/Figures/hscreen",[],[],{},[]),"Rascal/Libraries/PriorityQueue/mkPriorityQueue":concept("Rascal/Libraries/PriorityQueue/mkPriorityQueue",[],[],{},[]),"Rascal/Expressions/Operators/FieldProjection":concept("Rascal/Expressions/Operators/FieldProjection",[],[],{"\>","\<",","},[]),"Rascal/Expressions/Values/Set/Union":concept("Rascal/Expressions/Values/Set/Union",[],[],{"]",",","+","[","lub","(",")]","set"},[choiceQuestion("Rascal/Expressions/Values/Set/Union","1","  When you compute the union of two sets, the number of elements in the result is always:\n",[good("Greater than or equal the number of elements in both sets."),bad("Greater than the number of elements in both sets."),bad("Smaller than the number of elements in both sets."),bad("Smaller than or equal the number of elements in both sets.")]),tvQuestion("Rascal/Expressions/Values/Set/Union","2",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,str,real]]\> + \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),real(-20,20)]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Union","3",valueOfExpr(),details(" ",[],"","","\<A:set[arb[int,str,real]]\> + \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),real(-20,20)]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Union","4",valueOfExpr(),details(" ",[],"","","\<A\> + "," == \<C\>",false,true,[<"A",set(arb(0,[int(-20,20),str()]))>,<"B",same("A")>],[<"C","\<A\> + \<B\>">],void(),"\<B\>")),tvQuestion("Rascal/Expressions/Values/Set/Union","5",valueOfExpr(),details(" ",[],"","","\<A:set[arb[0,int,str,num,real]]\> + \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),num(-20,20),real(-20,20)]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Libraries/Vis/Figure/Properties/fontSize":concept("Rascal/Libraries/Vis/Figure/Properties/fontSize",[],[],{},[]),"Rascal/Expressions/Values/Number/GreaterThan":concept("Rascal/Expressions/Values/Number/GreaterThan",[],[],{"int","real","\>","bool"},[tvQuestion("Rascal/Expressions/Values/Number/GreaterThan","1",typeOfExpr(),details(" ",[],"","","\<A:int\> \> \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThan","2",typeOfExpr(),details(" ",[],"","","\<A:real\> \> \<B:real\>","",false,false,[<"A",real(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThan","3",typeOfExpr(),details(" ",[],"","","\<A:num\> \> \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThan","4",typeOfExpr(),details(" ",[],"","","\<A:num\> \> \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThan","5",valueOfExpr(),details(" ",[],"","","\<A:num\> \> \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/List/toString":concept("Rascal/Expressions/Values/List/toString",[],[],{},[]),"Rascal/Expressions/Values/String/substring":concept("Rascal/Expressions/Values/String/substring",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/bottom":concept("Rascal/Libraries/Vis/Figure/Properties/bottom",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition/Disambiguation/Priority":concept("Rascal/Declarations/SyntaxDefinition/Disambiguation/Priority",[],[],{"\>","=","alt_2","|","(","syntax"},[]),"Rascal/Declarations/StaticTyping/TypeConstraints":concept("Rascal/Declarations/StaticTyping/TypeConstraints",[],[],{"\<:","&"},[]),"Rascal/Expressions/Values/Map/rangeX":concept("Rascal/Expressions/Values/Map/rangeX",[],[],{},[]),"Rascal/Libraries/Graph/reachX":concept("Rascal/Libraries/Graph/reachX",[],[],{},[]),"Rascal/Libraries/Java":concept("Rascal/Libraries/Java",[],[],{"bound","long","short","variable","|","/*1*/","super","(\"","field","class","Modifier","final","constr","int","static","lang","public","primitive","entity","initializer","method","Object","Bound","]","float","\\","[","wildcard","array","char","elementType","strictfp","double","package","\"),","enumConstant","nr","=",";","Id","extended","interface","deprecated","([",");","str","protected",",","data","parameter",")","boolean","\")]);","(","abstract","java","PrimitiveType","list","volatile","id","extends","native","synchronized","void","typeParameter","anonymousClass","name","transient","returnType","byte","null","params","private","Entity","()","enum","primType"},[]),"Rascal/Expressions/Values/Map/rangeR":concept("Rascal/Expressions/Values/Map/rangeR",[],[],{},[]),"Rascal/Libraries/Graph/reachR":concept("Rascal/Libraries/Graph/reachR",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/computeFigure":concept("Rascal/Libraries/Vis/Figure/Figures/computeFigure",[],[],{},[]),"Rascal/Expressions":concept("Rascal/Expressions",[],["Values","Operators"],{},[]),"Rascal/InstallingAndRunning":concept("Rascal/InstallingAndRunning",[],[],{},[]),"Rascal/Libraries/IDE/Plugin":concept("Rascal/Libraries/IDE/Plugin",[],[],{},[]),"Rascal/Expressions/Values/Boolean/Equivalence":concept("Rascal/Expressions/Values/Boolean/Equivalence",[],[],{"bool","\<==\>"},[]),"Rascal/Libraries/Vis/Figure/Properties/resizable":concept("Rascal/Libraries/Vis/Figure/Properties/resizable",[],[],{},[]),"Rascal/Patterns/Abstract/MultiVariable":concept("Rascal/Patterns/Abstract/MultiVariable",[],[],{"*"},[]),"Rascal/Expressions/Values/String/LessThanOrEqual":concept("Rascal/Expressions/Values/String/LessThanOrEqual",[],[],{"bool","\<=","str"},[]),"Rascal/Expressions/Values/Node/getAnnotations":concept("Rascal/Expressions/Values/Node/getAnnotations",[],[],{},[]),"Rascal/Expressions/Values/String/replaceFirst":concept("Rascal/Expressions/Values/String/replaceFirst",[],[],{},[]),"Rascal/Concepts/ImmutableValues":concept("Rascal/Concepts/ImmutableValues",[],[],{},[]),"Rascal/Libraries/Vis":concept("Rascal/Libraries/Vis",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/shrink":concept("Rascal/Libraries/Vis/Figure/Properties/shrink",[],[],{},[]),"Rascal/Expressions/Values/Set/isEmpty":concept("Rascal/Expressions/Values/Set/isEmpty",[],[],{},[]),"Rascal/Libraries/JDT/extractResource":concept("Rascal/Libraries/JDT/extractResource",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/gap":concept("Rascal/Libraries/Vis/Figure/Properties/gap",[],[],{},[]),"Rascal/Libraries/Vis/Figure/InteractionModel":concept("Rascal/Libraries/Vis/Figure/InteractionModel",[],[],{},[]),"Rascal/Expressions/Values/Number/Negation":concept("Rascal/Expressions/Values/Number/Negation",[],[],{"int","real","-"},[tvQuestion("Rascal/Expressions/Values/Number/Negation","1",typeOfExpr(),details(" ",[],"","","-\<A:int\>","",false,false,[<"A",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Negation","2",typeOfExpr(),details(" ",[],"","","-\<A:real\>","",false,false,[<"A",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Negation","3",valueOfExpr(),details(" ",[],"","","-\<A:num\>","",false,false,[<"A",num(-20,20)>],[],void(),""))]),"Rascal/Libraries/Graph":concept("Rascal/Libraries/Graph",[],[],{"];","Graph","=","]",",","to","[&",";","from","rel","&","import","T","alias"},[]),"Rascal/Libraries/Vis/Figure/ColorModel/colorNames":concept("Rascal/Libraries/Vis/Figure/ColorModel/colorNames",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/onMouseDown":concept("Rascal/Libraries/Vis/Figure/Properties/onMouseDown",[],[],{},[]),"Rascal/Expressions/Values/String/Equal":concept("Rascal/Expressions/Values/String/Equal",[],[],{"bool","str","=="},[]),"Rascal/Expressions/Comprehensions":concept("Rascal/Expressions/Comprehensions",[],[],{},[]),"Rascal/Expressions/Values/Map/NotEqual":concept("Rascal/Expressions/Values/Map/NotEqual",[],[],{"]","!=",",","map","[","bool"},[]),"Rascal/Expressions/Values/Number/GreaterThanOrEqual":concept("Rascal/Expressions/Values/Number/GreaterThanOrEqual",[],[],{"\>=","int","real","bool"},[tvQuestion("Rascal/Expressions/Values/Number/GreaterThanOrEqual","1",typeOfExpr(),details(" ",[],"","","\<A:int\> \>= \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThanOrEqual","2",typeOfExpr(),details(" ",[],"","","\<A:real\> \>= \<B:real\>","",false,false,[<"A",real(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThanOrEqual","3",typeOfExpr(),details(" ",[],"","","\<A:num\> \>= \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThanOrEqual","4",typeOfExpr(),details(" ",[],"","","\<A:num\> \>= \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/GreaterThanOrEqual","5",valueOfExpr(),details(" ",[],"","","\<A:num\> \>= \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/Number/pow":concept("Rascal/Expressions/Values/Number/pow",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/fromArrow":concept("Rascal/Libraries/Vis/Figure/Properties/fromArrow",[],[],{},[]),"Rascal/Expressions/Values/Set/Comprehension":concept("Rascal/Expressions/Values/Set/Comprehension",[],[],{"}","]","|",",","{","[",")","lub","(","set"},[]),"Rascal/Expressions/Values/Number/Subtraction":concept("Rascal/Expressions/Values/Number/Subtraction",[],[],{"int","real","-"},[tvQuestion("Rascal/Expressions/Values/Number/Subtraction","1",typeOfExpr(),details(" ",[],"","","\<A:int\> - \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Subtraction","2",typeOfExpr(),details(" ",[],"","","\<A:int\> - \<B:real\>","",false,false,[<"A",int(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Subtraction","3",typeOfExpr(),details(" ",[],"","","\<A:real\> - \<B:int\>","",false,false,[<"A",real(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Subtraction","4",valueOfExpr(),details(" ",[],"","","\<A:num\> - \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/Set/size":concept("Rascal/Expressions/Values/Set/size",[],[],{},[tvQuestion("Rascal/Expressions/Values/Set/size","1",valueOfExpr(),details(" ",["import Set;"],"","","size({ "," }) == \<N\>",false,true,[<"N",int(0,5)>],[],void(),"\<N\> values separated by commas"))]),"Rascal/Libraries/Vis/Figure/Figures/vcat":concept("Rascal/Libraries/Vis/Figure/Figures/vcat",[],[],{},[]),"Rascal/Expressions/Values/Number/min":concept("Rascal/Expressions/Values/Number/min",[],[],{},[tvQuestion("Rascal/Expressions/Values/Number/min","1",typeOfExpr(),details(" ",["import Number;"],"","","min(\<A:int\>, \<B:int\>)","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/min","2",typeOfExpr(),details(" ",["import Number;"],"","","min(\<A:int\>, \<B:real\>)","",false,false,[<"A",int(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/min","3",typeOfExpr(),details(" ",["import Number;"],"","","min(\<A:real\>, \<B:real\>)","",false,false,[<"A",real(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/min","4",valueOfExpr(),details(" ",["import Number;"],"","","min(\<A:num\>, \<B:num\>)","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/Boolean/Negation":concept("Rascal/Expressions/Values/Boolean/Negation",[],[],{"bool","!"},[]),"Rascal/Libraries/Resources/projects":concept("Rascal/Libraries/Resources/projects",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/tree":concept("Rascal/Libraries/Vis/Figure/Figures/tree",[],[],{},[]),"Rascal/Expressions/Values/List/Concatenation":concept("Rascal/Expressions/Values/List/Concatenation",[],[],{"list","]",",","+","[","lub","(",")]"},[choiceQuestion("Rascal/Expressions/Values/List/Concatenation","1","  When you compute the concatenation of two lists, the number of elements in the result is always:\n",[good("Greater than or equal the sum of the number of elements in both lists."),bad("Greater than the sum of the number of elements in both lists."),bad("Smaller than the sum of the number of elements in both lists."),bad("Equal to the sum of the elements in both lists.")]),tvQuestion("Rascal/Expressions/Values/List/Concatenation","2",typeOfExpr(),details(" ",[],"","","\<A:list[arb[int,str,real]]\> + \<B:same[A]\>","",false,false,[<"A",list(arb(0,[int(-20,20),str(),real(-20,20)]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/List/Concatenation","3",valueOfExpr(),details(" ",[],"","","\<A:list[arb[int,str,real]]\> + \<B:same[A]\>","",false,false,[<"A",list(arb(0,[int(-20,20),str(),real(-20,20)]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/List/Concatenation","4",valueOfExpr(),details(" ",[],"","","\<A\> + "," == \<C\>",false,true,[<"A",list(arb(0,[int(-20,20),str()]))>,<"B",same("A")>],[<"C","\<A\> + \<B\>">],void(),"\<B\>")),tvQuestion("Rascal/Expressions/Values/List/Concatenation","5",valueOfExpr(),details(" ",[],"","","\<A:set[arb[0,int,str,num,real]]\> + \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),num(-20,20),real(-20,20)]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/List/notin":concept("Rascal/Expressions/Values/List/notin",[],[],{"list","]","[","bool","notin"},[]),"Rascal/Libraries/Vis/Figure/Properties/fontItalic":concept("Rascal/Libraries/Vis/Figure/Properties/fontItalic",[],[],{},[]),"Rascal/Libraries/Vis/Figure/ColorModel/arbColor":concept("Rascal/Libraries/Vis/Figure/ColorModel/arbColor",[],[],{},[]),"Rascal/Expressions/Values/List/Difference":concept("Rascal/Expressions/Values/List/Difference",[],[],{"list","]","-",",","[","lub","(",")]"},[]),"Rascal/Expressions/Values/Location/FieldSelection":concept("Rascal/Expressions/Values/Location/FieldSelection",[],[],{".","loc"},[]),"Rascal/Statements/Return":concept("Rascal/Statements/Return",[],[],{";","return"},[]),"Rascal/Expressions/Values/List/Insert":concept("Rascal/Expressions/Values/List/Insert",[],[],{"list","]",",","+","[","lub","(",")]"},[]),"Rascal/Expressions/Values/Node/LessThan":concept("Rascal/Expressions/Values/Node/LessThan",[],[],{"\<","bool","node"},[]),"Rascal/Declarations/SyntaxDefinition/Disambiguation":concept("Rascal/Declarations/SyntaxDefinition/Disambiguation",[],[],{},[]),"Rascal/Libraries/Vis/Figure/ColorModel/colorSteps":concept("Rascal/Libraries/Vis/Figure/ColorModel/colorSteps",[],[],{},[]),"Rascal/Expressions/Values/Map":concept("Rascal/Expressions/Values/Map",[],[],{",","map","Map","[",":",")","lub","(","import",")]"},[choiceQuestion("Rascal/Expressions/Values/Map","1","  A map maps keys to values. In a map:\n",[good("All keys have to be unique."),good("All keys have the same type."),good("All keys should have the same type and all values should have the same type. The type of keys and values may be different."),bad("All keys should have the same type and all values should have the same type. The type of keys and values should be the same."),bad("All values have to be unique."),bad("All keys and values have to be unique."),bad("All keys are sorted.")]),tvQuestion("Rascal/Expressions/Values/Map","2",valueOfExpr(),details(" Complete this function that returns the set of keys with the smallest associated value.\n",[],"import Map;\nimport Set;\ninventory = (\"orange\" : 20, \"apple\" : 15, \"banana\" : 25, \"lemon\" : 15);\npublic set[str] lowest(map[str,int] inv){\n    m = ","; // Determine the minimal value in the map\n    return { s  | s \<- inv, inv[s] == m };\n}\n","lowest(inventory) == {\"apple\", \"lemon\"};","",true,false,[],[],void(),""))]),"Rascal/Libraries/LabeledGraph/predecessors":concept("Rascal/Libraries/LabeledGraph/predecessors",[],[],{},[]),"Rascal/Libraries/ParseTree/unparse":concept("Rascal/Libraries/ParseTree/unparse",[],[],{},[]),"Rascal/Expressions/Values/String/replaceLast":concept("Rascal/Expressions/Values/String/replaceLast",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hresizable":concept("Rascal/Libraries/Vis/Figure/Properties/hresizable",[],[],{},[]),"Rascal/Libraries/ValueIO":concept("Rascal/Libraries/ValueIO",[],[],{";","ValueIO","import"},[]),"Rascal/Expressions/Values/List/Equal":concept("Rascal/Expressions/Values/List/Equal",[],[],{"list","]","[","bool","=="},[tvQuestion("Rascal/Expressions/Values/List/Equal","1",typeOfExpr(),details(" ",[],"","","\<A:list[arb]\> == \<B:same[A]\>","",false,false,[<"A",list(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/List/min":concept("Rascal/Expressions/Values/List/min",[],[],{},[]),"Rascal/Expressions/Values/Relation/invert":concept("Rascal/Expressions/Values/Relation/invert",[],[],{},[]),"Rascal/Expressions/Values/List/reducer":concept("Rascal/Expressions/Values/List/reducer",[],[],{},[]),"Rascal/Libraries/IDE/ErrorMarking":concept("Rascal/Libraries/IDE/ErrorMarking",[],[],{"=","messages","l",";","message","t","@"},[]),"Rascal/Expressions/Values/String/escape":concept("Rascal/Expressions/Values/String/escape",[],[],{},[]),"Rascal/Expressions/Values/Number/toReal":concept("Rascal/Expressions/Values/Number/toReal",[],[],{},[]),"Rascal/Expressions/Values/Map/mapper":concept("Rascal/Expressions/Values/Map/mapper",[],[],{},[]),"Rascal/Expressions/Values/Map/SuperMap":concept("Rascal/Expressions/Values/Map/SuperMap",[],[],{"\>=","]",",","map","[","bool"},[]),"Rascal/Libraries/Message/error":concept("Rascal/Libraries/Message/error",[],[],{},[]),"Rascal/Concepts/StaticTyping":concept("Rascal/Concepts/StaticTyping",[],[],{},[]),"Rascal/Expressions/Values/String/LessThan":concept("Rascal/Expressions/Values/String/LessThan",[],[],{"\<","bool","str"},[]),"Rascal/Expressions/Values/Set/NotEqual":concept("Rascal/Expressions/Values/Set/NotEqual",[],[],{"]","!=","[","bool","set"},[tvQuestion("Rascal/Expressions/Values/Set/NotEqual","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> != \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Declarations/Annotation":concept("Rascal/Declarations/Annotation",[],[],{"anno","@"},[]),"Rascal/Declarations":concept("Rascal/Declarations",[],["Module","Import","Program","StaticTyping","AlgebraicDataType","Variable","Function","Syntaxdefinition","Alias","Annotation","Tag"],{},[]),"Rascal/Declarations/StaticTyping/TypeParameters":concept("Rascal/Declarations/StaticTyping/TypeParameters",[],[],{"&"},[]),"Rascal/Libraries/LabeledGraph/reach":concept("Rascal/Libraries/LabeledGraph/reach",[],[],{},[]),"Rascal/Libraries/LinearProgramming":concept("Rascal/Libraries/LinearProgramming",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/lineWidth":concept("Rascal/Libraries/Vis/Figure/Properties/lineWidth",[],[],{},[]),"Rascal/Expressions/Values/Set/min":concept("Rascal/Expressions/Values/Set/min",[],[],{},[]),"Rascal/Expressions/Values/Set/StrictSuperSet":concept("Rascal/Expressions/Values/Set/StrictSuperSet",[],[],{"\>","]","[","bool","set"},[tvQuestion("Rascal/Expressions/Values/Set/StrictSuperSet","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> \> \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/Node/GreaterThanOrEqual":concept("Rascal/Expressions/Values/Node/GreaterThanOrEqual",[],[],{"\>=","bool","node"},[]),"Rascal/Libraries/Vis/Figure/Properties/connect":concept("Rascal/Libraries/Vis/Figure/Properties/connect",[],[],{},[]),"Rascal/Expressions/Values/Location/Equal":concept("Rascal/Expressions/Values/Location/Equal",[],[],{"bool","==","loc"},[]),"Rascal/Expressions/Values/Number/Addition":concept("Rascal/Expressions/Values/Number/Addition",[],[],{"int","real","+"},[tvQuestion("Rascal/Expressions/Values/Number/Addition","1",typeOfExpr(),details(" Adding integers. \n",[],"","","\<A:int[0]\> + \<B:int[0]\>","",false,false,[<"A",int(0,20)>,<"B",int(0,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Addition","2",valueOfExpr(),details(" Adding integers. \n",[],"","","\<A:int[0]\> + \<B:int[0]\> ","",false,false,[<"A",int(0,20)>,<"B",int(0,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Addition","3",typeOfExpr(),details(" Adding integers and reals.\n",[],"","","\<A:int[0]\> + \<B:real[0]\>","",false,false,[<"A",int(0,20)>,<"B",real(0,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Addition","4",valueOfExpr(),details(" ",[],"","","\<A:int[0]\> + \<B:real[0]\> ","",false,false,[<"A",int(0,20)>,<"B",real(0,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Addition","5",valueOfExpr(),details(" Use parentheses when addition and negative numbers interact.\n",[],"","","\<A:int\> + (\<B:int[-20,-1]\>)","",false,false,[<"A",int(-20,20)>,<"B",int(-20,-1)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Addition","6",valueOfExpr(),details(" Use parentheses when addition and negative numbers interact.\n",[],"","","\<A\> + "," == \<C\>",false,true,[<"A",int(-20,20)>,<"B",int(0,10)>],[<"C","\<A\> - \<B\>">],void(),""))]),"Rascal/Libraries/IO/readFileBytes":concept("Rascal/Libraries/IO/readFileBytes",[],[],{},[]),"Rascal/Statements":concept("Rascal/Statements",[],[],{},[]),"Rascal/Expressions/Values/Relation/ReflexiveTransitiveClosure":concept("Rascal/Expressions/Values/Relation/ReflexiveTransitiveClosure",[],[],{"]",",","[","*","rel"},[]),"Rascal/Libraries/Vis/Figure/Figures/grid":concept("Rascal/Libraries/Vis/Figure/Figures/grid",[],[],{},[]),"Rascal/Libraries/LabeledGraph/successors":concept("Rascal/Libraries/LabeledGraph/successors",[],[],{},[]),"Rascal/Libraries/Vis/Render/render":concept("Rascal/Libraries/Vis/Render/render",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/checkbox":concept("Rascal/Libraries/Vis/Figure/Figures/checkbox",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/lineStyle":concept("Rascal/Libraries/Vis/Figure/Properties/lineStyle",[],[],{},[]),"Rascal/Libraries/IDE/DocumentationHover":concept("Rascal/Libraries/IDE/DocumentationHover",[],[],{"=","doc","t","@"},[]),"Rascal/Expressions/Values/String/center":concept("Rascal/Expressions/Values/String/center",[],[],{"int","n",",",")","(","center","pad","s","str"},[]),"Rascal/Expressions/Values/Node/setAnnotations":concept("Rascal/Expressions/Values/Node/setAnnotations",[],[],{},[]),"Rascal/Patterns/Abstract/TypeConstrained":concept("Rascal/Patterns/Abstract/TypeConstrained",[" add example"],[],{"]","["},[]),"Rascal/Expressions/Values/Number/ln":concept("Rascal/Expressions/Values/Number/ln",[],[],{},[]),"Rascal/Libraries/PriorityQueue":concept("Rascal/Libraries/PriorityQueue",[],[],{"PriorityQueue",";","import"},[]),"Rascal/Expressions/Values/Relation/ident":concept("Rascal/Expressions/Values/Relation/ident",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/vresizable":concept("Rascal/Libraries/Vis/Figure/Properties/vresizable",[],[],{},[]),"Rascal/Expressions/Values/Map/invertUnique":concept("Rascal/Expressions/Values/Map/invertUnique",[],[],{},[]),"Rascal/Expressions/Values/Set/power1":concept("Rascal/Expressions/Values/Set/power1",[],[],{},[]),"Rascal/Expressions/Values/Map/StrictSubMap":concept("Rascal/Expressions/Values/Map/StrictSubMap",[],[],{"]","\<",",","map","[","bool"},[]),"Rascal/Expressions/Values/Number/LessThan":concept("Rascal/Expressions/Values/Number/LessThan",[],[],{"int","real","\<","bool"},[tvQuestion("Rascal/Expressions/Values/Number/LessThan","1",typeOfExpr(),details(" ",[],"","","\<A:int\> \< \<A:int\>","",false,false,[<"A",int(-20,20)>,<"A",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThan","2",typeOfExpr(),details(" ",[],"","","\<A:real\> \< \<B:real\>","",false,false,[<"A",real(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThan","3",typeOfExpr(),details(" ",[],"","","\<A:num\> \< \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThan","4",typeOfExpr(),details(" ",[],"","","\<A:num\> \< \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThan","5",valueOfExpr(),details(" ",[],"","","\<A:num\> \< \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/String":concept("Rascal/Expressions/Values/String",[],[],{"\>","\<}\>","if","\<","\\","else","\'\\\\","u",")\>","...\"","t","\\0","r","while","String","str","n","){\>","{\>...","do","for","(","f","import","{\>","\"","b","){\>...","\<}"},[]),"Rascal/Patterns/Abstract/List":concept("Rascal/Patterns/Abstract/List",[],[],{"]",",","["},[tvQuestion("Rascal/Patterns/Abstract/List","1",valueOfExpr(),details(" Complete this function that tests that a list of words consists of two identical sublists:\n",[],"import List;\npublic bool isReplicated(list[str] words){\n  return [list[str] L, ","] := words;\n}\n","isReplicated([\"a\", \"b\", \"a\", \"b\"]) == true;","",true,false,[],[],void(),""))]),"Rascal/Libraries/Vis/Figure/Properties/shapeConnected":concept("Rascal/Libraries/Vis/Figure/Properties/shapeConnected",[],[],{},[]),"Rascal/Expressions/Values/Value/Equal":concept("Rascal/Expressions/Values/Value/Equal",[],[],{"bool","value","=="},[]),"Rascal/Libraries/Vis/Figure/CompositionModel":concept("Rascal/Libraries/Vis/Figure/CompositionModel",[],[],{},[]),"Rascal/Libraries/ValueIO/writeBinaryValueFile":concept("Rascal/Libraries/ValueIO/writeBinaryValueFile",[],[],{},[]),"Rascal/Libraries/JDT/JavaADT":concept("Rascal/Libraries/JDT/JavaADT",[],[],{"(&","fieldAccess","leftSide","bodyDeclarations","isVarargs","Modifier","qualifiedType","singleVariableDeclaration","some","tryStatement","label","lang","postfixExpression","superMethodInvocation","parameters","bool","compilationUnit","primitive","typeName","statements","instanceofExpression","initializer","genericTypes","booleanExpression","stringValue","typeDeclaration","//","expressions","optionalQualifierString","methodDeclaration","extendsList","collectionExpression","javadoc","thisExpression","ifStatement","thenStatement","index","initializers","singleMemberAnnotation","variableDeclarationFragment","assignment","dimensions","defaultBlock","lineComment","updaters","prefixExpression","operand","assertStatement","arrayInitializer","primitiveType","conditionalExpression","synchronizedStatement","charValue","Expressions","enumDeclaration","isDefault","expressionStatement","Javadoc","opt","staticImport","implementation","variableDeclarationStatement","annotationTypeDeclaration","implements","data","qualifier","catchClauses","whileExpression","parameter","boolValue","forStatement","operator","body","emptyStatement","list","switchStatement","memberRef","extends","expression","variableDeclarationExpression","importDeclaration","Option","parameterizedType","rightSide","typeDeclarations","typeParameter","block","name","returnType","continueStatement","infixExpression","switchCase","AstNode","finally","superFieldAccess","bound","modifiers","|","jdt","annotationTypeMemberDeclaration","normalAnnotation","enumConstantDeclaration","parenthesizedExpression","value","memberValuePair","typeDeclarationStatement","superConstructorInvocation","anonymousClassDeclaration","imports","booleanLiteral","optionalBooleanExpression","stringLiteral","simpleName","]","typeOfParam","\\","[","Types","array","Declarations","arrayCreation","arguments","possibleExceptions","T","packageDeclaration","methodInvocation","exception","enumConstants","number","qualifiedName","characterLiteral","package","::","whileStatement","=","enhancedForStatement",";","elseBranch","type","none","castExpression","elseStatement","wildcardType","arrayType","str","breakStatement","classInstanceCreation",",","[&","optionalQualifier","constructorInvocation","throwStatement",")","typeOfArray","nullLiteral","(","numberLiteral","doStatement","annotations","extendedOperands","fragments","memberValuePairs","java","fieldDeclaration","returnStatement","thenBranch","arrayAccess","labeledStatement","objectType","optionalExpression","typeArgument","typeLiteral","Comments","blockComment","memberRefParameter","textElement","JavaADT","simpleType","typedArguments","catchClause","onDemand","markerAnnotation","message","Statements","tagElement","()"},[]),"Rascal/Declarations/Module":concept("Rascal/Declarations/Module",[],[],{"module",";"},[]),"Rascal/Expressions/Values/Map/Comprehension":concept("Rascal/Expressions/Values/Map/Comprehension",[],[],{"]","map",",","|","[",":",")","("},[]),"Rascal/Concepts/IDEConstruction":concept("Rascal/Concepts/IDEConstruction",[],[],{},[]),"Rascal/Libraries/Scripting":concept("Rascal/Libraries/Scripting",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition/Disambiguation/Reserve":concept("Rascal/Declarations/SyntaxDefinition/Disambiguation/Reserve",[],[],{"\\"},[]),"Rascal/Libraries/Vis/Figure/Properties/vgap":concept("Rascal/Libraries/Vis/Figure/Properties/vgap",[],[],{},[]),"Rascal/Expressions/Values/DateTime/GreaterThanOrEqual":concept("Rascal/Expressions/Values/DateTime/GreaterThanOrEqual",[],[],{"\>=","datetime","bool"},[]),"Rascal/Libraries/IDE/Menus":concept("Rascal/Libraries/IDE/Menus",[],[],{},[]),"Rascal/Expressions/Values/Tuple/FieldSelection":concept("Rascal/Expressions/Values/Tuple/FieldSelection",[],[],{".","]",",","[","tuple"},[]),"Rascal/Patterns/Concrete":concept("Rascal/Patterns/Concrete",[],[],{"\>","\<",")","(","`"},[]),"Rascal/Libraries/Vis/Figure/Properties/std":concept("Rascal/Libraries/Vis/Figure/Properties/std",[],[],{},[]),"Rascal/Expressions/Values/Number/LessThanOrEqual":concept("Rascal/Expressions/Values/Number/LessThanOrEqual",[],[],{"int","real","bool","\<="},[tvQuestion("Rascal/Expressions/Values/Number/LessThanOrEqual","1",typeOfExpr(),details("",[],"","","\<A:int\> \<= \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThanOrEqual","2",typeOfExpr(),details(" ",[],"","","\<A:real\> \<= \<B:real\>","",false,false,[<"A",real(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThanOrEqual","3",typeOfExpr(),details(" ",[],"","","\<A:num\> \<= \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThanOrEqual","4",typeOfExpr(),details(" ",[],"","","\<A:num\> \<= \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/LessThanOrEqual","5",valueOfExpr(),details(" ",[],"","","\<A:num\> \<= \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/Map/Difference":concept("Rascal/Expressions/Values/Map/Difference",[],[],{"]","-",",","map","[","lub","(",")]","),"},[]),"Rascal/Statements/Fail":concept("Rascal/Statements/Fail",[],[],{"fail",";"},[]),"Rascal/Patterns/Abstract/Descendant":concept("Rascal/Patterns/Abstract/Descendant",["Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}"],[],{"/"},[]),"Rascal/Libraries/Vis/Figure/Properties/hint":concept("Rascal/Libraries/Vis/Figure/Properties/hint",[],[],{},[]),"Rascal/Expressions/ConcreteSyntax":concept("Rascal/Expressions/ConcreteSyntax",[],[],{"=","\\","X","\"\<\"","\"\>\";","syntax","Pattern","p"},[]),"Rascal/Expressions/Values/List/mapper":concept("Rascal/Expressions/Values/List/mapper",[],[],{},[]),"Rascal/Libraries/Vis/Figure/KeyModifier":concept("Rascal/Libraries/Vis/Figure/KeyModifier",[],[],{"modCtrl","=","|","();","data","modCommand","KeySym","modAlt","KeyModifier","import","()","modShift","::","vis"},[]),"Rascal/Patterns/Regular":concept("Rascal/Patterns/Regular",[],[],{"/"},[tvQuestion("Rascal/Patterns/Regular","1",valueOfExpr(),details(" Return the strings that contain \"o\".\n",[],"text = [\"andra\", \"moi\", \"ennepe\", \"Mousa\", \"polutropon\"];\npublic list[str] find(list[str] text){\n  return \n    for(s \<- text)\n      if(/o/ := s)\n        ",";\n}\n","find(text) == [\"moi\", \"Mousa\", \"polutropon\"];","",true,false,[],[],void(),""))]),"Rascal/Expressions/Values/Tuple":concept("Rascal/Expressions/Values/Tuple",[],[],{"\>","]","\<",",","[","tuple"},[choiceQuestion("Rascal/Expressions/Values/Tuple","1","  In a tuple:\n",[good("All elements may have different types."),good("The number of elements is not fixed."),good("The order of the elements is relevant."),bad("All elements should have the same type."),bad("The number of elements is fixed."),bad("The order of the elements is not relevant.")])]),"Rascal/Libraries/Vis/Figure/Figures/button":concept("Rascal/Libraries/Vis/Figure/Figures/button",[],[],{},[]),"Rascal/Expressions/Values/DateTime/FieldSelection":concept("Rascal/Expressions/Values/DateTime/FieldSelection",[],[],{".","datetime"},[]),"Rascal/Declarations/Variable":concept("Rascal/Declarations/Variable",[],[],{"\<:","=",";"},[]),"Rascal/Libraries/IO/writeFile":concept("Rascal/Libraries/IO/writeFile",[],[],{},[]),"Rascal/Expressions/Values/Boolean/IfDefinedElse":concept("Rascal/Expressions/Values/Boolean/IfDefinedElse",[],[],{"?","\<:"},[]),"Rascal/Libraries/Vis/Figure/ColorModel/interpolateColor":concept("Rascal/Libraries/Vis/Figure/ColorModel/interpolateColor",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/timer":concept("Rascal/Libraries/Vis/Figure/Properties/timer",[],[],{},[]),"Rascal/Expressions/Values/Map/size":concept("Rascal/Expressions/Values/Map/size",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/height":concept("Rascal/Libraries/Vis/Figure/Properties/height",[],[],{},[]),"Rascal/Libraries/IO/mkDirectory":concept("Rascal/Libraries/IO/mkDirectory",[],[],{},[]),"Rascal/Expressions/Values/Map/toList":concept("Rascal/Expressions/Values/Map/toList",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/onMouseMove":concept("Rascal/Libraries/Vis/Figure/Properties/onMouseMove",[],[],{},[]),"Rascal/Concepts/Functions":concept("Rascal/Concepts/Functions",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/shadow":concept("Rascal/Libraries/Vis/Figure/Properties/shadow",[],[],{},[]),"Rascal/Patterns/Abstract/VariableDeclaration":concept("Rascal/Patterns/Abstract/VariableDeclaration",[],[],{},[]),"Rascal/Expressions/Values/Map/toRel":concept("Rascal/Expressions/Values/Map/toRel",[],[],{},[]),"Rascal/Libraries/ParseTree/implode":concept("Rascal/Libraries/ParseTree/implode",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hshrink":concept("Rascal/Libraries/Vis/Figure/Properties/hshrink",[],[],{},[]),"Rascal/Expressions/Values/Number/cos":concept("Rascal/Expressions/Values/Number/cos",[],[],{},[]),"Rascal/Libraries/IO/isFile":concept("Rascal/Libraries/IO/isFile",[],[],{},[]),"Rascal/Libraries/Maybe":concept("Rascal/Libraries/Maybe",[],[],{"(&","]","=","nothing","|","just","[&","data","Maybe",");","A","()","val"},[]),"Rascal/Expressions/Values/String/toUpperCase":concept("Rascal/Expressions/Values/String/toUpperCase",[],[],{},[]),"Rascal/Expressions/Values/List/takeOneFrom":concept("Rascal/Expressions/Values/List/takeOneFrom",[],[],{},[]),"Rascal/Expressions/Values/List/Comprehension":concept("Rascal/Expressions/Values/List/Comprehension",[],[],{"list","]","|",",","[",")","lub","("},[tvQuestion("Rascal/Expressions/Values/List/Comprehension","1",valueOfExpr(),details(" Return the strings that contain a given substring.\n",[],"text = [\"An\", \"honest\", \"man\", \"is\", \"always\", \"a\", \"child\"]; \npublic list[str] find(list[str] text, str contains) = [ s | s \<- text, "," ];\n","find(text, \"n\") == [\"An\", \"honest\", \"man\"];","",true,false,[],[],void(),""))]),"Rascal/Patterns/Abstract/Tuple":concept("Rascal/Patterns/Abstract/Tuple",[],[],{"\>","\<",","},[]),"Rascal/Libraries/LabeledGraph/shortestPathPair":concept("Rascal/Libraries/LabeledGraph/shortestPathPair",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Angles":concept("Rascal/Libraries/Vis/Figure/Angles",[],[],{},[]),"Rascal/Contents":concept("Rascal/Contents",[],[],{},[]),"Rascal/Expressions/Values/Map/isEmpty":concept("Rascal/Expressions/Values/Map/isEmpty",[],[],{},[]),"Rascal/Expressions/Values/DateTime/Equal":concept("Rascal/Expressions/Values/DateTime/Equal",[],[],{"datetime","bool","=="},[]),"Rascal/Expressions/Values/String/right":concept("Rascal/Expressions/Values/String/right",[],[],{},[]),"Rascal/Expressions/Values/Number/max":concept("Rascal/Expressions/Values/Number/max",[],[],{},[tvQuestion("Rascal/Expressions/Values/Number/max","1",typeOfExpr(),details(" ",["import Number;"],"","","max(\<A:int\>, \<B:int\>)","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/max","2",typeOfExpr(),details(" ",["import Number;"],"","","max(\<A:int\>, \<B:real\>)","",false,false,[<"A",int(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/max","3",valueOfExpr(),details(" ",["import Number;"],"","","max(\<A:num\>, \<B:num\>)","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/max","4",valueOfExpr(),details(" ",["import Number;"],"","","max(\<A\>, ",") == \<C\>",false,true,[<"A",num(-20,20)>,<"B",num(0,20)>],[<"C","\<A\> + \<B\>">],void(),"\<C\>")),tvQuestion("Rascal/Expressions/Values/Number/max","5",valueOfExpr(),details(" ",["import Number;"],"","","max(\<A\>, ",") == \<A\>",false,true,[<"A",num(-20,20)>],[],void(),"any value smaller than \<A\>"))]),"Rascal/Concepts":concept("Rascal/Concepts",[],["StaticTyping","Datatypes","ImmutableValues","Comprehensions","PatternMatching","ControlStructures","CaseDistinction","Visiting","Enumerators","Functions","SyntaxDefinitionAndParsing","RewriteRules","IDEConstruction"],{},[]),"Rascal/Libraries/Vis/Figure/Properties/vcenter":concept("Rascal/Libraries/Vis/Figure/Properties/vcenter",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/vconnect":concept("Rascal/Libraries/Vis/Figure/Properties/vconnect",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/vstartGap":concept("Rascal/Libraries/Vis/Figure/Properties/vstartGap",[],[],{},[]),"Rascal/Concepts/SyntaxDefinitionAndParsing":concept("Rascal/Concepts/SyntaxDefinitionAndParsing",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/align":concept("Rascal/Libraries/Vis/Figure/Properties/align",[],[],{},[]),"Rascal/Expressions/Values/Set/takeOneFrom":concept("Rascal/Expressions/Values/Set/takeOneFrom",[],[],{},[]),"Rascal/Statements/TryCatch":concept("Rascal/Statements/TryCatch",[],[],{"catch",";","try",":","finally"},[]),"Rascal/Libraries/Vis/Figure/Figures/LineDecoration":concept("Rascal/Libraries/Vis/Figure/Figures/LineDecoration",[],[],{"=","lineNumber","warning","|",";","highlight","str","int","info",",","data","public",")","error","(","level","LineDecoration","msg"},[]),"Rascal/Expressions/Values/String/startsWith":concept("Rascal/Expressions/Values/String/startsWith",[],[],{},[]),"Rascal/Expressions/Values/Boolean/Implication":concept("Rascal/Expressions/Values/Boolean/Implication",[],[],{"==\>","bool"},[]),"Rascal/Expressions/Values/Number/toString":concept("Rascal/Expressions/Values/Number/toString",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/label":concept("Rascal/Libraries/Vis/Figure/Properties/label",[],[],{},[]),"Rascal/Statements/Break":concept("Rascal/Statements/Break",[],[],{"break",";"},[]),"Rascal/Expressions/Values/Map/Intersection":concept("Rascal/Expressions/Values/Map/Intersection",[],[],{"]","map",",","[","lub","(","&",")]","set"},[]),"Rascal/Expressions/Values/Set":concept("Rascal/Expressions/Values/Set",[],[],{"}","]",",","{","[",")","lub","(","import","set","Set"},[choiceQuestion("Rascal/Expressions/Values/Set","1","  Sets can be used to represent a sequence of values when\n",[good("The values have no duplicates and no order."),bad("The values have duplicates."),bad("The values are unordered.")]),choiceQuestion("Rascal/Expressions/Values/Set","2","  The type of a set is determined by:\n",[good("The least upperbound of the type of all elements."),good("The types of all the elements in the set."),bad("The type of the element that was first added to the set."),bad("The average of the type of the elements with the smallest and the largests type."),bad("The least upperbound of the type of two arbitrary elements."),bad("The type of two arbitrary elements.")]),tvQuestion("Rascal/Expressions/Values/Set","3",typeOfExpr(),details(" ",[],"","","{1, "," }",false,true,[],[],set(int(-20,20)),"one or more integer values separated by commas")),tvQuestion("Rascal/Expressions/Values/Set","4",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set","5",typeOfExpr(),details(" ",[],"","","{\<A:int\>, \<B:str\>, \<C:int\>}","",false,false,[<"A",int(-20,20)>,<"B",str()>,<"C",int(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/String/contains":concept("Rascal/Expressions/Values/String/contains",[],[],{},[]),"Rascal/Patterns":concept("Rascal/Patterns",[],[],{},[]),"Rascal/Expressions/Values/List/max":concept("Rascal/Expressions/Values/List/max",[],[],{},[]),"Rascal/Expressions/Values/Boolean/toString":concept("Rascal/Expressions/Values/Boolean/toString",[],[],{},[]),"Rascal/Expressions/Values/Location/NotEqual":concept("Rascal/Expressions/Values/Location/NotEqual",[],[],{"!=","bool","loc"},[]),"Rascal/Libraries/Resources/root":concept("Rascal/Libraries/Resources/root",[],[],{},[]),"Rascal/Expressions/Values/List/reverse":concept("Rascal/Expressions/Values/List/reverse",[],[],{},[]),"Rascal/Libraries/IO/listEntries":concept("Rascal/Libraries/IO/listEntries",[],[],{},[]),"Rascal/Statements/If":concept("Rascal/Statements/If",[],[],{"if",",",";","bool","lub","else",")","(","void"},[tvQuestion("Rascal/Statements/If","1",typeOfExpr(),details(" ",[],"","","if( \<A:int\> \> \<B:int\> ) 10; else 20;","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Statements/If","2",typeOfExpr(),details(" ",[],"","","if( \<A:int\> \> \<B:int\> ) \<C:str\>; else \<D:str\>;","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>,<"C",str()>,<"D",str()>],[],void(),"")),tvQuestion("Rascal/Statements/If","3",valueOfExpr(),details(" ",[],"","","if( \<A:int\> \> \<B:int\> ) 10; else 20;","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/List/SubList":concept("Rascal/Expressions/Values/List/SubList",[],[],{"list","]","[","bool","\<="},[tvQuestion("Rascal/Expressions/Values/List/SubList","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> \<= \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/Relation/range":concept("Rascal/Expressions/Values/Relation/range",["Unknown or ambiguous concept Rascal/Expressions/Values/Relation/domain"],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hconnect":concept("Rascal/Libraries/Vis/Figure/Properties/hconnect",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/aspectRatio":concept("Rascal/Libraries/Vis/Figure/Properties/aspectRatio",[],[],{},[]),"Rascal/Expressions/Selection":concept("Rascal/Expressions/Selection",[],[],{"\<:","node","@"},[]),"Rascal/Expressions/Reducer":concept("Rascal/Expressions/Reducer",[],[],{"|",",",")","("},[tvQuestion("Rascal/Expressions/Reducer","1",valueOfExpr(),details(" Return the set of largest words.\n",[],"import Number;\nimport String;\ntext = [\"Quote\", \"from\", \"Steve\", \"Jobs\", \":\", \"And\", \"one\", \"more\", \"thing\"];\npublic list[str] largest(list[str] text){\n  mx = ( 0 | max(it, size(s)) | s \<- text );\n  return\n    for(s \<- text)\n        if(",")\n           append s;\n}\n","largest(text) == [\"Quote\", \"Steve\", \"thing\"];","",true,false,[],[],void(),""))]),"Rascal/Expressions/Values/List/StrictSuperList":concept("Rascal/Expressions/Values/List/StrictSuperList",[],[],{"\>","list","]","[","bool"},[tvQuestion("Rascal/Expressions/Values/List/StrictSuperList","1",typeOfExpr(),details(" ",[],"","","\<A:list[arb]\> \> \<B:same[A]\>","",false,false,[<"A",list(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/Location/LessThanOrEqual":concept("Rascal/Expressions/Values/Location/LessThanOrEqual",[],[],{"bool","\<=","loc"},[]),"Rascal/Expressions/Values/Relation/FieldSelection":concept("Rascal/Expressions/Values/Relation/FieldSelection",[],[],{".","]",",","[","rel","set"},[]),"Rascal/Libraries/Vis/Figure/Properties/fontBold":concept("Rascal/Libraries/Vis/Figure/Properties/fontBold",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/hcat":concept("Rascal/Libraries/Vis/Figure/Figures/hcat",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/combo":concept("Rascal/Libraries/Vis/Figure/Figures/combo",[],[],{},[]),"Rascal/Libraries/Vis/Figure/ColorModel/gray":concept("Rascal/Libraries/Vis/Figure/ColorModel/gray",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/box":concept("Rascal/Libraries/Vis/Figure/Figures/box",[],[],{},[]),"Rascal/Expressions/Values/List/delete":concept("Rascal/Expressions/Values/List/delete",[],[],{},[]),"Rascal/Patterns/PatternWithAction":concept("Rascal/Patterns/PatternWithAction",["Ambiguous reference to concept: Rascal:Insert; \nResolve with one of {Rascal/Expressions/Values/List/Insert, Rascal/Expressions/Values/Set/Insert, Rascal/Statements/Insert}"],[],{":","=\>"},[]),"Rascal/InstallingAndRunning/Running":concept("Rascal/InstallingAndRunning/Running",[],[],{},[]),"Rascal/Expressions/Values/Set/max":concept("Rascal/Expressions/Values/Set/max",[],[],{},[]),"Rascal/InstallingAndRunning/Installing":concept("Rascal/InstallingAndRunning/Installing",[],[],{},[]),"Rascal/Libraries/Vis/Render/renderSave":concept("Rascal/Libraries/Vis/Render/renderSave",[],[],{},[]),"Rascal/Libraries/IO/println":concept("Rascal/Libraries/IO/println",[],[],{},[]),"Rascal/Expressions/Values/Boolean/Or":concept("Rascal/Expressions/Values/Boolean/Or",[],[],{"bool","||"},[]),"Rascal/Expressions/Values/Number":concept("Rascal/Expressions/Values/Number",[],[],{"int","real","Number","num","import"},[]),"Rascal/Expressions/Values/Tuple/Concatenation":concept("Rascal/Expressions/Values/Tuple/Concatenation",[],[],{"\>","]",",","[","+","tuple"},[]),"Rascal/Libraries/IDE/Hyperlinking":concept("Rascal/Libraries/IDE/Hyperlinking",[],[],{"=","link","links","t","@"},[]),"Rascal/Expressions/Values":concept("Rascal/Expressions/Values",[],[],{},[]),"Rascal/Expressions/Values/Relation/rangeX":concept("Rascal/Expressions/Values/Relation/rangeX",[],[],{},[]),"Rascal/Expressions/Values/Number/Multiplication":concept("Rascal/Expressions/Values/Number/Multiplication",[],[],{"int","real","*"},[tvQuestion("Rascal/Expressions/Values/Number/Multiplication","1",typeOfExpr(),details(" ",[],"","","\<A:int\> * \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Multiplication","2",typeOfExpr(),details(" ",[],"","","\<A:int\> * \<B:real\>","",false,false,[<"A",int(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Multiplication","3",typeOfExpr(),details(" ",[],"","","\<A:real\> * \<B:int\>","",false,false,[<"A",real(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Multiplication","4",valueOfExpr(),details(" ",[],"","","\<A:num\> * \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/DateTime/LessThanOrEqual":concept("Rascal/Expressions/Values/DateTime/LessThanOrEqual",[],[],{"datetime","bool","\<="},[]),"Rascal/Libraries/Vis/Figure/Properties/vendGap":concept("Rascal/Libraries/Vis/Figure/Properties/vendGap",[],[],{},[]),"Rascal/Expressions/Values/Relation/rangeR":concept("Rascal/Expressions/Values/Relation/rangeR",[],[],{},[]),"Rascal/Expressions/Values/Number/sqrt":concept("Rascal/Expressions/Values/Number/sqrt",[],[],{},[]),"Rascal/Concepts/Datatypes":concept("Rascal/Concepts/Datatypes",[],[],{},[]),"Rascal/Libraries/IDE":concept("Rascal/Libraries/IDE",[],[],{";","IDE","import","util","::"},[]),"Rascal/Expressions/Values/Set/Product":concept("Rascal/Expressions/Values/Set/Product",[],[],{"]",",","[","*","rel","set"},[tvQuestion("Rascal/Expressions/Values/Set/Product","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,str]]\> * \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str()]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Product","2",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> * \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Product","3",valueOfExpr(),details(" ",[],"","","\<A:set[arb[0,int,str,num,real]]\> * \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),num(-20,20),real(-20,20)]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/List/insertAt":concept("Rascal/Expressions/Values/List/insertAt",[],[],{},[]),"Rascal/Expressions/Values/Relation/complement":concept("Rascal/Expressions/Values/Relation/complement",[],[],{},[]),"Rascal/Expressions/Values/Set/power":concept("Rascal/Expressions/Values/Set/power",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/top":concept("Rascal/Libraries/Vis/Figure/Properties/top",[],[],{},[]),"Rascal/Expressions/Values/Set/Insert":concept("Rascal/Expressions/Values/Set/Insert",[],[],{"]",",","+","[","lub","(",")]","set"},[]),"Rascal/Libraries/Vis/Figure/Properties/shadowPos":concept("Rascal/Libraries/Vis/Figure/Properties/shadowPos",[],[],{},[]),"Rascal/Expressions/Values/List/toMapUnique":concept("Rascal/Expressions/Values/List/toMapUnique",[],[],{},[]),"Rascal/Expressions/Values/Value/NotEqual":concept("Rascal/Expressions/Values/Value/NotEqual",[],[],{"!=","bool","value"},[]),"Rascal/Libraries/Vis/Figure/ColorModel/palette":concept("Rascal/Libraries/Vis/Figure/ColorModel/palette",[],[],{},[]),"Rascal/Statements/Assignment":concept("Rascal/Statements/Assignment",[],[],{"?","/=",".","?=","\>","=","]",",","\<","[",")","(","*=","+=","@","-="},[]),"Rascal/Declarations/SyntaxDefinition/Disambiguation/Follow":concept("Rascal/Declarations/SyntaxDefinition/Disambiguation/Follow",[],[],{"!\>\>","\>\>"},[]),"Rascal/Concepts/PatternMatching":concept("Rascal/Concepts/PatternMatching",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures":concept("Rascal/Libraries/Vis/Figure/Figures",[],[],{"Figures","];","list","=","[","Figure","alias"},[]),"Rascal/Libraries/Vis/Figure/Figures/graph":concept("Rascal/Libraries/Vis/Figure/Figures/graph",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/scale":concept("Rascal/Libraries/Vis/Figure/Figures/scale",[],[],{},[]),"Rascal/Expressions/Values/Value/GreaterThan":concept("Rascal/Expressions/Values/Value/GreaterThan",["Rascal implementation: broken","Static Error: prompt:///:1,0: \> not supported on value and valueStatic Error: prompt:///:1,0: \> not supported on value and value"],[],{"\>","bool","value"},[]),"Rascal/Expressions/Values/Set/SuperSet":concept("Rascal/Expressions/Values/Set/SuperSet",[],[],{"\>=","]","[","bool","set"},[tvQuestion("Rascal/Expressions/Values/Set/SuperSet","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> \>= \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Statements/Block":concept("Rascal/Statements/Block",[],[],{"}","{",";"},[]),"Rascal/Expressions/Values/Number/sin":concept("Rascal/Expressions/Values/Number/sin",[],[],{},[]),"Rascal/Expressions/Values/Constructor":concept("Rascal/Expressions/Values/Constructor",[],[],{",",")","("},[]),"Rascal/Libraries/Vis/Figure/Properties/manhattan":concept("Rascal/Libraries/Vis/Figure/Properties/manhattan",[],[],{},[]),"Rascal/Expressions/Values/Node/GreaterThan":concept("Rascal/Expressions/Values/Node/GreaterThan",[],[],{"\>","bool","node"},[]),"Rascal/Expressions/Values/Set/toMap":concept("Rascal/Expressions/Values/Set/toMap",[],[],{},[]),"Rascal/Expressions/Values/Boolean/arbBool":concept("Rascal/Expressions/Values/Boolean/arbBool",[],[],{},[]),"Rascal/Libraries/JDT":concept("Rascal/Libraries/JDT",[],[],{"declaredTopTypes","modifiers","to","types","constructors","fields","Modifier","variables","AstNodeRel","BindingRel","declaredSubTypes","methods","implements","fieldDecls","packages",",","from","methodDecls","classes","entity","body","ModifierRel","set","method","EntitySet","]","[","extends","rel","declaredMethods","modifier","EntityRel","calls","AstNode","Entity","methodBodies","loc"},[]),"Rascal/Libraries/Vis/Figure/Figures/treemap":concept("Rascal/Libraries/Vis/Figure/Figures/treemap",[],[],{},[]),"Rascal/Patterns/Abstract/Labelled":concept("Rascal/Patterns/Abstract/Labelled",[],[],{":"},[]),"Rascal/Patterns/Abstract/TypedLabelled":concept("Rascal/Patterns/Abstract/TypedLabelled",[" add example"],[],{":"},[]),"Rascal/Libraries/Vis/Figure/Figures/pack":concept("Rascal/Libraries/Vis/Figure/Figures/pack",[],[],{},[]),"Rascal/Libraries/ValueIO/readTextValueFile":concept("Rascal/Libraries/ValueIO/readTextValueFile",[],[],{},[]),"Rascal/Expressions/Values/Node":concept("Rascal/Expressions/Values/Node",[],[],{",",")","(","import","node","Node","value","str"},[]),"Rascal/Expressions/Values/Set/toMapUnique":concept("Rascal/Expressions/Values/Set/toMapUnique",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/center":concept("Rascal/Libraries/Vis/Figure/Properties/center",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/startGap":concept("Rascal/Libraries/Vis/Figure/Properties/startGap",[],[],{},[]),"Rascal/Expressions/Values/String/findFirst":concept("Rascal/Expressions/Values/String/findFirst",[],[],{},[]),"Rascal/Libraries/IO/lastModified":concept("Rascal/Libraries/IO/lastModified",[],[],{},[]),"Rascal/Expressions/Values/Relation/Composition":concept("Rascal/Expressions/Values/Relation/Composition",[],[],{"o","]",",","[","rel"},[]),"Rascal/Libraries/Vis/Figure/Properties/valign":concept("Rascal/Libraries/Vis/Figure/Properties/valign",[],[],{},[]),"Rascal/Libraries/Resources":concept("Rascal/Libraries/Resources",[],[],{"=","]","file","|","[","id",";","projects","contents","project",");","folder","Resource",",","data",")","(","Resources","import","root","set","util","loc","::"},[]),"Rascal/Libraries/JDT/extractProject":concept("Rascal/Libraries/JDT/extractProject",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/shadowColor":concept("Rascal/Libraries/Vis/Figure/Properties/shadowColor",[],[],{},[]),"Rascal/Patterns/Abstract/Variable":concept("Rascal/Patterns/Abstract/Variable",[],[],{},[]),"Rascal/Expressions/Values/Tuple/GreaterThan":concept("Rascal/Expressions/Values/Tuple/GreaterThan",[],[],{"\>","]",",","[","bool","tuple"},[]),"Rascal/Declarations/StaticTyping/ReifiedTypes":concept("Rascal/Declarations/StaticTyping/ReifiedTypes",[],[],{"type","#"},[]),"Rascal/Expressions/Values/Boolean/toInt":concept("Rascal/Expressions/Values/Boolean/toInt",[],[],{},[]),"Rascal/Expressions/Values/String/reverse":concept("Rascal/Expressions/Values/String/reverse",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/ialign":concept("Rascal/Libraries/Vis/Figure/Properties/ialign",[],[],{"ialign","FProperty",")","(","num","align"},[]),"Rascal/Expressions/Values/List/slice":concept("Rascal/Expressions/Values/List/slice",[],[],{},[]),"Rascal/Expressions/Values/Map/notin":concept("Rascal/Expressions/Values/Map/notin",[],[],{"]",",","map","[","bool","notin"},[]),"Rascal/Statements/Do":concept("Rascal/Statements/Do",["Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}"],[],{"do","(",");","while"},[]),"Rascal/Libraries/Vis/Figure/Properties/onMouseEnter":concept("Rascal/Libraries/Vis/Figure/Properties/onMouseEnter",[],[],{},[]),"Rascal/Libraries/ValueIO/readTextValueString":concept("Rascal/Libraries/ValueIO/readTextValueString",[],[],{},[]),"Rascal/Expressions/Values/Map/domain":concept("Rascal/Expressions/Values/Map/domain",[],[],{},[]),"Rascal/Libraries/RSF":concept("Rascal/Libraries/RSF",[],[],{";","import","RSF"},[]),"Rascal/Libraries/Vis/Figure/Properties/hgap":concept("Rascal/Libraries/Vis/Figure/Properties/hgap",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hshadowPos":concept("Rascal/Libraries/Vis/Figure/Properties/hshadowPos",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/onKeyDown":concept("Rascal/Libraries/Vis/Figure/Properties/onKeyDown",[],[],{},[]),"Rascal/Libraries/PriorityQueue/insertElement":concept("Rascal/Libraries/PriorityQueue/insertElement",[],[],{},[]),"Rascal/Expressions/Values/List/isEmpty":concept("Rascal/Expressions/Values/List/isEmpty",[],[],{},[]),"Rascal/Libraries/Graph/shortestPathPair":concept("Rascal/Libraries/Graph/shortestPathPair",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/space":concept("Rascal/Libraries/Vis/Figure/Figures/space",[],[],{},[]),"Rascal/Libraries/LabeledGraph/bottom":concept("Rascal/Libraries/LabeledGraph/bottom",[],[],{},[]),"Rascal/Expressions/StatementAsExpression":concept("Rascal/Expressions/StatementAsExpression",[],[],{},[]),"Rascal/Expressions/Values/String/GreaterThanOrEqual":concept("Rascal/Expressions/Values/String/GreaterThanOrEqual",[],[],{"\>=","bool","str"},[]),"Rascal/Libraries/IO/readFileLines":concept("Rascal/Libraries/IO/readFileLines",[],[],{},[]),"Rascal/Expressions/Values/Number/arbReal":concept("Rascal/Expressions/Values/Number/arbReal",[],[],{},[]),"Rascal/Expressions/Values/List/head":concept("Rascal/Expressions/Values/List/head",[],[],{},[]),"Rascal/Patterns/Abstract/Set":concept("Rascal/Patterns/Abstract/Set",[],[],{"}",",","{"},[]),"Rascal/Expressions/Values/Set/getOneFrom":concept("Rascal/Expressions/Values/Set/getOneFrom",[],[],{},[]),"Rascal/Expressions/Values/Node/Equal":concept("Rascal/Expressions/Values/Node/Equal",[],[],{"bool","node","=="},[]),"Rascal/Statements/Solve":concept("Rascal/Statements/Solve",[],[],{"solve",",",";",")","("},[]),"Rascal/Expressions/Call":concept("Rascal/Expressions/Call",[],[],{",",")","("},[]),"Rascal/Declarations/AlgebraicDataType":concept("Rascal/Declarations/AlgebraicDataType",[],[],{"=","|",";","data"},[]),"Rascal/Expressions/Values/Map/toString":concept("Rascal/Expressions/Values/Map/toString",[],[],{},[]),"Rascal/Expressions/Values/Relation/CarthesianProduct":concept("Rascal/Expressions/Values/Relation/CarthesianProduct",[],[],{"]",",","[","*","rel","set"},[]),"Rascal/Libraries/Resources/dependencies":concept("Rascal/Libraries/Resources/dependencies",[],[],{},[]),"Rascal/Expressions/Values/Map/Equal":concept("Rascal/Expressions/Values/Map/Equal",[],[],{"]",",","map","[","bool","=="},[]),"Rascal/Expressions/Values/Map/in":concept("Rascal/Expressions/Values/Map/in",[],[],{"]",",","map","[","bool","in"},[]),"Rascal/Expressions/Values/Location":concept("Rascal/Expressions/Values/Location",[],[],{"\>","|",",","\<",")","(","loc"},[]),"Rascal/Libraries/JDT/matchLocations":concept("Rascal/Libraries/JDT/matchLocations",[],[],{},[]),"Rascal/Libraries/Vis/Figure/ColorModel":concept("Rascal/Libraries/Vis/Figure/ColorModel",[],[],{"int","=",";","Color","alias"},[]),"Rascal/Libraries/Vis/TestVis":concept("Rascal/Libraries/Vis/TestVis",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/KeySym":concept("Rascal/Libraries/Vis/Figure/Properties/KeySym",[],[],{"keyKeypad2","keyKeypad1","keyKeypad0","keyEnd","|","keyShiftRight","keyInsert","keyNumLock","keyAltRight","keyAltLeft","int","keyCode","keyKeypadDivide","keyUnknown","keyPrintable","keyKeypadCr","keyKeypadEqual","keyBreak","key","keyHome","keyScrollLock","keyPause","keyKeypadMultiply","keyF9","keyArrowRight","keyF8","keyPageDown","keyF7","keyF6","keyF5","keyF4","keyF3","keyF2","keyF1","keyPageUp","keyKeypadSubtract","keyF20","keyHelp","keyEscape","keyBackSpace","::","keyKeypadDecimal","keyControlRight","=",";","keyEnter","keyTab",");","str","keyF19","keyF18","keyF17","keyF16","keyArrowDown","keyF15","keyCapsLock","keyF14","data","keyF13",")","(","keyF12","keyF11","keyF10","keyControlLeft","keyArrowUp","import","vis","keyPrintScreen","keyCommandLeft","keyArrowLeft","keyCommandRight","keyKeypadAdd","keyShiftLeft","KeySym","keyKeypad9","keyKeypad8","keyKeypad7","keyKeypad6","keyKeypad5","keyKeypad4","()","keyKeypad3"},[]),"Rascal/Libraries/Vis/Figure/Properties/right":concept("Rascal/Libraries/Vis/Figure/Properties/right",[],[],{},[]),"Rascal/Expressions/Values/Number/abs":concept("Rascal/Expressions/Values/Number/abs",[],[],{},[tvQuestion("Rascal/Expressions/Values/Number/abs","1",typeOfExpr(),details(" ",["import Number;"],"","","abs(\<A:int\>)","",false,false,[<"A",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/abs","2",typeOfExpr(),details(" ",["import Number;"],"","","abs(\<A:real\>)","",false,false,[<"A",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/abs","3",valueOfExpr(),details(" ",["import Number;"],"","","abs(\<A:int[-20,-1]\>)","",false,false,[<"A",int(-20,-1)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/abs","4",valueOfExpr(),details(" ",["import Number;"],"","","abs(\<A:real[-20,-1]\>)","",false,false,[<"A",real(-20,-1)>],[],void(),""))]),"Rascal/Libraries/IO/readFile":concept("Rascal/Libraries/IO/readFile",[],[],{},[]),"Rascal/Expressions/Values/List/NotEqual":concept("Rascal/Expressions/Values/List/NotEqual",[],[],{"list","]","!=","[","bool"},[tvQuestion("Rascal/Expressions/Values/List/NotEqual","1",typeOfExpr(),details(" ",[],"","","\<A:list[arb]\> != \<B:same[A]\>","",false,false,[<"A",list(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Libraries/Vis/Figure/Figures/edge":concept("Rascal/Libraries/Vis/Figure/Figures/edge",[],[],{},[]),"Rascal/Expressions/Values/Tuple/NotEqual":concept("Rascal/Expressions/Values/Tuple/NotEqual",[],[],{"]","!=",",","[","bool","tuple"},[]),"Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity":concept("Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity",[],[],{"=","-","non","|","right",")","(","left","assoc","syntax"},[]),"Rascal/Libraries/Message/warning":concept("Rascal/Libraries/Message/warning",[],[],{},[]),"Rascal/Expressions/Values/Boolean/fromString":concept("Rascal/Expressions/Values/Boolean/fromString",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/endGap":concept("Rascal/Libraries/Vis/Figure/Properties/endGap",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/orientation":concept("Rascal/Libraries/Vis/Figure/Properties/orientation",[],[],{"=","|","();","data","topDown","leftRight","downTop","rightLeft","()","Orientation"},[]),"Rascal/Expressions/Values/Number/Conditional":concept("Rascal/Expressions/Values/Number/Conditional",[],[],{"int","?","real","bool",":"},[tvQuestion("Rascal/Expressions/Values/Number/Conditional","1",typeOfExpr(),details(" ",[],"","","(\<A:int\> \> \<B:int\>) ? \<C:int\> : \<D:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>,<"C",int(-20,20)>,<"D",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Conditional","2",typeOfExpr(),details(" ",[],"","","(\<A:int\> \> \<B:int\>) ? \<C:real\> : \<D:real\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>,<"C",real(-20,20)>,<"D",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Conditional","3",typeOfExpr(),details(" ",[],"","","(\<A:int\> \> \<B:int\>) ? \<C:int\> : \<D:real\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>,<"C",int(-20,20)>,<"D",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Conditional","4",valueOfExpr(),details(" ",[],"","","(\<A:int\> \> \<B:int\>) ? \<C:int\> : \<D:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>,<"C",int(-20,20)>,<"D",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Conditional","5",valueOfExpr(),details(" ",[],"","","(\<A:int\> \> \<B:int\>) ? \<C:int\> : \<D:real\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>,<"C",int(-20,20)>,<"D",real(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/Real":concept("Rascal/Expressions/Values/Real",[],[],{"Real","real","import"},[tvQuestion("Rascal/Expressions/Values/Real","1",typeOfExpr(),details(" ",[],"","","\<A:real\>","",false,false,[<"A",real(-20,20)>],[],void(),""))]),"Rascal/Expressions/Visit":concept("Rascal/Expressions/Visit",["Ambiguous reference to concept: Rascal:Insert; \nResolve with one of {Rascal/Expressions/Values/List/Insert, Rascal/Expressions/Values/Set/Insert, Rascal/Statements/Insert}"],[],{"}","visit","{",";",":",")","(","Strategy","default","case"},[tvQuestion("Rascal/Expressions/Visit","1",valueOfExpr(),details(" Given a data type \<code\>ColoredTree\</code\>, complete the definition of the function \<code\>flipRedChildren\</code\> that exchanges the children of all red nodes.\n",[],"data ColoredTree = leaf(int N)      \n                 | red(ColoredTree left, ColoredTree right) \n                 | black(ColoredTree left, ColoredTree right);\n\nColoredTree rb = red(black(leaf(1), red(leaf(2),leaf(3))), black(leaf(3), leaf(4)));\n\npublic ColoredTree flipRedChildren(ColoredTree t){\n  return visit(t){\n     case red(l,r) =\> ","\n  };\n}\n","flipRedChildren(rb) == red( black(leaf(3), leaf(4)), black(leaf(1), red(leaf(3),leaf(2))));","",true,false,[],[],void(),""))]),"Rascal/Expressions/Values/Tuple/GreaterThanOrEqual":concept("Rascal/Expressions/Values/Tuple/GreaterThanOrEqual",[],[],{"\>=","]",",","[","bool","tuple"},[]),"Rascal/Expressions/Values/DateTime":concept("Rascal/Expressions/Values/DateTime",[],[],{"DateTime",";","datetime","import"},[]),"Rascal/Libraries/Vis/Figure/ColorModel/colorScale":concept("Rascal/Libraries/Vis/Figure/ColorModel/colorScale",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/hscrollable":concept("Rascal/Libraries/Vis/Figure/Figures/hscrollable",[],[],{},[]),"Rascal/Expressions/Values/String/toLowerCase":concept("Rascal/Expressions/Values/String/toLowerCase",[],[],{},[]),"Rascal/Statements/Assert":concept("Rascal/Statements/Assert",[],[],{"bool",":","assert","str"},[]),"Rascal/Libraries/RSF/readRSF":concept("Rascal/Libraries/RSF/readRSF",[],[],{},[]),"Rascal":concept("Rascal",[],["Contents","Motivation","InstallingAndRunning","Concepts","Declarations","Patterns","Expressions","Statements","Libraries"],{},[]),"Rascal/Expressions/Values/Boolean/NoMatch":concept("Rascal/Expressions/Values/Boolean/NoMatch",[],[],{"bool","!:=","value"},[]),"Rascal/Expressions/Values/Node/makeNode":concept("Rascal/Expressions/Values/Node/makeNode",[],[],{},[]),"Rascal/Libraries/Benchmark/systemTime":concept("Rascal/Libraries/Benchmark/systemTime",[],[],{},[]),"Rascal/Expressions/Values/Void":concept("Rascal/Expressions/Values/Void",[],[],{"void"},[]),"Rascal/Expressions/Values/List/Intersection":concept("Rascal/Expressions/Values/List/Intersection",[],[],{"list","]",",","[","lub","(","&",")]"},[]),"Rascal/Expressions/Values/Node/arity":concept("Rascal/Expressions/Values/Node/arity",[],[],{},[]),"Rascal/Expressions/Values/String/toReal":concept("Rascal/Expressions/Values/String/toReal",[],[],{},[]),"Rascal/Expressions/Values/Set/mapper":concept("Rascal/Expressions/Values/Set/mapper",[],[],{},[]),"Rascal/Expressions/Values/Relation/Subscription":concept("Rascal/Expressions/Values/Relation/Subscription",[],[],{"int","]",",","[","rel","set"},[]),"Rascal/Expressions/Values/Tuple/LessThanOrEqual":concept("Rascal/Expressions/Values/Tuple/LessThanOrEqual",[],[],{"]",",","[","bool","tuple","\<="},[]),"Rascal/Expressions/Values/List/sort":concept("Rascal/Expressions/Values/List/sort",[],[],{},[]),"Rascal/Statements/Switch":concept("Rascal/Statements/Switch",[],[],{"}","{",";",":",")","(","switch","default","case"},[]),"Rascal/Libraries/Vis/Figure/Properties/vshadowPos":concept("Rascal/Libraries/Vis/Figure/Properties/vshadowPos",[],[],{},[]),"Rascal/Expressions/Values/Boolean/toReal":concept("Rascal/Expressions/Values/Boolean/toReal",[],[],{},[]),"Rascal/Expressions/Values/Boolean/Any":concept("Rascal/Expressions/Values/Boolean/Any",[],[],{",","any","bool",")","("},[]),"Rascal/Concepts/Comprehensions":concept("Rascal/Concepts/Comprehensions",[],[],{},[]),"Rascal/Expressions/Values/Set/toString":concept("Rascal/Expressions/Values/Set/toString",[],[],{},[]),"Rascal/Statements/Continue":concept("Rascal/Statements/Continue",[],[],{";","continue"},[]),"Rascal/Libraries/PriorityQueue/extractMinimum":concept("Rascal/Libraries/PriorityQueue/extractMinimum",[],[],{},[]),"Rascal/Expressions/Values/Set/SubSet":concept("Rascal/Expressions/Values/Set/SubSet",[],[],{"]","[","bool","set","\<="},[tvQuestion("Rascal/Expressions/Values/Set/SubSet","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb[0,int,str,real]]\> \<= \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),real(-20,20)]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Libraries/Vis/Figure/Figures/vscreen":concept("Rascal/Libraries/Vis/Figure/Figures/vscreen",[],[],{},[]),"Rascal/Libraries/IO":concept("Rascal/Libraries/IO",[],[],{";","IO","import"},[]),"Rascal/Expressions/Values/List/domain":concept("Rascal/Expressions/Values/List/domain",[],[],{},[]),"Rascal/Statements/Append":concept("Rascal/Statements/Append",[],[],{"append"},[tvQuestion("Rascal/Statements/Append","1",valueOfExpr(),details(" Complete this function that finds duplicates in a list of strings\n",[],"text = [\"the\", \"jaws\", \"that\", \"bite\", \"the\", \"claws\", \"that\", \"catch\"];\npublic list[str] duplicates(list[str] text){\n    m = {};\n    return \n      for(s \<- text)\n        if(",")\n           append s;\n        else\n           m += s;\n}\n","duplicates(text) == [\"the\", \"that\"];","",true,false,[],[],void(),""))]),"Rascal/Libraries/Vis/Figure/Properties/project":concept("Rascal/Libraries/Vis/Figure/Properties/project",[],[],{},[]),"Rascal/Libraries/Scripting/shell":concept("Rascal/Libraries/Scripting/shell",[],[],{},[]),"Rascal/Expressions/Values/List/SuperList":concept("Rascal/Expressions/Values/List/SuperList",[],[],{"\>=","list","]","[","bool"},[tvQuestion("Rascal/Expressions/Values/List/SuperList","1",typeOfExpr(),details(" ",[],"","","\<A:list[arb]\> \>= \<B:same[A]\>","",false,false,[<"A",list(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/Boolean/And":concept("Rascal/Expressions/Values/Boolean/And",[],[],{"bool","&&"},[]),"Rascal/Libraries/Vis/Figure/Properties/fontColor":concept("Rascal/Libraries/Vis/Figure/Properties/fontColor",[],[],{},[]),"Rascal/Declarations/StaticTyping":concept("Rascal/Declarations/StaticTyping",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties":concept("Rascal/Libraries/Vis/Figure/Properties",["Reference to unknown course or concept: Rascal:fontBaseLine"],[],{"real","];","list","=","FProperty","[","();","computedNum","FProperties","computedColor","str","alias","int","computedReal","num","computedStr","Color","computedInt"},[]),"Rascal/Expressions/Values/String/left":concept("Rascal/Expressions/Values/String/left",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/overlay":concept("Rascal/Libraries/Vis/Figure/Figures/overlay",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/width":concept("Rascal/Libraries/Vis/Figure/Properties/width",[],[],{},[]),"Rascal/Expressions/Values/String/size":concept("Rascal/Expressions/Values/String/size",[],[],{},[]),"Rascal/Expressions/Comprehensions/Enumerator":concept("Rascal/Expressions/Comprehensions/Enumerator",[],[],{"\<-"},[]),"Rascal/Expressions/Values/List/permutations":concept("Rascal/Expressions/Values/List/permutations",[],[],{},[]),"Rascal/Expressions/Values/Integer":concept("Rascal/Expressions/Values/Integer",[],[],{"int","Integer","import"},[tvQuestion("Rascal/Expressions/Values/Integer","1",typeOfExpr(),details(" ",[],"","","\<A:int\>","",false,false,[<"A",int(-20,20)>],[],void(),""))]),"Rascal/Libraries/IO/exists":concept("Rascal/Libraries/IO/exists",[],[],{},[]),"Rascal/Expressions/Values/Value/GreaterThanOrEqual":concept("Rascal/Expressions/Values/Value/GreaterThanOrEqual",["Rascal implementation: broken","Static Error: prompt:///:1,0: \>= not supported on value and valueStatic Error: prompt:///:1,0: \>= not supported on value and value"],[],{"\>=","bool","value"},[]),"Rascal/Expressions/Values/Map/Union":concept("Rascal/Expressions/Values/Map/Union",[],[],{"]",",","map","+","[",")","lub","(","),"},[]),"Rascal/Expressions/Values/Boolean/IsDefined":concept("Rascal/Expressions/Values/Boolean/IsDefined",[],[],{"?","bool"},[]),"Rascal/Libraries/Vis/Figure/Figures/choice":concept("Rascal/Libraries/Vis/Figure/Figures/choice",[],[],{},[]),"Rascal/Expressions/Values/DateTime/NotEqual":concept("Rascal/Expressions/Values/DateTime/NotEqual",[],[],{"!=","datetime","bool"},[]),"Rascal/Libraries/Vis/Figure/Figures/outline":concept("Rascal/Libraries/Vis/Figure/Figures/outline",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/fontNames":concept("Rascal/Libraries/Vis/Figure/Properties/fontNames",["Uncaught Rascal Exception: prompt:///:1,0: Java(\"Invalid thread access\")    org.eclipse.swt.SWT.error(SWT.java:4282)    org.eclipse.swt.SWT.error(SWT.java:4197)    org.eclipse.swt.SWT.error(SWT.java:4168)    org.eclipse.swt.widgets.Display.error(Display.java:1065)"],[],{},[]),"Rascal/Expressions/Values/String/isEmpty":concept("Rascal/Expressions/Values/String/isEmpty",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/halign":concept("Rascal/Libraries/Vis/Figure/Properties/halign",[],[],{},[]),"Rascal/Expressions/Values/Location/GreaterThan":concept("Rascal/Expressions/Values/Location/GreaterThan",[],[],{"\>","bool","loc"},[]),"Rascal/Libraries/JDT/extractResources":concept("Rascal/Libraries/JDT/extractResources",[],[],{},[]),"Rascal/Libraries/Vis/Figure":concept("Rascal/Libraries/Vis/Figure",[],[],{";","import","Figure","vis","::"},[]),"Rascal/Libraries/Vis/Figure/Properties/onClick":concept("Rascal/Libraries/Vis/Figure/Properties/onClick",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/textfield":concept("Rascal/Libraries/Vis/Figure/Figures/textfield",[],[],{},[]),"Rascal/Expressions/Values/Set/reducer":concept("Rascal/Expressions/Values/Set/reducer",[],[],{},[]),"Rascal/Expressions/Values/Set/Intersection":concept("Rascal/Expressions/Values/Set/Intersection",[],[],{"]",",","[","lub","(","&",")]","set"},[choiceQuestion("Rascal/Expressions/Values/Set/Intersection","1","  When you compute the intersection of two sets, the number of elements in the result is always:\n",[good("Smaller than or equal the number of elements in both sets."),bad("Greater than the number of elements in both sets."),bad("Greater than or equal the number of elements in both sets."),bad("Smaller than the number of elements in both sets.")]),tvQuestion("Rascal/Expressions/Values/Set/Intersection","2",typeOfExpr(),details(" ",[],"","","\<A:set[arb[int,str]]\> & \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str()]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Intersection","3",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> & \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Set/Intersection","4",valueOfExpr(),details(" ",[],"","","\<A:set[arb[0,int,str,num,real]]\> & \<B:same[A]\>","",false,false,[<"A",set(arb(0,[int(-20,20),str(),num(-20,20),real(-20,20)]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Declarations/Tag":concept("Rascal/Declarations/Tag",["To be provided"],[],{},[]),"Rascal/Expressions/Values/Boolean/All":concept("Rascal/Expressions/Values/Boolean/All",[],[],{",","bool",")","(","all"},[]),"Rascal/Expressions/Values/Value/LessThanOrEqual":concept("Rascal/Expressions/Values/Value/LessThanOrEqual",["Rascal implementation: broken","Static Error: prompt:///:1,0: \<= not supported on value and valueStatic Error: prompt:///:1,0: \<= not supported on value and value"],[],{"bool","\<=","value"},[]),"Rascal/Expressions/Values/List/toMap":concept("Rascal/Expressions/Values/List/toMap",[],[],{},[]),"Rascal/Expressions/Values/Number/toInt":concept("Rascal/Expressions/Values/Number/toInt",[],[],{},[]),"Rascal/Expressions/Values/Location/LessThan":concept("Rascal/Expressions/Values/Location/LessThan",[],[],{"\<","bool","loc"},[]),"Rascal/Expressions/Replacement":concept("Rascal/Expressions/Replacement",[],[],{"=","]","[@"},[]),"Rascal/Expressions/Values/List/StrictSubList":concept("Rascal/Expressions/Values/List/StrictSubList",[],[],{"list","]","\<","[","bool"},[tvQuestion("Rascal/Expressions/Values/List/StrictSubList","1",typeOfExpr(),details(" ",[],"","","\<A:list[arb]\> \< \<B:same[A]\>","",false,false,[<"A",list(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/Tuple/Subscription":concept("Rascal/Expressions/Values/Tuple/Subscription",[],[],{"]","["},[]),"Rascal/Expressions/Values/List/getOneFrom":concept("Rascal/Expressions/Values/List/getOneFrom",[],[],{},[]),"Rascal/Libraries/LabeledGraph":concept("Rascal/Libraries/LabeledGraph",[],[],{"];","=","]","L",",","to","[&",";","LabeledGraph","from","rel","&","import","label","T","LGraph","alias"},[]),"Rascal/Expressions/Operators":concept("Rascal/Expressions/Operators",[],[],{},[]),"Rascal/Expressions/Values/List/index":concept("Rascal/Expressions/Values/List/index",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/vgrow":concept("Rascal/Libraries/Vis/Figure/Properties/vgrow",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/text":concept("Rascal/Libraries/Vis/Figure/Figures/text",[],[],{},[]),"Rascal/Libraries/Message":concept("Rascal/Libraries/Message",[],[],{"info","=","|","warning",",","data",")","(","error","Message","at",");","msg","str","loc"},[]),"Rascal/Expressions/Values/Boolean/fromInt":concept("Rascal/Expressions/Values/Boolean/fromInt",[],[],{},[]),"Rascal/Patterns/Abstract/Literal":concept("Rascal/Patterns/Abstract/Literal",[],[],{},[]),"Rascal/Expressions/Values/Map/Subscription":concept("Rascal/Expressions/Values/Map/Subscription",[],[],{"]",",","map","["},[]),"Rascal/Libraries/Vis/Figure/Properties/hcenter":concept("Rascal/Libraries/Vis/Figure/Properties/hcenter",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/onKeyUp":concept("Rascal/Libraries/Vis/Figure/Properties/onKeyUp",[],[],{},[]),"Rascal/Statements/Insert":concept("Rascal/Statements/Insert",[],[],{";","insert"},[]),"Rascal/Declarations/SyntaxDefinition/Action":concept("Rascal/Declarations/SyntaxDefinition/Action",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/vsize":concept("Rascal/Libraries/Vis/Figure/Properties/vsize",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/rotate":concept("Rascal/Libraries/Vis/Figure/Figures/rotate",[],[],{},[]),"Rascal/Libraries/Vis/Figure/ColorModel/color":concept("Rascal/Libraries/Vis/Figure/ColorModel/color",[],[],{},[]),"Rascal/Expressions/Values/Set/toList":concept("Rascal/Expressions/Values/Set/toList",[],[],{},[]),"Rascal/Libraries/JDT/isOnBuildPath":concept("Rascal/Libraries/JDT/isOnBuildPath",[],[],{},[]),"Rascal/Expressions/Values/Relation/domainX":concept("Rascal/Expressions/Values/Relation/domainX",[],[],{},[]),"Rascal/Expressions/Values/String/charAt":concept("Rascal/Expressions/Values/String/charAt",[],[],{},[]),"Rascal/Expressions/Values/Relation/domainR":concept("Rascal/Expressions/Values/Relation/domainR",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/area":concept("Rascal/Libraries/Vis/Figure/Properties/area",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition":concept("Rascal/Declarations/SyntaxDefinition",[],[],{"\>","non","-","=","|","right",";","layout",":","keyword",")","(","left","assoc","lexical","syntax","start"},[]),"Rascal/Expressions/Values/Set/in":concept("Rascal/Expressions/Values/Set/in",[],[],{"]","[","bool","in","set"},[]),"Rascal/Expressions/Values/Number/Division":concept("Rascal/Expressions/Values/Number/Division",[],[],{"/","int","real"},[tvQuestion("Rascal/Expressions/Values/Number/Division","1",typeOfExpr(),details(" ",[],"","","\<A:int\> / \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Division","2",typeOfExpr(),details(" ",[],"","","\<A:int\> / \<B:real\>","",false,false,[<"A",int(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Division","3",typeOfExpr(),details(" ",[],"","","\<A:real\> / \<B:int\>","",false,false,[<"A",real(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Division","4",valueOfExpr(),details(" ",[],"","","\<A:num\> / \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Libraries/LabeledGraph/reachX":concept("Rascal/Libraries/LabeledGraph/reachX",[],[],{},[]),"Rascal/Expressions/Values/Map/invert":concept("Rascal/Expressions/Values/Map/invert",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/ellipse":concept("Rascal/Libraries/Vis/Figure/Figures/ellipse",[],[],{},[]),"Rascal/Libraries/LabeledGraph/top":concept("Rascal/Libraries/LabeledGraph/top",[],[],{},[]),"Rascal/Libraries/JDT/extractFactsTransitive":concept("Rascal/Libraries/JDT/extractFactsTransitive",[],[],{},[]),"Rascal/Motivation":concept("Rascal/Motivation",[],[],{},[]),"Rascal/Libraries/Graph/top":concept("Rascal/Libraries/Graph/top",[],[],{},[]),"Rascal/Libraries/LabeledGraph/reachR":concept("Rascal/Libraries/LabeledGraph/reachR",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/layer":concept("Rascal/Libraries/Vis/Figure/Properties/layer",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/justify":concept("Rascal/Libraries/Vis/Figure/Properties/justify",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/lineColor":concept("Rascal/Libraries/Vis/Figure/Properties/lineColor",[],[],{},[]),"Rascal/Expressions/Values/Number/tan":concept("Rascal/Expressions/Values/Number/tan",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition/AmbiguityDiagnosis":concept("Rascal/Declarations/SyntaxDefinition/AmbiguityDiagnosis",[],[],{},[]),"Rascal/Expressions/Values/Set/StrictSubSet":concept("Rascal/Expressions/Values/Set/StrictSubSet",[],[],{"]","\<","[","bool","set"},[tvQuestion("Rascal/Expressions/Values/Set/StrictSubSet","1",typeOfExpr(),details(" ",[],"","","\<A:set[arb]\> \< \<B:same[A]\>","",false,false,[<"A",set(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Expressions/Values/Value/LessThan":concept("Rascal/Expressions/Values/Value/LessThan",["Rascal implementation: broken","Static Error: prompt:///:1,0: \< not supported on value and valueStatic Error: prompt:///:1,0: \< not supported on value and value"],[],{"\<","bool","value"},[]),"Rascal/InstallingAndRunning/Running/Help":concept("Rascal/InstallingAndRunning/Running/Help",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/scrollable":concept("Rascal/Libraries/Vis/Figure/Figures/scrollable",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/hvcat":concept("Rascal/Libraries/Vis/Figure/Figures/hvcat",[],[],{},[]),"Rascal/Statements/For":concept("Rascal/Statements/For",["Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}"],[],{",",";","for",")","("},[]),"Rascal/Libraries/Benchmark":concept("Rascal/Libraries/Benchmark",[],[],{"Benchmark",";","import"},[]),"Rascal/Expressions/Values/Number/Equal":concept("Rascal/Expressions/Values/Number/Equal",[],[],{"int","real","bool","=="},[tvQuestion("Rascal/Expressions/Values/Number/Equal","1",typeOfExpr(),details(" ",[],"","","\<A:int\> == \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Equal","2",typeOfExpr(),details(" ",[],"","","\<A:real\> == \<B:real\>","",false,false,[<"A",real(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Equal","3",typeOfExpr(),details(" ",[],"","","\<A:num\> == \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Equal","4",typeOfExpr(),details(" ",[],"","","\<A:num\> == \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Equal","5",valueOfExpr(),details(" ",[],"","","\<A:num\> == \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Libraries/IO/appendToFile":concept("Rascal/Libraries/IO/appendToFile",[],[],{},[]),"Rascal/Concepts/ControlStructures":concept("Rascal/Concepts/ControlStructures",[],[],{},[]),"Rascal/Expressions/Values/Node/NotEqual":concept("Rascal/Expressions/Values/Node/NotEqual",[],[],{"!=","bool","node"},[]),"Rascal/Libraries/Benchmark/realTime":concept("Rascal/Libraries/Benchmark/realTime",["Reference to unknown course or concept: Rascal:now"],[],{},[]),"Rascal/Libraries/ParseTree":concept("Rascal/Libraries/ParseTree",[],[],{";","import","ParseTree"},[]),"Rascal/Libraries/IO/isDirectory":concept("Rascal/Libraries/IO/isDirectory",[],[],{},[]),"Rascal/Expressions/Values/Number/Remainder":concept("Rascal/Expressions/Values/Number/Remainder",[],[],{"int","%"},[tvQuestion("Rascal/Expressions/Values/Number/Remainder","1",typeOfExpr(),details(" ",[],"","","\<A:int\> % \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/Remainder","2",valueOfExpr(),details(" ",[],"","","\<A:int\> % \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/String/Concatenation":concept("Rascal/Expressions/Values/String/Concatenation",[],[],{"+","str"},[]),"Rascal/Libraries/Vis/Figure/Properties/textAngle":concept("Rascal/Libraries/Vis/Figure/Properties/textAngle",[],[],{},[]),"Rascal/Statements/While":concept("Rascal/Statements/While",["Ambiguous reference to concept: Rascal:Append; \nResolve with one of {Rascal/Expressions/Values/List/Append, Rascal/Statements/Append}"],[],{";",")","(","while"},[]),"Rascal/Libraries/Vis/Figure/Properties/font":concept("Rascal/Libraries/Vis/Figure/Properties/font",[],[],{},[]),"Rascal/Libraries/Resources/getProject":concept("Rascal/Libraries/Resources/getProject",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hendGap":concept("Rascal/Libraries/Vis/Figure/Properties/hendGap",[],[],{},[]),"Rascal/Libraries/Graph/bottom":concept("Rascal/Libraries/Graph/bottom",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/fillColor":concept("Rascal/Libraries/Vis/Figure/Properties/fillColor",[],[],{},[]),"Rascal/Expressions/Values/Node/LessThanOrEqual":concept("Rascal/Expressions/Values/Node/LessThanOrEqual",[],[],{"bool","node","\<="},[]),"Rascal/Concepts/CaseDistinction":concept("Rascal/Concepts/CaseDistinction",[],[],{},[]),"Rascal/Expressions/Values/Location/GreaterThanOrEqual":concept("Rascal/Expressions/Values/Location/GreaterThanOrEqual",[],[],{"\>=","bool","loc"},[]),"Rascal/Libraries/PriorityQueue/findMinimum":concept("Rascal/Libraries/PriorityQueue/findMinimum",[],[],{},[]),"Rascal/Declarations/Program":concept("Rascal/Declarations/Program",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/toArrow":concept("Rascal/Libraries/Vis/Figure/Properties/toArrow",[],[],{},[]),"Rascal/Expressions/Values/List":concept("Rascal/Expressions/Values/List",[],[],{"List","]",",","[","lub","(","import",")]","set"},[choiceQuestion("Rascal/Expressions/Values/List","1","  The type of a list is determined by:\n",[good("The least upperbound of the type of all elements."),good("The types of all the elements in the list."),bad("The type of the element that was first added to the list."),bad("The average of the type of the elements with the smallest and the largests type."),bad("The least upperbound of the type of two arbitrary elements."),bad("The type of two arbitrary elements.")]),tvQuestion("Rascal/Expressions/Values/List","2",valueOfExpr(),details(" Complete this function that tests that a list of words forms a palindrome. A palindrome is a word that is symmetrical \n",[],"import List;\npublic bool isPalindrome(list[str] words){\n  return words == ",";\n}\n","isPalindrome([\"a\", \"b\", \"b\", \"a\"]) == true;","",true,false,[],[],void(),""))]),"Rascal/Expressions/Values/String/GreaterThan":concept("Rascal/Expressions/Values/String/GreaterThan",[],[],{"\>","bool","str"},[]),"Rascal/Expressions/Values/String/NotEqual":concept("Rascal/Expressions/Values/String/NotEqual",[],[],{"!=","bool","str"},[]),"Rascal/Concepts/RewriteRules":concept("Rascal/Concepts/RewriteRules",[],[],{},[]),"Rascal/Expressions/Values/Relation/Join":concept("Rascal/Expressions/Values/Relation/Join",[],[],{"]",",","[","join","rel"},[]),"Rascal/Libraries/Graph/successors":concept("Rascal/Libraries/Graph/successors",[],[],{},[]),"Rascal/Patterns/Abstract":concept("Rascal/Patterns/Abstract",[],["Literal","VariableDeclaration","MultiVariable","Variable","List","Set","Tuple","Node","Descendant","Labelled","TypedLabelled","TypeConstrained"],{"/","\>","]","}",",","\<","[","{","*",":",")","("},[]),"Rascal/Expressions/Values/Map/getOneFrom":concept("Rascal/Expressions/Values/Map/getOneFrom",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/hstartGap":concept("Rascal/Libraries/Vis/Figure/Properties/hstartGap",[],[],{},[]),"Rascal/Expressions/Comprehensions/Filter":concept("Rascal/Expressions/Comprehensions/Filter",[],[],{"bool"},[]),"Rascal/Libraries/IO/print":concept("Rascal/Libraries/IO/print",[],[],{},[]),"Rascal/Expressions/Values/Value":concept("Rascal/Expressions/Values/Value",[],[],{"value"},[]),"Rascal/Expressions/Values/Number/log":concept("Rascal/Expressions/Values/Number/log",[],[],{},[]),"Rascal/Expressions/Values/Number/arbInt":concept("Rascal/Expressions/Values/Number/arbInt",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/grow":concept("Rascal/Libraries/Vis/Figure/Properties/grow",[],[],{},[]),"Rascal/Expressions/Values/Map/domainX":concept("Rascal/Expressions/Values/Map/domainX",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition/ParseTrees":concept("Rascal/Declarations/SyntaxDefinition/ParseTrees",[],[],{},[]),"Rascal/Patterns/Abstract/Node":concept("Rascal/Patterns/Abstract/Node",[],[],{",",")","("},[]),"Rascal/Expressions/Values/Map/domainR":concept("Rascal/Expressions/Values/Map/domainR",[],[],{},[]),"Rascal/Libraries/Vis/Figure/ColorModel/rgb":concept("Rascal/Libraries/Vis/Figure/ColorModel/rgb",[],[],{},[]),"Rascal/Libraries/Benchmark/userTime":concept("Rascal/Libraries/Benchmark/userTime",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/left":concept("Rascal/Libraries/Vis/Figure/Properties/left",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition/AmbiguityDetection":concept("Rascal/Declarations/SyntaxDefinition/AmbiguityDetection",[],[],{},[]),"Rascal/Declarations/SyntaxDefinition/Symbol":concept("Rascal/Declarations/SyntaxDefinition/Symbol",[],[],{"?","^","]","|","\\","[","{","\'\\\\","}+","-","+","*",")","(","\"","!","()","!\>\>","!\<\<","||","&&","@","\>\>","\<\<"},[]),"Rascal/Statements/Throw":concept("Rascal/Statements/Throw",[],[],{"throw"},[]),"Rascal/Libraries/Vis/Figure/Properties/size":concept("Rascal/Libraries/Vis/Figure/Properties/size",[],[],{},[]),"Rascal/Statements/Test":concept("Rascal/Statements/Test",[],[],{},[]),"Rascal/Expressions/Values/Set/notin":concept("Rascal/Expressions/Values/Set/notin",[],[],{"]","[","bool","notin","set"},[]),"Rascal/Expressions/Values/Tuple/LessThan":concept("Rascal/Expressions/Values/Tuple/LessThan",[],[],{"]","\<",",","[","bool","tuple"},[]),"Rascal/Libraries/ValueIO/writeTextValueFile":concept("Rascal/Libraries/ValueIO/writeTextValueFile",[],[],{},[]),"Rascal/Expressions/Values/Number/NotEqual":concept("Rascal/Expressions/Values/Number/NotEqual",[],[],{"int","real","!=","bool"},[tvQuestion("Rascal/Expressions/Values/Number/NotEqual","1",typeOfExpr(),details(" ",[],"","","\<A:int\> != \<B:int\>","",false,false,[<"A",int(-20,20)>,<"B",int(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/NotEqual","2",typeOfExpr(),details(" ",[],"","","\<A:real\> != \<B:real\>","",false,false,[<"A",real(-20,20)>,<"B",real(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/NotEqual","3",typeOfExpr(),details(" ",[],"","","\<A:num\> != \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/NotEqual","4",typeOfExpr(),details(" ",[],"","","\<A:num\> != \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/Number/NotEqual","5",valueOfExpr(),details(" ",[],"","","\<A:num\> != \<B:num\>","",false,false,[<"A",num(-20,20)>,<"B",num(-20,20)>],[],void(),""))]),"Rascal/Expressions/Values/List/Product":concept("Rascal/Expressions/Values/List/Product",[],[],{"list","]",",","[","*","tuple","]]"},[tvQuestion("Rascal/Expressions/Values/List/Product","1",typeOfExpr(),details(" ",[],"","","\<A:list[arb[int,str]]\> * \<B:same[A]\>","",false,false,[<"A",list(arb(0,[int(-20,20),str()]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/List/Product","2",typeOfExpr(),details(" ",[],"","","\<A:list[arb]\> * \<B:same[A]\>","",false,false,[<"A",list(arb(0,[bool(),int(-20,20),real(-20,20),num(-20,20),str(),\loc(),datetime()]))>,<"B",same("A")>],[],void(),"")),tvQuestion("Rascal/Expressions/Values/List/Product","3",valueOfExpr(),details(" ",[],"","","\<A:list[arb[0,int,str,num,real]]\> * \<B:same[A]\>","",false,false,[<"A",list(arb(0,[int(-20,20),str(),num(-20,20),real(-20,20)]))>,<"B",same("A")>],[],void(),""))]),"Rascal/Libraries/Message/info":concept("Rascal/Libraries/Message/info",[],[],{},[]),"Rascal/Libraries/Scripting/eval":concept("Rascal/Libraries/Scripting/eval",[],[],{},[]),"Rascal/Expressions/Operators/FieldAssignment":concept("Rascal/Expressions/Operators/FieldAssignment",[],[],{"=","]","["},[]),"Rascal/Libraries/Resources/references":concept("Rascal/Libraries/Resources/references",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Figures/scaleSlider":concept("Rascal/Libraries/Vis/Figure/Figures/scaleSlider",[],[],{},[]),"Rascal/Expressions/Values/Range":concept("Rascal/Expressions/Values/Range",[],[],{"]",",","[",".."},[]),"Rascal/Libraries/Benchmark/cpuTime":concept("Rascal/Libraries/Benchmark/cpuTime",[],[],{},[]),"Rascal/Libraries/PriorityQueue/isEmpty":concept("Rascal/Libraries/PriorityQueue/isEmpty",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/onMouseUp":concept("Rascal/Libraries/Vis/Figure/Properties/onMouseUp",[],[],{},[]),"Rascal/Libraries/Vis/Figure/Properties/vshrink":concept("Rascal/Libraries/Vis/Figure/Properties/vshrink",[],[],{},[]),"Rascal/Expressions/Values/Relation/domain":concept("Rascal/Expressions/Values/Relation/domain",[],[],{},[choiceQuestion("Rascal/Expressions/Values/Relation/domain","1","  Which statement about the domain and range function on a binary relation of type \<code\>rel[int,int]\</code\> is correct:\n",[good("Domain returns a set of the first element of each tuple in the relation and range returns a set of the second element of each tuple."),good("Domain and range are only applicable to binary relations."),bad("Domain returns a list of the first element of each tuple in the relation and range returns a list of the second element of each tuple."),bad("Domain returns a set of the second element of each tuple in the relation and range returns a set of the first element of each tuple."),bad("Domain returns a list of the second element of each tuple in the relation and range returns a list of the first element of each tuple."),bad("Domain returns a set of the elements that occur in any tuple in the relation and range returns a list of those elements.")])]),"Rascal/Expressions/Values/List/in":concept("Rascal/Expressions/Values/List/in",[],[],{"list","]","[","bool","in"},[]),"Rascal/Libraries/IDE/Outline":concept("Rascal/Libraries/IDE/Outline",[],[],{},[]),"Rascal/Libraries/IDE/Folding":concept("Rascal/Libraries/IDE/Folding",[],[],{"true","=","foldable",";","syntax","a","@"},[])),["!","!:=","!\<\<","!=","!\>\>","\"","\"),","\")?","\")]);","\"\<\"","\"\>\";","#","%","&","&&","\'\\\\","(","(\"","(&","()","();","([",")","),",");",")\>",")]","){\>","){\>...","*","*=","+","+=",",","-","-=",".","..","...\"","...)","/","/*1*/","//","/=",":","::",":=",";","\<","\<-","\<:","\<\<","\<=","\<==\>","\<}","\<}\>","=","==","==\>","=\>","\>","\>=","\>\>","?","?=","@","Abstract","Action","AddSegment","Addition","AlgebraicDataType","Alias","All","AmbiguityDetection","AmbiguityDiagnosis","And","Angles","Annotation","Any","Append","Assert","Assignment","Associativity","AstNode","AstNodeRel","Benchmark","BindingRel","Block","Boolean","Bound","Break","Call","CarthesianProduct","CaseDistinction","Color","ColorModel","Comments","Composition","CompositionModel","Comprehension","Comprehensions","Concatenation","Concepts","Concrete","ConcreteSyntax","Conditional","Constructor","Contents","Continue","ControlStructures","Datatypes","DateTime","Declarations","Descendant","Difference","Disambiguation","Division","Do","DocumentationHover","Entity","EntityRel","EntitySet","Enumerator","Enumerators","Equal","EquationSolving","Equivalence","ErrorMarking","Exception","Expressions","FProperties","FProperty","Fail","FieldAssignment","FieldProjection","FieldSelection","Figure","Figures","Filter","Folding","Follow","For","Function","Functions","Graph","GreaterThan","GreaterThanOrEqual","Help","Hyperlinking","IDE","IDEConstruction","IO","Id","If","IfDefinedElse","ImmutableValues","Implication","Import","Insert","Installing","InstallingAndRunning","Integer","InteractionModel","Intersection","IsDefined","JDT","Java","JavaADT","Javadoc","Join","KeyModifier","KeySym","LGraph","LabeledGraph","Labelled","LessThan","LessThanOrEqual","Libraries","LineDecoration","LinearProgramming","List","Literal","Location","Map","Match","Maybe","Menus","Message","Modifier","ModifierRel","Module","Motivation","MultiVariable","Multiplication","Negation","NoMatch","Node","NotEqual","Number","Object","Operators","Option","Or","Orientation","Outline","ParseTree","ParseTrees","Pattern","PatternMatching","PatternWithAction","Patterns","Plugin","Preceed","PrimitiveType","Priority","PriorityQueue","Product","Program","Properties","RSF","Range","Rascal","Real","Reducer","ReflexiveTransitiveClosure","Regular","ReifiedTypes","Relation","Remainder","Render","Replacement","Reserve","Resource","Resources","Return","RewriteRules","Running","Scripting","Selection","Set","Solve","StatementAsExpression","Statements","StaticTyping","Strategy","StrictSubList","StrictSubMap","StrictSubSet","StrictSuperList","StrictSuperMap","StrictSuperSet","String","SubList","SubMap","SubSet","Subscription","Subtraction","SuperList","SuperMap","SuperSet","Switch","Symbol","SyntaxDefinition","SyntaxDefinitionAndParsing","Tag","Test","TestVis","Throw","TransitiveClosure","TryCatch","Tuple","TypeConstrained","TypeConstraints","TypeParameters","TypedLabelled","Types","Union","Value","ValueIO","Values","Variable","VariableDeclaration","Vis","Visit","Visiting","Void","While","[","[&","[@","\\","\\0","]","];","]]","^","`","abs","align","alt_2","anno","annotationTypeDeclaration","annotationTypeMemberDeclaration","annotations","anonymousClass","anonymousClassDeclaration","appendToFile","arbBool","arbColor","arbInt","arbReal","area","arguments","arity","array","arrayAccess","arrayCreation","arrayInitializer","arrayType","aspectRatio","assertStatement","assoc","at","benchmark","blockComment","body","bodyDeclarations","bool","boolValue","booleanExpression","booleanLiteral","bottom","bound","box","breakStatement","button","byte","calls","carrier","carrierR","carrierX","case","castExpression","catch","catchClause","catchClauses","center","char","charAt","charValue","characterLiteral","checkbox","choice","class","classInstanceCreation","classes","collectionExpression","color","colorNames","colorScale","colorSteps","combo","compilationUnit","complement","computeFigure","computedColor","computedInt","computedNum","computedReal","computedStr","conditionalExpression","connect","constr","constructorInvocation","constructors","contains","continueStatement","cos","cpuTime","data","datetime","declaredMethods","declaredSubTypes","declaredTopTypes","default","defaultBlock","delete","dependencies","deprecated","dimensions","doStatement","doc","domain","domainR","domainX","double","downTop","edge","elementType","ellipse","else","elseBranch","elseStatement","emptyStatement","endGap","endsWith","enhancedForStatement","entity","enum","enumConstant","enumConstantDeclaration","enumConstants","enumDeclaration","error","escape","eval","evalType","exists","expression","expressionStatement","extended","extendedOperands","extends","extendsList","extractClass","extractFactsTransitive","extractMinimum","extractProject","extractResource","extractResources","false","field","fieldAccess","fieldDeclaration","fieldDecls","fields","file","fillColor","final","finally","findAll","findFirst","findLast","findMinimum","float","foldable","folder","font","fontBold","fontColor","fontItalic","fontNames","fontSize","forStatement","fragments","from","fromArrow","fromInt","fromString","fswitch","gap","genericTypes","getAnnotations","getName","getOneFrom","getProject","graph","gray","grid","grow","halign","hcat","hcenter","hconnect","head","height","hendGap","hgap","hgrow","highlight","hint","hresizable","hscreen","hscrollable","hshadowPos","hshrink","hsize","hstartGap","hvcat","ialign","id","ident","ifStatement","implementation","implements","implode","importDeclaration","imports","in","index","infixExpression","info","initializer","initializers","insertAt","insertElement","instanceofExpression","int","interface","interpolateColor","invert","invertUnique","isDefault","isDirectory","isEmpty","isFile","isOnBuildPath","isVarargs","javadoc","jdt","just","justify","key","keyAltLeft","keyAltRight","keyArrowDown","keyArrowLeft","keyArrowRight","keyArrowUp","keyBackSpace","keyBreak","keyCapsLock","keyCode","keyCommandLeft","keyCommandRight","keyControlLeft","keyControlRight","keyEnd","keyEnter","keyEscape","keyF1","keyF10","keyF11","keyF12","keyF13","keyF14","keyF15","keyF16","keyF17","keyF18","keyF19","keyF2","keyF20","keyF3","keyF4","keyF5","keyF6","keyF7","keyF8","keyF9","keyHelp","keyHome","keyInsert","keyKeypad0","keyKeypad1","keyKeypad2","keyKeypad3","keyKeypad4","keyKeypad5","keyKeypad6","keyKeypad7","keyKeypad8","keyKeypad9","keyKeypadAdd","keyKeypadCr","keyKeypadDecimal","keyKeypadDivide","keyKeypadEqual","keyKeypadMultiply","keyKeypadSubtract","keyNumLock","keyPageDown","keyPageUp","keyPause","keyPrintScreen","keyPrintable","keyScrollLock","keyShiftLeft","keyShiftRight","keyTab","keyUnknown","keyword","label","labeledStatement","lang","lastModified","layer","layout","left","leftRight","leftSide","level","lexical","lineColor","lineComment","lineNumber","lineStyle","lineWidth","link","links","listEntries","ln","loc","log","long","lub","makeNode","manhattan","mapper","markerAnnotation","matchLocations","max","memberRef","memberRefParameter","memberValuePair","memberValuePairs","messages","method","methodBodies","methodDeclaration","methodDecls","methodInvocation","methods","min","mkDirectory","mkPriorityQueue","modAlt","modCommand","modCtrl","modShift","modifier","modifiers","mouseOver","msg","name","native","non","none","normalAnnotation","nothing","notin","nr","nroot","null","nullLiteral","num","numberLiteral","objectType","onClick","onDemand","onKeyDown","onKeyUp","onMouseDown","onMouseEnter","onMouseExit","onMouseMove","onMouseUp","operand","operator","opt","optionalBooleanExpression","optionalExpression","optionalQualifier","optionalQualifierString","orientation","outline","overlay","pack","package","packageDeclaration","packages","pad","palette","parameter","parameterizedType","parameters","params","parenthesizedExpression","parse","permutations","possibleExceptions","postfixExpression","pow","power","power1","predecessors","prefixExpression","primType","primitive","primitiveType","print","println","private","project","projects","protected","public","qualifiedName","qualifiedType","qualifier","range","rangeR","rangeX","reach","reachR","reachX","readBinaryValueFile","readFile","readFileBytes","readFileLines","readRSF","readTextValueFile","readTextValueString","realTime","reducer","references","rel","render","renderSave","replaceAll","replaceFirst","replaceLast","resizable","returnStatement","returnType","reverse","rgb","right","rightLeft","rightSide","root","rotate","scale","scaleSlider","scrollable","setAnnotations","shadow","shadowColor","shadowPos","shapeClosed","shapeConnected","shapeCurved","shell","short","shortestPathPair","shrink","simpleName","simpleType","sin","singleMemberAnnotation","singleVariableDeclaration","size","slice","some","sort","space","sqrt","start","startGap","startsWith","static","staticImport","std","str","strictfp","stringLiteral","stringValue","substring","successors","super","superConstructorInvocation","superFieldAccess","superMethodInvocation","switchCase","switchStatement","synchronized","synchronizedStatement","syntax","systemTime","tagElement","tail","takeOneFrom","tan","text","textAngle","textElement","textfield","thenBranch","thenStatement","thisExpression","throwStatement","throws","timer","to","toArrow","toInt","toList","toLowerCase","toMap","toMapUnique","toReal","toRel","toSet","toString","toUpperCase","top","topDown","transient","tree","treemap","true","try","tryStatement","type","typeArgument","typeDeclaration","typeDeclarationStatement","typeDeclarations","typeLiteral","typeName","typeOfArray","typeOfParam","typeParameter","typedArguments","types","unparse","updaters","userTime","util","val","valign","variableDeclarationExpression","variableDeclarationFragment","variableDeclarationStatement","variables","vcat","vcenter","vconnect","vendGap","vgap","vgrow","volatile","vresizable","vscreen","vscrollable","vshadowPos","vshrink","vsize","vstartGap","warning","whileExpression","whileStatement","width","wildcard","wildcardType","writeBinaryValueFile","writeFile","writeTextValueFile","{","{\>","{\>...","|","||","}","}+"])