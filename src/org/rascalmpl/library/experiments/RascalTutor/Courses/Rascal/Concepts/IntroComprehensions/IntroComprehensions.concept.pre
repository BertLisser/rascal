concept("IntroComprehensions",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Concepts/IntroComprehensions/IntroComprehensions.concept|,[],[],{"Beginner"},{"Comprehensions","Set/Comprehension","List/Comprehension","Map/Comprehension"},"","","","",{}," Comprehensions are a notation inspired by mathematical set-builder notation that helps to write succinct definitions of lists and sets. They are also inspired by queries as found in a language like SQL.\n \<br/\>\n\<br/\>\n\n Rascal generalizes comprehensions in various ways. Comprehensions exist for lists, sets and maps. \n A comprehension consists of an expression that determines the successive elements to be included in the \n result and a list of enumerators and tests (boolean expressions). \n The enumerators produce values and the tests filter them. \n \<br/\>\n\<br/\>\n\n See \<a href=\"/show?concept=Comprehensions\"\>Comprehensions\</a\>, \<a href=\"/show?concept=List/Comprehension\"\>List/Comprehension\</a\>, \<a href=\"/show?concept=Set/Comprehension\"\>Set/Comprehension\</a\>, and \<a href=\"/show?concept=Map/Comprehension\"\>Map/Comprehension\</a\> for details.\n"," A standard example is\n  \<pre class=\"listing\"\>{ x * x | int x &lt;- [1 .. 10], x % 3 == 0 }\n\</pre\> which returns the set \<code\>{9, 36, 81}\</code\>, i.e., the squares of the integers in the range \<code\>[ 1 .. 10 ]\</code\> that \n are divisible by 3. A more intriguing example is\n  \<pre class=\"listing\"\>{name | /asgStat(Id name, _) &lt;- P}\n\</pre\> which traverses program \<code\>P\</code\> and constructs a set of all identifiers that occur on the left hand \n side of assignment statements in \<code\>P\</code\>.\n","","",[])