concept("Comprehensions",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Expressions/Comprehensions/Comprehensions.concept|,[],[],{"Language"},{"Set/Comprehension","List/Comprehension","Map/Comprehension"},"","","","",{}," Comprehensions provide a concise notation to conditionally generate new values for the types:\n  \<ul\>\<li\> \<code\>list\</code\>, see \<a href=\"/show?concept=List/Comprehension\"\>List/Comprehension\</a\>,\</li\>\n\<li\> \<code\>set\</code\>, see \<a href=\"/show?concept=Set/Comprehension\"\>Set/Comprehension\</a\>,\</li\>\n\<li\> \<code\>map\</code\>, see \<a href=\"/show?concept=Map/Comprehension\"\>Map/Comprehension\</a\>.\</li\>\n\</ul\> The syntax varies slightly for each type, but comprehensions have the following common elements:\n  \<ul\>\<li\> \<i\>Generator\</i\>s that come in two flavours: \<ul\>\<li\> an \<i\>enumerator\</i\> that generates all the values in some subject value.\</li\>\n\<li\> a \<i\>filter\</i\> that performs an arbitrary test on previously generated values.\</li\>\n\</ul\>\</li\>\n\<li\> One or more \<i\>contributing expression\</i\>s that are added to the list, set or map that is being constructed.\</li\>\n\</ul\> The contributing expressions are evaluated for all possible values of the enumerators that are not\n excluded by a test. When a filter fails, execution continues with the preceding enumerator (if any).\n \<br/\>\n\<br/\>\n\n Each enumerator may introduce new variables that can be used in subsequent generators as well as in the contributing expressions.\n A generator can use the variables introduced by preceding generators. \n"," \<pre class=\"screen\"\>\</pre\>\n  A list comprehension:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>[ 3 * X | int X &lt;- [1 .. 10] ];\nlist[int]: [3,6,9,12,15,18,21,24,27,30]\n\</pre\>\n  A list comprehension with a filter:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>[ 3 * X | int X &lt;- [1 .. 10], X &gt; 5];\nlist[int]: [18,21,24,27,30]\n\</pre\>\n  A list comprehension with multiple contributing expressions:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>[X, X * X | int X &lt;- [1, 2, 3, 4, 5], X &gt;= 3];\nlist[int]: [3,9,4,16,5,25]\n\</pre\>\n  A set comprehension with a test:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{X | int X &lt;- {1, 2, 3, 4, 5}, X &gt;= 3};\nset[int]: {5,4,3}\n\</pre\>\n  A set comprehension that constructs a relation:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{&lt;X, Y&gt; | int X &lt;- {1, 2, 3}, int Y &lt;- {2, 3, 4}, X &gt;= Y};\nrel[int, int]: {&lt;2,2&gt;,&lt;3,3&gt;,&lt;3,2&gt;}\n\<b\>rascal\>\</b\>{&lt;Y, X&gt; | &lt;int X, int Y&gt; &lt;- {&lt;1,10&gt;, &lt;2,20&gt;}};\nrel[int, int]: {&lt;20,2&gt;,&lt;10,1&gt;}\n\</pre\> See \<a href=\"/show?concept=List/Comprehension\"\>List/Comprehension\</a\>, \<a href=\"/show?concept=Set/Comprehension\"\>Set/Comprehension\</a\>, or \<a href=\"/show?concept=Map/Comprehension\"\>Map/Comprehension\</a\> for more examples.\n","","",[])