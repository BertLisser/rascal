concept("Rule",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Declarations/Rule/Rule.concept|,[],[],{"Language"},{"Insert","Declarations/AlgebraicDataType"},""," \<code\>rule \<i\>Name\</i\> \<i\>PatternWithAction\</i\>;\</code\>\n","","",{"rule",";"}," Functions are the workhorses of Rascal. They can have any value as parameter or result and are explicitly called by the user. Also, functions are declared inside modules and their visibility can be controlled.\n \<br/\>\n\<br/\>\n\n Rewrite rules, on the other hand, operate only on nodes and \<a href=\"/show?concept=Declarations/AlgebraicDataType\"\>Declarations/AlgebraicDataType\</a\>, they are implicitly applied when a \n new value (we refer to this as the \<i\>subject\</i\> value) is constructed. The scope of rewrite rules is the whole Rascal program. \n Rewrite rules are applied to the subject value in a bottom-up fashion. As a result, the subject value may be changed. \n This process is repeated as long as there are rules that can be applied to the current subject value. \n Technically, this is called \<i\>innermost rewriting\</i\>. When done, the result of rewriting the original subject value is used instead of that original value.\n \<br/\>\n\<br/\>\n\n \<br/\>\n\<br/\>\n\n During execution of rules the following applies:\n  \<ul\>\<li\> Rules are applied non-deterministically, and in any order of matching.\</li\>\n\<li\> The right-hand side of rules can contain fail statements, which cause backtracking over the alternative matches or alternative rules for a certain constructor.\</li\>\n\<li\> When the right-hand side is a statement, an \<a href=\"/show?concept=Insert\"\>Insert\</a\> statement determines the value of the actual replacement. \</li\>\n\</ul\>"," \<pre class=\"screen\"\>\</pre\>\n  First define an Algebraic Data Type \<code\>Bool\</code\> that represents Booleans:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>data Bool = btrue()\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;          | bfalse()\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;          | band(Bool left, Bool right)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;          | bor(Bool left, Bool right);\nok\n\</pre\>\n  Next define some classic rewrite rules on Bool:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>rule a1 band(btrue(), Bool B)    =&gt; B;\nok\n\<b\>rascal\>\</b\>rule a2 band(bfalse(), Bool B)   =&gt; bfalse;\nok\n\<b\>rascal\>\</b\>band(band(btrue(),btrue()),band(btrue(), bfalse()));\nBool: bfalse()\n\</pre\> You may wonder why we write btrue and bfalse instead of true and false. The explanation is that the latter are reserved words that cannot be used as ordinary names. Reserved words can, however, be used as ordinary names by escaping them; this is done by prefixing them with a backslash (\<code\>\\\</code\>), e.g. \<code\>\\true\</code\> and \<code\>\\false\</code\>.\n","","",[])