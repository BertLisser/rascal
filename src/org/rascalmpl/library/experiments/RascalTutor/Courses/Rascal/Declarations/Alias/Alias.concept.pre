concept("Alias",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Declarations/Alias/Alias.concept|,[],[],{"Language"},{"TypeParameters"},""," \<code\>alias \<i\>Name\</i\>  = \<i\>Type\</i\>;\</code\>\n","","",{"=",";","alias"}," Everything can be expressed using the elementary types and values that are provided by Rascal. \n However, for the purpose of documentation and readability it is sometimes better to use a descriptive name as type indication, rather than an elementary type.  The use o aliases is a good way to document your intentions. \n \<br/\>\n\<br/\>\n\n An alias declaration states that \<code\>\<i\>Name\</i\>\</code\> can be used everywhere instead of the already defined type \<code\>\<i\>Type\</i\>\</code\>. \n Both types are thus structurally equivalent. \n"," \<pre class=\"screen\"\>\</pre\>\n  Introduce two aliases \<code\>ModuleId\</code\> and \<code\>Frequency\</code\> for the type str.\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>alias ModuleId = str;\nok\n\<b\>rascal\>\</b\>alias Frequency = int;\nok\n\</pre\>\n  Another example is an alias definition for a graph containing integer nodes:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>alias IntGraph = rel[int,int];\nok\n\</pre\>\n Note that the Rascal Standard Library provides a graph data type that is defined as follows:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>alias Graph[&amp;T] = rel[&amp;T, &amp;T];\nok\n\</pre\> In other words the standard graph datatype can be parameterized with any element type.\n \<br/\>\n\<br/\>\n\n See \<a href=\"/show?concept=TypeParameters\"\>TypeParameters\</a\> of other examples parameterized alias declarations..\n","","",[])