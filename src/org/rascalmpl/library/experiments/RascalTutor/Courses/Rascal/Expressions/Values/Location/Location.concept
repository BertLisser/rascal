Name:Location

Details:

Categories: Language

Syntax: `| $Uri$ | ( $O$, $L$, <$BL$, $BC$> , <$EL$,$EC$> )`
where:
* $Uri$ is an arbitrary Uniform Resource Identifier (URI).

* $O$ and $L$ are integer expressions giving the offset of this location to the begin of file, respectively, its length.

* $BL$ and $BC$ are integers expressions giving the begin line and begin column.

* $EL$ and $EC$ are integers expressions giving the end line and end column.


The part following the second pipe symbol (`|`) is optional.

Types: `loc`

Description:
Location values are represented by the type `loc` and serve the following purposes:
* Providing a uniform mechanism for accessing local or remote files. This is used in all IO-related library functions.
* If the optional part is present they serve as text coordinates in a specific local or remote source file.
  This is very handy to associate a source code location which extracted facts.


URIs are explained in [Uniform Resource Identifier](http://en.wikipedia.org/wiki/Uniform_Resource_Identifier). From their original definition in RFC3986 we cite the following useful overview of an URI:
<listing>

         foo://example.com:8042/over/there?name=ferret#nose
         \_/   \______________/\_________/ \_________/ \__/
          |           |            |            |        |
       scheme     authority       path        query   fragment
          |   _____________________|__
         / \ /                        \
         urn:example:animal:ferret:nose
</listing>

The elements of a location value can be accessed and modified using the standard mechanism of field selection and field assignment. The corresponding field names are:

* `uri`: the URI of the location. Also subfields of the URI can be accessed:

  **`scheme`: the scheme (or protocol) like `http` or `file`. 
     Also supported is `cwd`: for current working directory (the directory from which Rascal was started).

  **`authority`: the domain where the data are located.

  **`host`: the host where the URI is hosted (part of authority).

  **`port`: port on host (part ofauthority).

  **`path`: path name of file on host.

  **`extension`: file name extension.

  **`query`: query data

  **`fragment`: the fragment name following the path name and query data.

  **`user`: user info (only present in schemes like mailto).

*`offset`: start of text area.

*`length`: length of text area

*`begin.line`, `begin.column`: begin line and column of text area.

*`end.line`, `end.column` end line and column of text area.



Examples:

Locations with specific position information should always be generated automatically but for the curious here is an example:
<listing>
|file:///home/paulk/pico.trm|(0,1,<2,3>,<4,5>)
</listing>

Benefits:

Pittfalls:

Questions:

