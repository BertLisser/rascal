concept("Concepts",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Concepts/Concepts.concept|,[],["IntroStaticTyping"],{"Language","Beginner"},{},"","","","",{}," Rascal has a statically checked type system that prevents type errors and uninitialized variables at runtime. \n There are no runtime type casts as in Java and there are therefore less opportunities for run-time errors. \n The language provides higher-order, parametric polymorphism. \n A type aliasing mechanism allows documenting specific uses of a type. \n Built-in operators are heavily overloaded. \n For instance, the operator \<code\>+\</code\> is used for addition on integers and reals but also for list concatenation, \n set union and the like.\n \<br/\>\n\<br/\>\n\n The flow of Rascal program execution is completely explicit. Boolean expressions determine choices that drive the control structures. Rewrite rules form the only exception to the explicit control flow principle. Only local backtracking is provided in the context of boolean expressions and pattern matching; side effects are undone in case of backtracking.\n \<br/\>\n\<br/\>\n\n Most language concepts are described separately but some features we just mention here:\n  \<ul\>\<li\> Rascal programs consist of modules that are organized in packages.\</li\>\n\<li\> Modules can import other modules.\</li\>\n\<li\> The visibility of entities declared in modules can be controlled using public/private modifiers.\</li\>\n\<li\> Datastructures may have annotations that can be explicitly used and modified.\</li\>\n\<li\> There is an extensive library for builtin datatypes, input/output, fact extraction from Java source code, visualization, and more.\</li\>\n\</ul\>","","","",[])