Name: Concrete

Details:

Categories:

Synopsis:

Description:

Suppose we want to manipulate text written in some hypothetical language LANG. 
Then first the concrete syntax of LANG has to be defined by importing an SDF module that declares the non-terminals and syntax rules for LANG. 
Next LANG programs have to be parsed. LANG programs made come from text files or they may be included in the Rascal program as literals. 
In both cases the text is parsed according to the defined syntax and the result is a parse tree in the form of a value of type Tree. 
Concrete patterns operate on these trees.

A _concrete pattern_ is a quoted concrete syntax fragment that may contain variables. The syntax that is used to parse the concrete pattern may come from any SDF module that has been imported in the module in which the concrete pattern occurs.

A concrete pattern may have the following forms:

* _Quoted pattern_
<listing>
` $Token_1$ $Token_2$ ... $Token_n$ `
</listing>
Inside a quoted pattern arbitrary lexical tokens may occur. Quoted patterns may contain variable declaration patterns and variable patterns (see below).

* A _typed quoted pattern_
<listing>
($Symbol$) ` $Token_1$ $Token_2$ ... $Token_n$ `
</listing>
is a quoted pattern that is preceeded by an SDF symbol to define its desired syntactic type.

* A _typed variable pattern_
<listing>
<$Type$ $Var$>
</listing>

* A _variable pattern_
<listing>
<$Var$>
</listing>



Inside concrete syntax patterns, layout is ignored.

Examples:
Examples (in a context where an SDF module has been imported that defines the appropriate syntax):

* Quoted syntax pattern with two pattern variable declarations:
<listing>
` while <EXP Exp> do <{STATEMENT ";"}* Stats> od `
</listing>
Two observations can be made about this example:

**The non-terminals (sorts in SDF parlance) `EXP` and `{STATEMENT ";"}*` are declared in the imported SDF module and can be used 
as types in the Rascal program.

** When this pattern is matched successfully against a subject, the variables `Exp` and `Stats` will be bound.

* Quoted syntax pattern with two pattern variable uses (`Exp` and `Stats` should already have a value):
<listing>
` while <Exp> do <Stats> od `
</listing>
* Identical to the previous example, but with a declaration of the desired syntactic type:
<listing>
STATEMENT ` while <Exp> do <Stats> od `
</listing>

Benefits:

Pittfalls:

Questions:

